

#include "StdAfx.h"
#include "SeviceFunctionNew.h"
#include "BinaryGroup.h"
#include "TimeProgressCtrl.h"
#include "JLRBaseApp.h"
#include "EcuInfoCtrl.h"

//#if defined(__NT800__) || defined(__NT5600ALLSYSFUN__) || defined (__NT5600AA__)

// 全新揽胜-2016
W_I16 CSeviceFunctionNew::MenuProcess_L405_201600(W_U32 idTask)
{
    W_I16 iRet = 0;
    CSendFrame sendframe;
    switch (idTask)
    {
    case 0x00F0005E:    //编程01-全部地形控制模块.    
        All_Terrain_Module_00F0005E_NEW_lansheng_L494_2016();
        break;
    case 0x00F0012B:    //编程02-平视显示器冷却风扇模块
        HeadUpDisplay_Cooling_Module_00F0005E_NEW_lansheng_L494_2016();
        break;
    case 0x00F0009A:    //编程03-速度控制模块    
        Speed_control_NEW_lansheng_L494_2016();
        break;
    case 0x00F00130:    //编程04-数字音频广播模块         125K
        Digital_audio_NEW_lansheng_2016();
        break;
    case 0x00F00057:    //编程05-前控制/显示界面模块（高水平显示正面）     125K
        Front_control_display_NEW_lansheng_2016();
        break;
    case 0x00F0005A:    //编程06-前部控制接口模块（取暖、通风和空调控制）      125K
        FCIM_NEW_lansheng_2016();
        break;
    case 0x00F0005B:    //编程07-前部控制接口模块‘B’（前音频控制面板）    125K
        Front_control_B_NEW_lansheng_2016();
        break;
    case 0x00F000E4:    //编程08-前部控制接口模块‘C’（前音频控制面板）    125K
        Front_control_C_NEW_lansheng_2016();
        break;
    case 0x00F00092:    //编程09-换档模块    
        Gear_shift_NEW_lansheng_L494_2016();
        break;
    case 0x00F0009B:    //编程10-通用近距离传感器模块    
        GeneralProximitySensor_NEW_lansheng_L494_2016();
        break;
    case 0x00F00135:    //编程11-图像处理控制模块 A
        Image_control_NEW_lansheng_L494_2016();
        break;
    case 0x00F0013A:    //编程12-图像处理控制模块       125K
        Image_Control_Module_00F0013A_L538_2017();
        break;
    case 0x00F000F8:    //编程13-导航控制模块    125K
        Navigation_control_NEW_lansheng_L494_2016();
        break;
    case 0x00F0005D:    //编程14-约束乘员分类系统模块
        Restraints_NEW_lansheng_L494_2016();
        break;
    case 0x00F000E5:    //编程15-踏板控制模块     125K
        Board_control_NEW_lansheng_L494_2016();
        break;
    case 0x00F000B1:    //编程16-后门/行李箱模块     125K
        Back_door_modules_NEW_lansheng_L494_2016();
        break;
    case 0x00F000E8:    //编程17-下部  -  后门/行李箱模块    125K
        Lower_RearGate_And_Trunk_00F000E8_L405_2013();
        break;
    case 0x00F0005F:    //编程18-转向角传感器模块
        ConfigureNewModules_NEW_lansehng_L494_2016();
        break;
    case 0x00F00140:    //编程19-卫星音频单元模块     125K
        Satellite_modules_NEW_lansheng_L494_2016();
        break;
    case 0x00F000E6:    //编程20-右侧安全带预紧器    
        Safety_belt_right_NEW_lansheng_L494_2016();
        break;
    case 0x00F000E7:    //编程21-左侧安全带预紧器
        Safety_belt_left_NEW_lansheng_L494_2016();
        break;
    case 0x00F00099:    //编程22-侧面物体探测控制模块 - 左  125K
        Side_control_modules_NEW_lansheng_L494_2016();
        break;
    case 0x00F00148:    //编程23-锁止器天线装置
        Immobiliser_AntennaUnit_00F00148_L550_2015();
        break;
    case 0x00F000F7:    //编程24-电力变频转换器模块    @@@@@@ 混合
        Elec_change_modules_NEW_lansheng_L494_2016();
        break;

    case 0x00F0009D:    //传动系01-速度控制校准//20190903
        SpeedControlAlignmet_00F0009D_L405_2016();
        break;
    case 0x00F0003E:    //传动系02-电机更换.
        Motor_replacement_NEW_lansheng_L494_2016(2);
        break;
    case 0x00F0003F:    //传动系03-电磁阀更换.    
        Solenoid_Replacement_NEW_lansheng_L494_2016();
        break;
    case 0x00F00040:    //传动系04-绝对位置传感器更换    
        APS_Replacement_NEW_lansheng_L494_2016();
        break;
    case 0x00F00041:    //传动系05-分动箱更换.
        Box_Replacement_NEW_lansheng_L494_2016();
        break;
    case 0x00F00074:    //传动系06-燃油含水检测复位    
        Reset_water_NEW_lansheng_L494_2016();
        break;
    case 0x00F00075:    //传动系07-节气门执行机构    //20190903
        ThrottleValueActuator_NEW_lansheng_L494_2016();
        break;
    case 0x00F00076:    //传动系08-涡轮切断阀    
        Boost_pres_NEW_lansheng_L494_2016();
        break;
    case 0x00F00077:    //传动系09-废气再循环阀.    
        EGR_NEW_lansheng_L494_2016();
        break;
    case 0x00F00005:    //传动系10-喷油器更换    //20190903  ############### 值错误，字节位数
        // InjectorReplacement_00F00005_L538_2017(); // Kind00
        InjectorReplacement_00F00005_L538_2017_Kind00(CBinary("\x22\x04\x63", 3), CBinary("\x2E\x04\x63", 3), 0x23);
        break;
    case 0x00F00078:    //传动系11-氧传感器    
        HO2_NEW_lansheng_L494_2016();
        break;
    case 0x00F00079:    //传动系12-氧化催化剂    
        DPF_NEW_lansheng_L494_2016();
        break;
    case 0x00F000CD:    //传动系13-柴油微粒过滤器差压传感器更换//20190903
        DieselParticulateFilterSensorReplacement_00F000CD_L405_2016();
        break;
    case 0x00F000CE:    //传动系14-柴油加注适应值重新初始化//20190903    
        DPF_adaption_00F000CE_L405_2014();
        break;
    case 0x00F0004B:    //传动系15-怠速测试.    //20190903
        IdleSpeedTest_00F0004B_L405_2016();
        break;
    case 0x00F00049:    //传动系16-清污阀自检   2.0L
        PURGE_00F00049_X150_2010(0, 0x19F2D9); // 安全访问
        break;
    case 0x00F00089:    //传动系17-蒸发系统诊断测试    2.0L
        Evaporation_system_test_NEW_lansheng_L494_2016(3, 0xA03416);
        break;
    case 0x00F0004C:    //传动系18-燃油预备常规程序    2.0L
        Fuel_ready_NEW_lansheng_L494_2016();
        break;
    case 0x00F0008A:    //传动系19-燃油举升泵    
        FuelLiftPump_NEW_lansheng_L494_2016();
        break;
    case 0x00F000A1:    //传动系20-自适应燃油调整显示        2.0L
        AdaptFuelTrimDisplay_00F000A1_L319_2014();
        break;
    case 0x00F00012:    //传动系21-清除所有自适应值来重置
        Clear_all_value_NEW_lansheng_SPORT();
        break;
    case 0x00F000A2:    //传动系22-节流阀致动器更换    //20190903
        ThrottleValveActuatorReplacement_00F000A2_L405_2016();
        break;
    case 0x00F00016:    //传动系23-喷油嘴阀测试    //20190903
        InjectorValveTest_00F00016_L405_2016();
        break;
    case 0x00F0004D:    //传动系24-飞行记录器    ################## 路径显示
        Flyrecord_NEW_lansheng_L494_2016();
        break;
    case 0x00F0004F:    //传动系25-柴油微粒过滤器动态再生//20190903
        DieselFilterRegeneration_00F0004F_L405_2016();
        break;
    case 0x00F00050:    //传动系26-柴油颗粒过滤器更换//20190903
        DieselFilterReplacement_00F00050_L405_2016();
        break;
    case 0x00F0008D:    //传动系27-显示喷油器修正系数.    //20190903
        DisplayInjectorCorrectionFactors_00F0008D_L405_2016();
        break;
    case 0x00F0008E:    //传动系28-高压燃油泵测试      2.0L
        J_I_HIGH_PRESS_FUEL_PUMP_00F0008E_L319_2014();
        break;
    case 0x00F0008F:    //传动系29-燃油箱  -  烟雾测试    2.0L
        DMTLSmoke_00F0008F_L319_201000(0x19F2D9);
        break;
    case 0x00F0004E:    //传动系30-变速器控制模块自适应清除.
        TCM_NEW_lansheng_L494_2016();
        break;
    case 0x00F0018C:    //传动系31-变速器控制模块调适    
        TCMadjustment_NEW_lansheng_2016();
        break;
    case 0x00F0018D:    //传动系32-自动变速器所有自适应状态显示    （未找到）
        break;
    case 0x00F000DC:    //传动系33-燃油泵供油管  -  启用/禁用    
        Supply_oil_NEW_lansheng_L494_2016();
        break;
    case 0x00F00090:    //传动系34-空气通道设置程序    
        Air_path_NEW_lansheng_L494_2016();
        break;
    case 0x00F0022E:    //传动系35-柴油废气油液液位检查    
        Deol_inspection_NEW_lansheng_L494_2016();
        break;
    case 0x00F00F1C:    //传动系36-柴油废气油液灌注及压力测试    
        Deol_pressure_NEW_lansheng_L494_2016();
        break;
    case 0x00F0102E:    //传动系37-柴油废气油液喷射泵更换
        Deol_reset_NEW_lansheng_L494_2016();
        break;
    case 0x00F0022F:    //传动系38-重新设置选择性催化还原启动禁止    
        Reset_select_NEW_lansheng_L494_2016();
        break;
    case 0x00F00230:    //传动系39-重新设置选择性催化还原质量监测器    
        Reset_select_quality_NEW_lansheng_L494_2016();
        break;
    case 0x00F00232:    //传动系40-发动机控制模块低压 EGR 自适应值清除
        EGR_delete_NEW_lansheng_L494_2016();
        break;
    case 0x00F00233:    //传动系41-发动机控制模块质量空气流量自适应值清除    
        EGR_air_quality_NEW_lansheng_L494_2016();
        break;
    case 0x00F015A6:    //传动系42-柴油废气油液箱液位传感器更换    
        Reset_oil_recorder_NEW_lansheng_L494_2016();
        break;
    case 0x00F015D1:    //传动系43-发动机控制模块重新设置曲轴箱压力 传感器    
        Reset_box_NEW_lansheng_L494_2016();
        break;
    case 0x00F015A7:    //传动系44-启用/禁用电热塞    
        Supply_elc_NEW_lansheng_L494_2016();
        break;
    case 0x00F00234:    //传动系45-此例程将重置飞行记录器数据    
        Fly_reset_NEW_lansheng_L494_2016();
        break;
    case 0x00F015A8:    //传动系46-排气门自适应    
        Exhaust_Valve_Adaptive_NEW_lansheng_L494_2016();
        break;
    case 0x00F0217D:    //传动系47-选择性催化还原 - 定量配送模块测试  （项目不可用）
        break;

    case 0x00F00002:    //底盘01-制动器排气装置.    
        ABS_bleed_NEW_lansheng_L494_2016();
        break;
    case 0x00F00104:    //底盘02-制动踏板位置传感器.  -  校准    
        BrakePedalSensor_00F00104_L405_2014();
        break;
    case 0x00F00027:    //底盘03-纵向加速计标定.    
        Vertical_speed_up_NEW_lansheng_L494_2016();
        break;
    case 0x00F000DD:    //底盘04-制动卡钳更换组装测试    
        Move_reset_NEW_lansheng_L494_2016();
        break;
    case 0x00F000DE:    //底盘05-驻车制动块更换  -  释放到维修位置    //20190903
        ReleaseServicePosition_00F000DE_L405_2016();
        break;
    case 0x00F000DF:    //底盘06-驻车制动块更换  -  退出维护模式应用程序//20190903
        ExitMaintenanceApplication_00F000DF_L405_2016();
        break;
    case 0x00F000E0:    //底盘07-驻车制动器起动    //20190903
        ParkingBrakeActivation_00F000E0_L405_2016();
        break;
    case 0x00F0007B:    //底盘08-控制模块校准    
        Speed_up_control_NEW_lansheng_L494_2016();
        break;
    case 0x00F0007C:    //底盘09-设置／取消空气悬架制造／冻结模式    
        CHCM_mode_NEW_lansehng_L494_2016();
        break;
    case 0x00F00037:    //底盘10-高度校准    
        J_I_HEIGHT_CALIBRATION_00F00037_L405_2013(2);  // 算法
        break;
    case 0x00F00038:    //底盘11-空气悬挂放气.    
        JM_air_NEW_lansheng_L494_2016();
        break;
    case 0x00F00039:    //底盘12-悬架启用
        Hang_on_NEW_lansheng_L494_2016();
        break;
    case 0x00F0003A:    //底盘13-悬挂几何装置    
        Hang_on_triangle_NEW_lansheng_L494_2016();
        break;
    case 0x00F0003B:    //底盘14-车头灯校准延迟装置    
        Tol_tight_NEW_lansheng_L494_2016();
        break;
    case 0x00F00047:    //底盘15-行驶水平控制模块诊断接口.    
        Rlcm_NEW_lansheng_L494_2016();
        break;
    case 0x00F00048:    //底盘16-行驶高度控制模块充气（展示厅）    
        Ride_high_New_lansheng_L494_2016();
        break;
    case 0x00F000A6:    //底盘17-横向加速计标定.
        Transervse_speed_reset_L494_2016_New_lansheng();
        break;
    case 0x00F000A7:    //底盘18-清除自适应数据    
        Clear_speed_value_L494_2016_NEW_lansheng();
        break;
    case 0x00F000F4:    //底盘19-液压系统  -  自动排气    
        HydraulicSysAutoBleed_00F000F4_L405_2013(0);
        break;
    case 0x00F000F5:    //底盘20-液压系统  -  手动排气    
        HydraulicSystemManualTest_00F000F5_405_2013(2);
        break;
    case 0x00F00216:    //底盘21-驻车辅助控制模块复位    
        PCM_reset_NEW_lansheng_L494_2016();
        break;
    case 0x00F001D0:    //底盘22-驻车辅助控制模块复位配置状态。
        PCM_reset_cencter_NEW_lansheng_L494_2016();
        break;

    case 0x00F00062:    //车身01-验证钥匙     // 22 C1 24 设备不通,代码通
        Add_Keys_00F00060_L319_2012_Function03();
        break;
    case 0x00F00063:    //车身02-止动装置    (不支持辅助功能)
        break;
    case 0x00F00066:    //车身03-检查所有天线    125K
        Antennas_Check_00F00066_L538JV_2016();
        break;
    case 0x00F00067:    //车身04-防盗锁止器天线单元功能检查        125K
        Antenna_00F00067_L319_2010(6);
        break;
    case 0x00F000E9:    //车身05-免匙插销配置    125K
        Keyless_Pin_Configuration_00F00067_L494_2016();
        break;
    case 0x00F00182:    //车身06-智能钥匙状况检查     125K
        Smart_key_check_00F00182_X351_2013();
        break;
    case 0x00F00023:    //车身07-驾驶员一侧记忆座椅标定    //20190903  
        DriverSeatCalibration_00F00023_L405_2016();
        break;
    case 0x00F000B9:    //车身08-乘客一侧座椅标定.    //20190903  
        PassengerSeatCalibration_00F000B9_L405_2016();
        break;
    case 0x00F015CD:    //车身09-后排座椅校准 - 驾驶员侧  125K
        Driver_seat_NEW_lansheng_L494_2016(0x00F015CD);
        break;
    case 0x00F015CE:    //车身10-后排座椅校准 - 乘客侧   125K
        Driver_seat_NEW_lansheng_L494_2016(0x00F015CE);
        break;
    case 0x00F00024:    //车身11-座垫更换    
        SeatCushionReplacement_00F00024_L405_2016();//20190903
        break;
    case 0x00F000FF:    //车身12-小腿休息台模块    125K
        MCP_DESC_CRTM_00F000FF_L405_2014();
        break;
    case 0x00F00100:    //车身13-驾驶员座椅按摩按需自检    //20190903   125K
        Driver_seat_massage_on_demand_self_test_00F00100_L405_2016();
        break;
    case 0x00F00101:    //车身14-乘客按摩座椅按需自检//20190903     125K
        Passenger_seat_massage_on_demand_self_test_00F00101_L405_2016();
        break;
    case 0x00F00102:    //车身15-右后座椅按摩按需自检    //20190903   125K
        Rear_right_seat_massage_on_demand_self_test_00F00102_L405_2016();
        break;
    case 0x00F00103:    //车身16-左后按摩座椅按需自检//20190903   125K
        Rear_Left_seat_massage_on_demand_self_test_00F00103_L405_2016();
        break;
    case 0x00F015CF:    //车身17-前照灯水平调整高度传感器校准
        Head_lamp_NEW_lansheng_L494_2016();
        break;
    case 0x00F00105:    //车身18-自动远光灯摄像头校准
        Auto_lamp_NEW_lansheng_L494_2016();
        break;
    case 0x00F00106:    //车身19-顶篷遮阳帘校准    //20190903
        Roof_Blind_calibration_00F00106_L405_2016();
        break;
    case 0x00F0017B:    //车身20-门窗校准    //20190903  
        Door_window_calibration_00F0017B_L405_2016();
        break;
    case 0x00F0002D:    //车身21-遮阳顶篷校验    //20190903
        SunRoofCalibration_00F0002D_L405_2016();
        break;
    case 0x00F0006D:    //车身22-代客泊车模式重置    
        Valet_reset_NEW_lansheng_L494_2016();
        break;
    case 0x00F000B2:    //车身23-尾门／行李箱校准    //20190903   
        TailgateTrunkCalibration_00F000B2_L405_2016();
        break;
    case 0x00F000ED:    //车身24-助力转向软锁止动位置重置例行程序//20190903
        PowerSteeringSoftlockResetRoutine_00F000ED_L405_2016();
        break;
    case 0x00F0017C:    //车身25-车辆琐止转向协调    //20190903
        Lock_steering_tune_to_vehicle_00F0017C_L405_2016();
        break;
    case 0x00F0002C:    //车身26-转向柱校准    //20190903
        SteeringColumnCalibration_00F0002C_L405_2016();
        break;
    case 0x00F00107:    //车身27-点火循环计数器重置    
        Fire_reset_NEW_lansheng_L494_2016();
        break;
    case 0x00F00108:    //车身28-驾驶员一侧  -  后车门遮阳帘初始化    //20190903
        Drivers_side_Rear_door_blind_initialisation_00F00108_L405_2016();
        break;
    case 0x00F00109:    //车身29-乘客侧  -  后车门遮阳帘初始化//20190903
        Passenger_side_Rear_door_blind_initialisation_00F00109_L405_2016();
        break;
    case 0x00F000BB:    //车身30-维修模式已启用//20190903  
        ServiceModeEnabled_00F000BB_L405_2016();
        break;
    case 0x00F000BC:    //车身31-维修模式被禁用//20190903  
        ServiceModeDisabled_00F000BC_L405_2016();
        break;
    case 0x00F0006F:    //车身32-步进电机初始化    125K
        Stepper_Motor_Init_00F0006F_L405_2013(1);
        break;
    case 0x00F00070:    //车身33-执行器端点止动器检测   125K
        Actuator_test_NEW_lansheng_L494_2016();
        break;
    case 0x00F00071:    //车身34-蒸发器和加热器测试    125K
        Evaporator_heater_test_NEW_lansheng_L494_2016();
        break;
    case 0x00F000BD:    //车身35-复位压缩机保护计数器        125K
        Reset_compressor_protect_NEW_lansheng_L494_2016();
        break;
    case 0x00F0010A:    //车身36-座椅气候控制模块校准        125K
        Seat_Climate_00F0010A_L405_2014_Kind();
        break;
    case 0x00F00030:    //车身37-辅助加热器常规准备        125K
        Auxiliary_heater_NEW_lansheng_L494_2016();
        break;
    case 0x00F00031:    //车身38-辅助加热器运行检查.        125K
        Auxiliary_heater_check_NEW_lansheng_L494_2016();
        break;
    case 0x00F00032:    //车身39-辅助加热器燃油输送测试        125K
        Auxiliary_heater_send_NEW_lansheng_L494_2016();
        break;
    case 0x00F00034:    //车身40-轮胎压力传感器更换.    //20190903
        TirePressureSensorReplacement_00F00034_X760_2016();
        break;
    case 0x00F00072:    //车身41-轮胎压力监测传感器标识显示    //20190903
        TirePressureMonitorDisplay_00F00072_L405_2016();
        break;
    case 0x00F00073:    //车身42-轮胎压力监控轮胎压力传感器测试  
        TCM_test_NEW_lansheng_L494_2016();
        break;
    case 0x00F00094:    //车身43-校准动态量控制    125K
        CalibrateDynamicVolumeControl_00F00094_L538JV_2016();
        break;
    case 0x00F000FA:    //车身44-远程通信服务器通信检查    //20190903  
        Telematics_server_communication_check_00F000FA_L405_2016();
        break;
    case 0x00F000FB:    //车身45-预激活远程通信控制模块    //20190903  
        Pre_activate_telematics_control_module_00F000FB_L405_2016();
        break;
    case 0x00F000FC:    //车身46-激活远程通信控制模块    
        TeleActivateApp_00F000FC_L538JV_2016();
        break;
    case 0x00F000FD:    //车身47-重置/清除 WiFi 热点     (通讯故障)
        break;
    case 0x00F000FE:    //车身48-网络注册状态    
        TeleNetRegister_00F000FE_L538JV_2016();
        break;
    case 0x00F00116:    //车身49-远程通信  -  操作模式    
        TelematicRunMode_00F00116_L538JV_2016();
        break;
    case 0x00F00117:    //车身50-远程通信控制模块蓄电池更换复位    //20190903   
        Telematics_control_module_battery_replacement_reset_00F00117_L405_2016();
        break;
    case 0x00F00007:    //车身51-发车前检查.
        PreDevInspection_00F00007_L538_2012();
        break;
    case 0x00F01631:    //车身52-保养消息重置    
        Service_reset_NEW_lansheng_L494_2016();
        break;
    case 0x00F00082:    //车身53-传输模式    
        Transport_mode_NEW_lansheng_L494_2016();
        break;
    case 0x00F00083:    //车身54-约束构建模式
        Restraints_bulid_NEW_lansheng_L494_2016();
        break;
    case 0x00F00045:    //车身55-车辆复位    //20190903
        VehicleReset_00F00045_L405_2016();
        break;
    case 0x00F00084:    //车身56-里程表校准    
        Odometer_reset_NEW_lansheng_L494_2016();
        break;
    case 0x00F0010C:    //车身57-更换混合式水冷泵//20190903
        Hybrid_water_cooling_pump_replacement_00F0010C_L405_2016();
        break;
    case 0x00F0010E:    //车身58-直流到直流电力变频转换器模块模式    混合-2FA认证
        DirectCurrentConvert_00F0010E_L405_2014();
        break;
    case 0x00F0010D:    //车身59-混合动力电动车辆操作模式    混合-2FA认证
        Hybrid_Opt_Mode_00F0010D_Kind();
        break;
    case 0x00F001ED:    //车身60-仪表盘虚拟显示诊断应用程序    
        Dashboard_display_NEW_lansheng_L494_2016();
        break;
    case 0x00F00183:    //车身61-电源供电维修模式诊断    
        Power_supply_NEW_lansheng_L494_2016();
        break;
    case 0x00F00088:    //车身62-蓄电池更换    //20190903
        BatteryReplacement_00F00088_L405_2016();
        break;
    case 0x00F0009E:    //车身63-静态电流控制模块内部检查
        Qcc_module_NEW_lansheng_L494_2016();
        break;
    case 0x00F00097:    //车身64-信息和娱乐系统    (不支持辅助空能)
        break;
    case 0x00F000F1:    //车身65-安全带动态收回和释放    
        Belt_release_NEW_lansheng_L494_2016();
        break;
    case 0x00F000F2:    //车身66-清除模块学习数据    
        Clear_module_NEW_lansheng_L494_2016();
        break;
    case 0x00F00111:    //车身67-测试内部备用蓄电池    //20190903
        Test_internal_backup_battery_00F00111_L405_2016();
        break;
    case 0x00F00112:    //车身68-紧急呼叫和故障呼叫开关照明测试
        TeleSoSCall_00F00112_L538JV_2016();
        break;
    case 0x00F00110:    //车身69-远程通信 SIM 卡类型
        TeleSIMCARD_00F00110_L538JV_2016();
        break;
    case 0x00F00114:    //车身70-激活测试图片        125K
        Activate_Test_Picture_00F00114_L538JV_2016();
        break;
    case 0x00F00115:    //车身71-平视显示器控制模块重置    125K
        HeadUp_DisplayModule_Reset_00F00115_L538JV_2016();
        break;
    case 0x00F00091:    //车身72-报警触发器历史
        Alarm_history_NEW_lansheng_L494_2016();
        break;
    case 0x00F01288:    //车身73-手动归零    
        Hand_zero_NEW_lansheng_L494_2016();
        break;
    case 0x00F01289:    //车身74-一键自动归零    
        Auto_hand_zero_NEW_lansheng_L494_2016();
        break;
    case 0x00F0128A:    //车身75-刹车片更换(操作向导)    
        Brake_pad_replacement_NEW_lansheng_L494_2016();
        break;



        //csj
    case 0x00F00051:
        OilServiceCounterReset_00F00051_L405_2016();
        break;
    case 0x00F00044:
        ServiceIntervalReset_00F00044_L405_2016();
        break;
    case 0x00F0006A:
        Automatic_high_beam_camera_calibration_00F00105_L405_2016();
        break;


    default:
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_THE_SELECTED_FUNCTION_IS_NOT_SUPPORTED);
        break;
    }
    return iRet;
}









// 全新运动版揽胜-2016
W_I16 CSeviceFunctionNew::MenuProcess_L494_201600(W_U32 idTask)
{
    W_I16 iRet = 0;
    CSendFrame sendframe;
    switch (idTask)
    {
    case 0x00F0005E:    //编程01-全部地形控制模块.    
        All_Terrain_Module_00F0005E_NEW_lansheng_L494_2016();
        break;
    case 0x00F0012B:    //编程02-平视显示器冷却风扇模块
        HeadUpDisplay_Cooling_Module_00F0005E_NEW_lansheng_L494_2016();
        break;
    case 0x00F0009A:    //编程03-速度控制模块    
        Speed_control_NEW_lansheng_L494_2016();
        break;
    case 0x00F00130:    //编程04-数字音频广播模块     125K
        Digital_audio_NEW_lansheng_2016();
        break;
    case 0x00F00057:    //编程05-前控制/显示界面模块（高水平显示正面） 125K
        Front_control_display_NEW_lansheng_2016();
        break;
    case 0x00F0005A:    //编程06-前部控制接口模块（取暖、通风和空调控制） 125K
        FCIM_NEW_lansheng_2016();
        break;
    case 0x00F0005B:    //编程07-前部控制接口模块‘B’（前音频控制面板）125K
        Front_control_B_NEW_lansheng_2016();
        break;
    case 0x00F000E4:    //编程08-前部控制接口模块‘C’（前音频控制面板）125K
        Front_control_C_NEW_lansheng_2016();
        break;
    case 0x00F00092:    //编程09-换档模块    
        Gear_shift_NEW_lansheng_L494_2016_SPORT();
        break;
    case 0x00F0009B:    //编程10-通用近距离传感器模块
        GeneralProximitySensor_NEW_lansheng_L494_2016();
        break;
    case 0x00F00135:    //编程11-图像处理控制模块 A
        Image_control_NEW_lansheng_L494_2016();
        break;
    case 0x00F0013A:    //编程12-图像处理控制模块
        Image_Control_Module_00F0013A_L538_2017();
        break;
    case 0x00F000F8:    //编程13-导航控制模块    125K
        Navigation_control_NEW_lansheng_L494_2016();
        break;
    case 0x00F0005D:    //编程14-约束乘员分类系统模块
        Restraints_NEW_lansheng_L494_2016();
        break;
    case 0x00F000E5:    //编程15-踏板控制模块    125K
        Board_control_NEW_lansheng_L494_2016();
        break;
    case 0x00F000B1:    //编程16-后门/行李箱模块    125k
        Back_door_modules_NEW_lansheng_L494_2016();
        break;
    case 0x00F0005F:    //编程17-转向角传感器模块.    
        ConfigureNewModules_NEW_lansehng_L494_2016();
        break;
    case 0x00F00140:    //编程18-卫星音频单元模块     125K
        Satellite_modules_NEW_lansheng_L494_2016();
        break;
    case 0x00F000E6:    //编程19-右侧安全带预紧器    
        Safety_belt_right_NEW_lansheng_L494_2016();
        break;
    case 0x00F000E7:    //编程20-左侧安全带预紧器    
        Safety_belt_left_NEW_lansheng_L494_2016();
        break;
    case 0x00F00099:    //编程21-侧面物体探测控制模块 - 左  125K
        Side_control_modules_NEW_lansheng_L494_2016();
        break;
    case 0x00F00148:    //编程22-锁止器天线装置    
        Immobiliser_AntennaUnit_00F00148_L550_2015();
        break;
    case 0x00F000F7:    //编程23-电力变频转换器模块    IMP-D 混合
        Elec_change_modules_NEW_lansheng_L494_2016();
        break;

    case 0x00F0009D:    //传动系01-速度控制校准    //20190903
        SpeedControlAlignmet_00F0009D_L405_2016();
        break;
    case 0x00F0003E:    //传动系02-电机更换
        Motor_replacement_NEW_lansheng_L494_2016(2);
        break;
    case 0x00F0003F:    //传动系03-电磁阀更换.    
        Solenoid_Replacement_NEW_lansheng_L494_2016();
        break;
    case 0x00F00040:    //传动系04-绝对位置传感器更换
        APS_Replacement_NEW_lansheng_L494_2016();
        break;
    case 0x00F00041:    //传动系05-分动箱更换.
        Box_Replacement_NEW_lansheng_L494_2016();
        break;
    case 0x00F00074:    //传动系06-燃油含水检测复位    
        Reset_water_NEW_lansheng_L494_2016();
        break;
    case 0x00F00075:    //传动系07-节气门执行机构    //20190903
        ThrottleValueActuator_NEW_lansheng_L494_2016();
        break;
    case 0x00F00076:    //传动系08-涡轮切断阀
        Boost_pres_NEW_lansheng_L494_2016();
        break;
    case 0x00F00077:    //传动系09-废气再循环阀.    
        EGR_NEW_lansheng_L494_2016();
        break;
    case 0x00F00005:    //传动系10-喷油器更换    //###########值错误
        //InjectorReplacement_00F00005_L538_2017();   // Kind00
        InjectorReplacement_00F00005_L538_2017_Kind00(CBinary("\x22\x04\x63", 3), CBinary("\x2E\x04\x63", 3), 0x23);
        break;
    case 0x00F00078:    //传动系11-氧传感器    
        HO2_NEW_lansheng_L494_2016();
        break;
    case 0x00F00079:    //传动系12-氧化催化剂
        DPF_NEW_lansheng_L494_2016();
        break;
    case 0x00F000CD:    //传动系13-柴油微粒过滤器差压传感器更换    //20190903
        DieselParticulateFilterSensorReplacement_00F000CD_L405_2016();
        break;
    case 0x00F000CE:    //传动系14-柴油加注适应值重新初始化    
        DPF_adaption_00F000CE_L405_2014();
        break;
    case 0x00F0004B:    //传动系15-怠速测试.    //20190903
        IdleSpeedTest_00F0004B_L494_2016();
        break;
    case 0x00F00049:    //传动系16-清污阀自检   2.0L    GTDi
        PURGE_00F00049_X150_2010(0, 0x19F2D9); // 安全访问
        break;
    case 0x00F00089:    //传动系17-蒸发系统诊断测试      2.0L    GTDi
        Evaporation_system_test_NEW_lansheng_L494_2016(3, 0xA03416);
        break;
    case 0x00F0004C:    //传动系18-燃油预备常规程序     2.0L    GTDi
        Fuel_ready_NEW_lansheng_L494_2016();
        break;
    case 0x00F0008A:    //传动系19-燃油举升泵    
        FuelLiftPump_NEW_lansheng_L494_2016();
        break;
    case 0x00F000A1:    //传动系20-自适应燃油调整显示    2.0L    GTDi
        AdaptFuelTrimDisplay_00F000A1_L319_2014();
        break;
    case 0x00F00012:    //传动系21-清除所有自适应值来重置    
        Clear_all_value_NEW_lansheng_SPORT();
        break;
    case 0x00F000A2:    //传动系22-节流阀致动器更换    //20190903
        ThrottleValveActuatorReplacement_00F000A2_L405_2016();
        break;
    case 0x00F00016:    //传动系23-喷油嘴阀测试    //20190903
        InjectorValveTest_00F00016_L405_2016();
        break;
    case 0x00F0004D:    //传动系24-飞行记录器  #########文件路径
        Flyrecord_NEW_lansheng_L494_2016();
        break;
    case 0x00F0004F:    //传动系25-柴油微粒过滤器动态再生    //20190903
        DieselFilterRegeneration_00F0004F_L405_2016();
        break;
    case 0x00F00050:    //传动系26-柴油颗粒过滤器更换//20190903
        DieselFilterReplacement_00F00050_L405_2016();
        break;
    case 0x00F0008D:    //传动系27-显示喷油器修正系数.//20190903
        DisplayInjectorCorrectionFactors_00F0008D_L405_2016();
        break;
    case 0x00F0008E:    //传动系28-高压燃油泵测试     (未找到)
        break;
    case 0x00F0008F:    //传动系29-燃油箱  -  烟雾测试 2.0L    GTDi
        DMTLSmoke_00F0008F_L319_201000(0x4FE145);
        break;
    case 0x00F0004E:    //传动系30-变速器控制模块自适应清除.  
        TCM_NEW_lansheng_L494_2016();
        break;
    case 0x00F0018C:    //传动系31-变速器控制模块调适    
        TCMadjustment_NEW_lansheng_2016();
        break;
    case 0x00F0018D:    //传动系32-自动变速器所有自适应状态显示    (未找到)
        break;
    case 0x00F000DC:    //传动系33-燃油泵供油管  -  启用/禁用    
        Supply_oil_NEW_lansheng_L494_2016();
        break;
    case 0x00F00090:    //传动系34-空气通道设置程序    
        Air_path_NEW_lansheng_L494_2016();
        break;
    case 0x00F0022E:    //传动系35-柴油废气油液液位检
        Deol_inspection_NEW_lansheng_L494_2016();
        break;
    case 0x00F00F1C:    //传动系36-柴油废气油液灌注及压力测试    
        Deol_pressure_NEW_lansheng_L494_2016();
        break;
    case 0x00F0102E:    //传动系37-柴油废气油液喷射泵更换    
        Deol_reset_NEW_lansheng_L494_2016();
        break;
    case 0x00F0022F:    //传动系38-重新设置选择性催化还原启动禁止    
        Reset_select_NEW_lansheng_L494_2016();
        break;
    case 0x00F00230:    //传动系39-重新设置选择性催化还原质量监测器    
        Reset_select_quality_NEW_lansheng_L494_2016();
        break;
    case 0x00F00232:    //传动系40-发动机控制模块低压 EGR 自适应值清除    
        EGR_delete_NEW_lansheng_L494_2016();
        break;
    case 0x00F00233:    //传动系41-发动机控制模块质量空气流量自适应值清除
        EGR_air_quality_NEW_lansheng_L494_2016();
        break;
    case 0x00F015A6:    //传动系42-柴油废气油液箱液位传感器更换    
        Reset_oil_recorder_NEW_lansheng_L494_2016();
        break;
    case 0x00F015D1:    //传动系43-发动机控制模块重新设置曲轴箱压力 传感器    
        Reset_box_NEW_lansheng_L494_2016();
        break;
    case 0x00F015A7:    //传动系44-启用/禁用电热塞    
        Supply_elc_NEW_lansheng_L494_2016();
        break;
    case 0x00F00234:    //传动系45-此例程将重置飞行记录器数据    
        Fly_reset_NEW_lansheng_L494_2016();
        break;
    case 0x00F015A8:    //传动系46-排气门自适应
        Exhaust_Valve_Adaptive_NEW_lansheng_L494_2016();
        break;
    case 0x00F0019F:    //传动系47-主动式排气系统测试
        Active_system_test_NEW_lansheng_L494_2016();
        break;
    case 0x00F0217D:    //传动系48-选择性催化还原 - 定量配送模块测试  (项目不可用) ######################
        break;

    case 0x00F00002:    //底盘01-制动器排气装置.    
        ABS_bleed_NEW_lansheng_L494_2016();
        break;
    case 0x00F00104:    //底盘02- .  -  校准
        BrakePedalSensor_00F00104_L405_2014();
        break;
    case 0x00F00027:    //底盘03-纵向加速计标定.    
        Vertical_speed_up_NEW_lansheng_L494_2016();
        break;
    case 0x00F000DD:    //底盘04-制动卡钳更换组装测试
        Move_reset_NEW_lansheng_L494_2016();
        break;
    case 0x00F000DE:    //底盘05-驻车制动块更换  -  释放到维修位置    //20190903
        ReleaseServicePosition_00F000DE_L405_2016();
        break;
    case 0x00F000DF:    //底盘06-驻车制动块更换  -  退出维护模式应用程序//20190903
        ExitMaintenanceApplication_00F000DF_L405_2016();
        break;
    case 0x00F000E0:    //底盘07-驻车制动器起动    //20190903
        ParkingBrakeActivation_00F000E0_L405_2016();
        break;
    case 0x00F0007B:    //底盘08-控制模块校准    
        Speed_up_control_NEW_lansheng_L494_2016();
        break;
    case 0x00F0007C:    //底盘09-设置／取消空气悬架制造／冻结模式    
        CHCM_mode_NEW_lansehng_L494_2016();
        break;
    case 0x00F00037:    //底盘10-高度校准    
        J_I_HEIGHT_CALIBRATION_00F00037_L405_2013(6);  // 算法
        break;
    case 0x00F00038:    //底盘11-空气悬挂放气
        JM_air_NEW_lansheng_L494_2016();
        break;
    case 0x00F00039:    //底盘12-悬架启用    
        Hang_on_NEW_lansheng_L494_2016();
        break;
    case 0x00F0003A:    //底盘13-悬挂几何装置    
        Hang_on_triangle_NEW_lansheng_L494_2016();
        break;
    case 0x00F0003B:    //底盘14-车头灯校准延迟装置    
        Tol_tight_NEW_lansheng_L494_2016();
        break;
    case 0x00F00047:    //底盘15-行驶水平控制模块诊断接口.    
        Rlcm_NEW_lansheng_L494_2016();
        break;
    case 0x00F00048:    //底盘16-行驶高度控制模块充气（展示厅）
        Ride_high_New_lansheng_L494_2016();
        break;
    case 0x00F000A6:    //底盘17-横向加速计标定.
        Transervse_speed_reset_L494_2016_New_lansheng();
        break;
    case 0x00F000A7:    //底盘18-清除自适应数据    
        Clear_speed_value_L494_2016_NEW_lansheng();
        break;
    case 0x00F000F4:    //底盘19-液压系统  -  自动排气     22 F4 0C
        HydraulicSysAutoBleed_00F000F4_L405_2013(0);
        break;
    case 0x00F000F5:    //底盘20-液压系统  -  手动排气    
        HydraulicSystemManualTest_00F000F5_405_2013(2);
        break;
    case 0x00F00216:    //底盘21-驻车辅助控制模块复位    
        PCM_reset_NEW_lansheng_L494_2016();
        break;
    case 0x00F001D0:    //底盘22-驻车辅助控制模块复位配置状态。
        PCM_reset_cencter_NEW_lansheng_L494_2016();
        break;

    case 0x00F00062:    //车身01-验证钥匙
        Add_Keys_00F00060_L319_2012_Function03();
        break;
    case 0x00F00063:    //车身02-止动装置    (不支持辅助功能)######################
        break;
    case 0x00F00066:    //车身03-检查所有天线     125K
        Antennas_Check_00F00066_L538JV_2016();
        break;
    case 0x00F00067:    //车身04-防盗锁止器天线单元功能检查    
        Antenna_00F00067_L319_2010(6);
        break;
    case 0x00F000E9:    //车身05-免匙插销配置  125K
        Keyless_Pin_Configuration_00F00067_L494_2016();
        break;
    case 0x00F00182:    //车身06-智能钥匙状况检查      125K
        Smart_key_check_00F00182_X351_2013();
        break;
    case 0x00F00023:    //车身07-驾驶员一侧记忆座椅标定//20190903   125K
        DriverSeatCalibration_00F00023_L405_2016();
        break;
    case 0x00F000B9:    //车身08-乘客一侧座椅标定.    //20190903  125K
        PassengerSeatCalibration_00F000B9_L405_2016();
        break;
    case 0x00F015CD:    //车身09-后排座椅校准 - 驾驶员侧    125K
        Driver_seat_NEW_lansheng_L494_2016(0x00F015CD);
        break;
    case 0x00F015CE:    //车身10-后排座椅校准 - 乘客侧        125K
        Driver_seat_NEW_lansheng_L494_2016(0x00F015CE);
        break;
    case 0x00F00024:    //车身11-座垫更换    //20190903
        SeatCushionReplacement_00F00024_L405_2016();
        break;
    case 0x00F00100:    //车身12-驾驶员座椅按摩按需自检//20190903  125K
        Driver_seat_massage_on_demand_self_test_00F00100_L405_2016();
        break;
    case 0x00F00101:    //车身13-乘客按摩座椅按需自检    //20190903  125K
        Passenger_seat_massage_on_demand_self_test_00F00101_L405_2016();
        break;
    case 0x00F00102:    //车身14-右后座椅按摩按需自检    //20190903　125K
        Rear_right_seat_massage_on_demand_self_test_00F00102_L405_2016();
        break;
    case 0x00F00103:    //车身15-左后按摩座椅按需自检//20190903　125K
        Rear_Left_seat_massage_on_demand_self_test_00F00103_L405_2016();
        break;
    case 0x00F015CF:    //车身16-前照灯水平调整高度传感器校准
        Head_lamp_NEW_lansheng_L494_2016();
        break;
    case 0x00F00105:    //车身17-自动远光灯摄像头校准    
        Auto_lamp_NEW_lansheng_L494_2016();
        break;
    case 0x00F00106:    //车身18-顶篷遮阳帘校准//20190903
        Roof_Blind_calibration_00F00106_L405_2016();
        break;
    case 0x00F0017B:    //车身19-门窗校准    //20190903    125K
        Door_window_calibration_00F0017B_L405_2016();
        break;
    case 0x00F0002D:    //车身20-遮阳顶篷校验//20190903
        SunRoofCalibration_00F0002D_L405_2016();
        break;
    case 0x00F0006D:    //车身21-代客泊车模式重置    
        Valet_reset_NEW_lansheng_L494_2016();
        break;
    case 0x00F000B2:    //车身22-尾门／行李箱校准    //20190903  125K
        TailgateTrunkCalibration_00F000B2_L538_2016();
        break;
    case 0x00F000ED:    //车身23-助力转向软锁止动位置重置例行程序//20190903
        PowerSteeringSoftlockResetRoutine_00F000ED_L494_2016();
        break;
    case 0x00F0017C:    //车身24-车辆琐止转向协调    //20190903
        Lock_steering_tune_to_vehicle_00F0017C_L405_2016();
        break;
    case 0x00F0002C:    //车身25-转向柱校准    //20190903
        SteeringColumnCalibration_00F0002C_L405_2016();
        break;
    case 0x00F00107:    //车身26-点火循环计数器重置    
        Fire_reset_NEW_lansheng_L494_2016();
        break;
    case 0x00F000BB:    //车身27-维修模式已启用     125K
        Service_enabled_00F000BB_L322_2010();
        break;
    case 0x00F000BC:    //车身28-维修模式被禁用    125K
        Service_disabled_00F000BC_L322_2010();
        break;
    case 0x00F0006F:    //车身29-步进电机初始化    125K
        Stepper_Motor_Init_00F0006F_L405_2013(1);
        break;
    case 0x00F00070:    //车身30-执行器端点止动器检测    125K
        Actuator_test_NEW_lansheng_L494_2016();
        break;
    case 0x00F00071:    //车身31-蒸发器和加热器测试    125K
        Evaporator_heater_test_NEW_lansheng_L494_2016();
        break;
    case 0x00F000BD:    //车身32-复位压缩机保护计数器    125K
        Reset_compressor_protect_NEW_lansheng_L494_2016();
        break;
    case 0x00F0010A:    //车身33-座椅气候控制模块校准    125K
        Seat_Climate_00F0010A_L405_2014_Kind();
        break;
    case 0x00F00030:    //车身34-辅助加热器常规准备 125K
        Auxiliary_heater_NEW_lansheng_L494_2016();
        break;
    case 0x00F00031:    //车身35-辅助加热器运行检查.        125K
        Auxiliary_heater_check_NEW_lansheng_L494_2016();
        break;
    case 0x00F00032:    //车身36-辅助加热器燃油输送测试    125K
        Auxiliary_heater_send_NEW_lansheng_L494_2016();
        break;
    case 0x00F00034:    //车身37-轮胎压力传感器更换.    //20190903
        TirePressureSensorReplacement_00F00034_X760_2016();
        break;
    case 0x00F00072:    //车身38-轮胎压力监测传感器标识显示//20190903
        TirePressureMonitorDisplay_00F00072_L405_2016();
        break;
    case 0x00F00073:    //车身39-轮胎压力监控轮胎压力传感器测试    
        TCM_test_NEW_lansheng_L494_2016();
        break;
    case 0x00F00094:    //车身40-校准动态量控制    125K
        CalibrateDynamicVolumeControl_00F00094_L538JV_2016();
        break;
    case 0x00F000FA:    //车身41-远程通信服务器通信检查   
        Telematics_server_communication_check_00F000FA_L405_2016();
        break;
    case 0x00F000FB:    //车身42-预激活远程通信控制模块
        Pre_activate_telematics_control_module_00F000FB_L405_2016();
        break;
    case 0x00F000FC:    //车身43-激活远程通信控制模块
        TeleActivateApp_00F000FC_L538JV_2016();
        break;
    case 0x00F000FD:    //车身44-重置/清除 WiFi 热点  (通讯故障) ####################################
        break;
    case 0x00F000FE:    //车身45-网络注册状态    
        TeleNetRegister_00F000FE_L538JV_2016();
        break;
    case 0x00F00116:    //车身46-远程通信  -  操作模式  
        TelematicRunMode_00F00116_L538JV_2016();
        break;
    case 0x00F00117:    //车身47-远程通信控制模块蓄电池更换复位    //20190903    
        Telematics_control_module_battery_replacement_reset_00F00117_L405_2016();
        break;
    case 0x00F00007:    //车身48-发车前检查.    dsss
        PreDevInspection_00F00007_L538_2012();
        break;
    case 0x00F01631:    //车身49-保养消息重置    
        Service_reset_NEW_lansheng_L494_2016();
        break;
    case 0x00F00082:    //车身50-传输模式    
        Transport_mode_NEW_lansheng_L494_2016();
        break;
    case 0x00F00083:    //车身51-约束构建模式    
        Restraints_bulid_NEW_lansheng_L494_2016();
        break;
    case 0x00F00045:    //车身52-车辆复位    //20190903
        VehicleReset_00F00045_L494_2016();
        break;
    case 0x00F00084:    //车身53-里程表校准    
        Odometer_reset_NEW_lansheng_L494_2016();
        break;
    case 0x00F0010C:    //车身54-更换混合式水冷泵    //20190903
        Hybrid_water_cooling_pump_replacement_00F0010C_L405_2016();
        break;
    case 0x00F0010E:    //车身55-直流到直流电力变频转换器模块模式   混合-2FA认证
        DirectCurrentConvert_00F0010E_L405_2014();
        break;
    case 0x00F0010D:    //车身56-混合动力电动车辆操作模式     混合-2FA认证
        Hybrid_Opt_Mode_00F0010D_Kind();
        break;
    case 0x00F001ED:    //车身57-仪表盘虚拟显示诊断应用程序    
        Dashboard_display_NEW_lansheng_L494_2016();
        break;
    case 0x00F00183:    //车身58-电源供电维修模式诊断    
        Power_supply_NEW_lansheng_L494_2016();
        break;
    case 0x00F00088:    //车身59-蓄电池更换    //20190903
        BatteryReplacement_00F00088_L405_2016();
        break;
    case 0x00F0009E:    //车身60-静态电流控制模块内部检查
        Qcc_module_NEW_lansheng_L494_2016();
        break;
    case 0x00F000A0:    //车身61-侧面物体探测模块历史    125K
        SideObjectDetModuleHistory_00F000A0_L319_2014();
        break;
    case 0x00F00097:    //车身62-信息和娱乐系统    125K
        InforAndEntertainmentSystemSpeApplications_00F00097_L538JV_2016(0);
        break;
    case 0x00F000F1:    //车身63-安全带动态收回和释放
        Belt_release_NEW_lansheng_L494_2016();
        break;
    case 0x00F000F2:    //车身64-清除模块学习数据    
        Clear_module_NEW_lansheng_L494_2016();
        break;
    case 0x00F00111:    //车身65-测试内部备用蓄电池    //20190903
        Test_internal_backup_battery_00F00111_L405_2016();
        break;
    case 0x00F00112:    //车身66-紧急呼叫和故障呼叫开关照明测试    
        TeleSoSCall_00F00112_L538JV_2016();
        break;
    case 0x00F00110:    //车身67-远程通信 SIM 卡类型    
        TeleSIMCARD_00F00110_L538JV_2016();
        break;
    case 0x00F00114:    //车身68-激活测试图片    125K
        Activate_Test_Picture_00F00114_L538JV_2016();
        break;
    case 0x00F00115:    //车身69-平视显示器控制模块重置   125K
        HeadUp_DisplayModule_Reset_00F00115_L538JV_2016();
        break;
    case 0x00F00091:    //车身70-报警触发器历史    
        Alarm_history_NEW_lansheng_L494_2016();
        break;
    case 0x00F01288:    //车身71-手动归零
        Hand_zero_NEW_lansheng_L494_2016();
        break;
    case 0x00F01289:    //车身72-一键自动归零    
        Auto_hand_zero_NEW_lansheng_L494_2016();
        break;
    case 0x00F0128A:    //车身73-刹车片更换(操作向导)
        Brake_pad_replacement_NEW_lansheng_L494_2016();
        break;


        //csj
    case 0x00F00051:
        OilServiceCounterReset_00F00051_L494_2016();
        break;
    case 0x00F00044:
        ServiceIntervalReset_00F00044_L405_2016();
        break;
    case 0x00F0006A://20190903
        Automatic_high_beam_camera_calibration_00F00105_L405_2016();
        break;



    default:
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_THE_SELECTED_FUNCTION_IS_NOT_SUPPORTED);
        break;
    }
    return iRet;
}
//L550 by Edit By CL 20200119
W_I16 CSeviceFunctionNew::MenuProcess_L550_201500(W_U32 idTask)
{
    W_I16 iRet = 0;
    CSendFrame sendframe;
    switch (idTask)
    {
    case 0x00F00127:    //编程01-音频放大器模块。
        Audio_Amplifier_Module_00F00127_L359_2011();
        break;
    case 0x00F0012B:    //编程02-平视显示器冷却风扇模块
        HeadUpDisplay_Cooling_Module_00F0005E_L550_2015();  // *

        break;
    case 0x00F0005E:    //编程03-全部地形控制模块.
        All_Terrain_Module_00F0005E_L550_2015();  // *

        break;
    case 0x00F0009A:    //编程04-速度控制模块
        Speed_Control_Module_00F0009A_L550_2015_Kind(); // *
        break;
    case 0x00F00130:    //编程05-数字音频广播模块    //
        Digital_audio_NEW_lansheng_2016();
        break;
    case 0x00F00057:    //编程06-前控制/显示界面模块（高水平显示正面） 125K
        Front_control_display_NEW_lansheng_2016();
        break;
    case 0x00F015D2:    //编程07-InControl 智能驭享 Touch - 触摸屏   //
        Headup_Display_Cooling_Fan_Module_00F0012B_L538_2017(0x00F0012B);
        break;
    case 0x00F00092:    //编程08-换档模块    
        Gear_Shift_Module_00F00092_L550_2015();
        break;
    case 0x00F0009B:    //编程09-通用近距离传感器模块
        GeneralProximitySensor_00F0009B_L319_2014();
        break;
    case 0x00F00135:    //编程10-图像处理控制模块     A
        Image_Control_Module_00F0013A_L550_2015();  // *

        break;
    case 0x00F000F8:    //编程11-导航控制模块      125K
        Navigation_control_NEW_lansheng_L494_2016();
    case 0x00F0005D:    //编程12-约束乘员分类系统模块
        Restraints_Module_00F0005D_L550_2015();
        break;
    case 0x00F000B1:    //编程13-后门/行李箱模块      125K
        Back_door_modules_NEW_lansheng_L494_2016();
        break;
    case 0x00F0005F:    //编程14-转向角传感器模块.
        ConfigureNewModules_SASM_00F0005F_L405_2014();
        break;
    case 0x00F00140:    //编程15-卫星音频单元模块      // 125K
        Satellite_modules_NEW_lansheng_L494_2016();
        break;
    case 0x00F00099:    //编程16-侧面物体探测控制模块 - 左    125K
        SideControlModule_Left_00F00099_L319_2014();
        break;
    case 0x00F00142:    //编程17-展开式牵引杆控制模块   //   125K
        DeployableTowbarControl_00F00142_L550_2015();
        break;
    case 0x00F00148:    //编程18-锁止器天线装置
        Immobiliser_AntennaUnit_00F00148_L550_2015();
        break;

    case 0x00F0009D:    //传动系01-速度控制校准//20190903
        SpeedControlAlignmet_00F0009D_L405_2016();
        break;
    case 0x00F00074:    //传动系02-燃油含水检测复位    //20190903
        ResetWaterFuel_00F00074_L322_2010();
        break;
    case 0x00F00075:    //传动系03-节气门执行机构//20190903
        Hot_TVA_00F00075_L322_2010();
        break;
    case 0x00F00076:    //传动系04-涡轮切断阀//20190903
        BOOST_PRES_ACT_REP_00F00076_L538_2012();
        break;
    case 0x00F00077:    //传动系05-废气再循环阀.//20190903
        EGR_00F00077_L322_2010(5);
        break;
    case 0x00F00005:    //传动系06-喷油器更换//20190903
        Injector_00F00005_L359_2011();
        break;
    case 0x00F00078:    //传动系07-氧传感器    //20190903
        HotSpotHO2S_00F00078_L322_2010();
        break;
    case 0x00F00079:    //传动系08-氧化催化剂//20190903
        PCMDOxidationCat_00F00079_L322_2010(0xE50CF3);
        break;
    case 0x00F000CD:    //传动系09-柴油微粒过滤器差压传感器更换    //20190903
        DPF_replace_00F000CD_L538_2012();
        break;
    case 0x00F000CE:    //传动系10-柴油加注适应值重新初始化    //20190903
        DPF_adaption_00F000CE_L538_2012();
        break;
    case 0x00F00049:    //传动系11-清污阀自检    //20190903
        PURGE_00F00049_X150_2010(0, 0x19F2D9);
        break;
    case 0x00F00089:    //传动系12-蒸发系统诊断测试    
        EvaporationDiagnose_00F00089_L538JV_2016();   // *

        break;
    case 0x00F0004C:    //传动系13-燃油预备常规程序    //20190903
        FuelPrimeRoutine_00F0004C_L320_2012(0x19F2D9, 0, 1);
        break;
    case 0x00F0008A:    //传动系14-燃油举升泵//20190903
        FuelLiftPump_00F0008A_L319_201400();
        break;
    case 0x00F0004A:    //传动系15-OBDII就绪测试//20190903
        OBDIIReadinessTests_00F0004A_L319(4);
        break;
    case 0x00F000A1:    //传动系16-自适应燃油调整显示    //20190903
        AdaptFuelTrimDisplay_00F000A1_L319_2014();
        break;
    case 0x00F00012:    //传动系17-清除所有自适应值来重置    //20190903
        PCMAdaptionClear_00F00012_L359_2011_GTDI();
        break;
    case 0x00F0018C:    //传动系18-变速器控制模块调适
        TCMadjustment_0x00F0018C_L550_2015();    // *

        break;
    case 0x00F0004F:    //传动系19-柴油微粒过滤器动态再生//20190903
        DPF_regeneration_00F0004F_L359_2011();
        break;
    case 0x00F00050:    //传动系20-柴油颗粒过滤器更换//20190903
        DPF_00F00050_L550_201500();
        break;
    case 0x00F00051:    //传动系21-机油维修计数器复位//20190903
        OilChangeReset_00F00051_L550_201500();
        break;
    case 0x00F0008D:    //传动系22-显示喷油器修正系数.//20190903
        DisplayICF_00F0008D_L359_2013();
        break;
    case 0x00F000D5:    //传动系23-怠速  -  调整    //20190903
        IdleSpeedAdjustment_00F000D5_L359_2011();
        break;
    case 0x00F0008F:    //传动系24-燃油箱  -  烟雾测    //20190903
        DMTLSmoke_00F0008F_L319_201000(0xE50CF3);
        break;
    case 0x00F000A2:    //传动系25-节流阀致动器更换    //20190903
        J_I_THROT_VLV_ACT_REP_00F000A2_L319_2014();
        break;
    case 0x00F00016:    //传动系26-喷油嘴阀测试    //20190903
        Injector_00F00016_L538_2014();
        break;
    case 0x00F000DC:    //传动系27-燃油泵供油管  -  启用/禁用//20190903
        SUPPLY_00F000DC_L359_201300();
        break;
    case 0x00F000A3:    //传动系28-发动机控制模块解锁应用//20190903
        ECMUnlockAapplication_00F000A3_L319_2014();
        break;
    case 0x00F00123:    //传动系29-变速器离合器咬合点测试//20190903
        TransClutchBitePointTest_00F00123_L538_2014();
        break;
    case 0x00F00090:    //传动系30-空气通道设置程序    //20190903
        MCP_AIR_PATH_APP_00F00090_L550_2015(); //#######
        break;
    case 0x00F0018D:    //传动系31-自动变速器所有自适应状态显示
        Trans_Adaptive_Atate_Display_00F0018D_L538JV_2016();

        break;
    case 0x00F0022E:    //传动系32-柴油废气油液液位检查     // (未找到)
        break;
    case 0x00F00F1C:    //传动系33-柴油废气油液灌注及压力测试    // (未找到)
        break;
    case 0x00F0102E:    //传动系34-柴油废气油液喷射泵更换    // (未找到)
        break;
    case 0x00F0022F:    //传动系35-重新设置选择性催化还原启动禁止    // (未找到)
        break;
    case 0x00F00231:    //传动系36-发动机控制模块涡流阀自适应值清除    // (未找到)
        break;
    case 0x00F00232:    //传动系37-发动机控制模块低压 EGR 自适应值清除    // (未找到)
        break;
    case 0x00F00233:    //传动系38-发动机控制模块质量空气流量自适应值清除    // (未找到)
        break;
    case 0x00F015A6:    //传动系39-柴油废气油液箱液位传感器更换    // (未找到)
        break;
    case 0x00F015D1:    //传动系40-发动机控制模块重新设置曲轴箱压力 传感器    // (未找到)
        break;
    case 0x00F015D8:    //传动系41-发动机控制模块重新设置燃油泵自适应值    // (未找到)
        break;
    case 0x00F015D9:    //传动系42-档位选择器位置传感器读入    // (未找到)
        break;
    case 0x00F015DA:    //传动系43-电热塞控制模块    // (未找到)
        break;
    case 0x00F015A7:    //传动系44-启用/禁用电热塞// (未找到)
        break;
    case 0x00F00234:    //传动系45-此例程将重置飞行记录器数据// (未找到)
        break;
    case 0x00F0004D:    //传动系46-飞行记录器    // (未找到)
        break;
    case 0x00F015DB:    //传动系47-阀门堵塞更换    
        Replacement_door_2015();  // *

        break;
    case 0x00F0217D:    //传动系48-选择性催化还原 - 定量配送模块测试  // （选择项目不可用）

        break;

    case 0x00F0000F:    //底盘01-转向角传感器校准//20190903
        STEERING_00F0000F_L359_2013();
        break;
    case 0x00F000C3:    //底盘02-压力传感器标定.    //20190903
        PressSensorCalibration_00F000C3_L359_2011(g_GetTxtStringFormHtml("0x0000B0B3,0x00000098"), CBinary("\x31\x01\x30\x12", 4));
        break;
    case 0x00F00179:    //底盘03-ABS 配置清除    //20190903
        ABS_Configuration_Clear_00F00179_L550_201500();
        break;
    case 0x00F000DD:    //底盘04-制动卡钳更换组装测试//20190903
        EPB_00F000DD_L550_201500();
        break;
    case 0x00F000DE:    //底盘05-驻车制动块更换  -  释放到维修位置    //20190903
        EPB_00F000DE_L550_201500();
        break;
    case 0x00F000DF:    //底盘06-驻车制动块更换  -  退出维护模式应用程序//20190903
        EPB_00F000DF_L550_201500();
        break;
    case 0x00F000E0:    //底盘07-驻车制动器起动    //20190903
        EPB_00F000E0_L550_201500();
        break;
    case 0x00F0017A:    //底盘08-应用和解除电动驻车制动    //20190903
        EPB_00F0017A_L550_201500();
        break;
    case 0x00F0007D:    //底盘09-高度传感器  -  校准    //20190903
        HeightSensorCalibration_00F0007D_L538_2012();
        break;
    case 0x00F0017E:    //底盘10-全轮驱动  -  校准//20190903
        AllWheelDrive_Calibration_00F0017E_L550_2015();
        break;
    case 0x00F0017F:    //底盘11-全轮驱动系统  -  泵通风//20190903
        AllWheelDriveSystem_PumpVenting_00F0017F_L550_2015();
        break;
    case 0x00F00120:    //底盘12-全轮驱动系统  -  泵排放//20190903
        AllWheelDriveSystem_PumpBleed_00F00120_L538_2014();
        break;
    case 0x00F00181:    //底盘13-主动动力传动系统功能检查//20190903
        ActiveDrivelineFunctionalCheck_00F00181_L550_2015();
        break;
    case 0x00F00216:    //底盘14-驻车辅助控制模块复位
        PCM_Reset_00F00216_L538JV_2016(0x00F00216); //  *

        break;
    case 0x00F001D0:    //底盘15-驻车辅助控制模块复位配置状态。
        PCM_Reset_00F001D0_L538JV_2016(0x00F001D0);  // *

        break;

    case 0x00F00062:    //车身01-验证钥匙    //20190903
        Add_Keys_00F00060_L319_2012_Function03();
        break;
    case 0x00F00063:    //车身02-止动装置 // (不支持辅助功能)

        break;
    case 0x00F00066:    //车身03-检查所有天线    //20190903
        Antennas_Check_00F00066_L319_2012();
        break;
    case 0x00F00067:    //车身04-防盗锁止器天线单元功能检查//20190903
        Antenna_00F00067_L319_2010(0);
        break;
    case 0x00F00086:    //车身05-启动授权状态//20190903
        Authorisation_00F00086_L550_2015();
        break;
    case 0x00F00182:    //车身06-智能钥匙状况检查      125k
        Smart_key_check_00F00182_X351_2013();
        break;
    case 0x00F00023:    //车身07-驾驶员一侧记忆座椅标定    //20190903
        SeatCalDrv$I_00F00023_L538_2014();
        break;
    case 0x00F000B9:    //车身08-乘客一侧座椅标定.    //20190903
        J_I_PASS_SEAT_CALIB_00F000B9_L538_2014();
        break;
    case 0x00F00024:    //车身09-座垫更换    //20190903
        J_CFG_SEATCVR_REPLC_CAL_00F00024_L550_2015();
        break;
    case 0x00F0006A:    //车身10-前照灯控制模块系统校准    //20190903
        HeadLampCtrlModeCal_00F0006A_L319_2010();
        break;
    case 0x00F00105:    //车身11-自动远光灯摄像头校准//20190903
        AutoHighBeamCameraCal_00F00105_L494_2014();
        break;
    case 0x00F00106:    //车身12-顶篷遮阳帘校准//20190903
        Roof_Blind_calibration_00F00106_L405_2016();
        break;
    case 0x00F0017B:    //车身13-门窗校准    //20190903
        DoorWindowCalibration_00F0017B_L550_2015();
        break;
    case 0x00F0006D:    //车身14-代客泊车模式重置//20190903
        ValetModeReset_00F0006D_L319_2010(4);
        break;
    case 0x00F000B2:    //车身15-尾门／行李箱校准    //20190903
        TailgateRunkCalibration_00F000B2_L320_2012();
        break;
    case 0x00F000ED:    //车身16-助力转向软锁止动位置重置例行程序//20190903
        PSSLEndStopsResetRoutine_00F000ED_L538_2012();
        break;
    case 0x00F0017C:    //车身17-车辆琐止转向协调 //20190903
        Lock_steering_tune_to_vehicle_00F0017C_L405_2016();
        break;
    case 0x00F00107:    //车身18-点火循环计数器重置
        Fire_count_reset_2015();  // *

        break;
    case 0x00F0006F:    //车身19-步进电机初始化    //20190903
        Stepper_Motor_Init_00F0006F_L359_2013();
        break;
    case 0x00F00070:    //车身20-执行器端点止动器检测//20190903
        Actuators_Detection_00F00070_L319_2010(4);
        break;
    case 0x00F000E1:    //车身21-对所有步进电机进行重新编程    //20190903
        Re_Program_All_Motors_00F000E1_L359_2013();
        break;
    case 0x00F0011C:    //车身22-空调压缩机磨合//20190903
        Air_Conditioning_Compressor_00F0011C_L538_2014();
        break;
    case 0x00F0011D:    //车身23-气候座椅解锁//20190903
        Climate_Seat_Unlock_00F0011D_L538_2014();
        break;
    case 0x00F0011E:    //车身24-重置空调压缩机//20190903
        Reset_Air_Conditioning_00F0011E_L538_2014();
        break;
    case 0x00F015D6:    //车身25-保存气候控制模块内部设置
        Save_Climate_Ctrl_Module_Setup_00F015D6_L538JV_2016();

        break;
    case 0x00F00030:    //车身26-辅助加热器常规准备    //20190903
        Auxiliary_Heater_00F00030_L538_2014();
        break;
    case 0x00F00031:    //车身27-辅助加热器运行检查.//20190903
        Auxiliary_Heater_00F00031_L538_2014();
        break;
    case 0x00F0017D:    //车身28-激活驻车加热  
        Active_car_hot_L550_2015();
        break;
    case 0x00F00034:    //车身29-轮胎压力传感器更换.//20190903
        TPMS_00F00034_L550_201500();
        break;
    case 0x00F00072:    //车身30-轮胎压力监测传感器标识显示//20190903
        TPMS_00F00072_L319_2012();
        break;
    case 0x00F00073:    //车身31-轮胎压力监控轮胎压力传感器测试    //20190903
        TPM_TPST_00F00073_L550_2015();
        break;
    case 0x00F00094:    //车身32-校准动态量控制    //20190903
        CalibrateDynamicVolumeControl_00F00094_L319_2014();
        break;
    case 0x00F000FA:    //车身33-远程通信服务器通信检查//20190903
        TeleServerComCheck_00F000FA_L405_2014();
        break;
    case 0x00F000FB:    //车身34-预激活远程通信控制模块//20190903
        TelePreActivateApp_00F000FB_L405_2014();
        break;
    case 0x00F000FC:    //车身35-激活远程通信控制模块     //
        TeleActivateApp_00F000FC_L538JV_2016();
        break;
    case 0x00F000FD:    //车身36-重置/清除 WiFi 热点//20190903
        TeleResetClearWifi_00F000FD_L405_2014();
        break;
    case 0x00F000FE:    //车身37-网络注册状态    //20190903
        TeleNetRegister_00F000FE_L405_2014();
        break;
    case 0x00F00116:    //车身38-远程通信  -  操作模式//20190903
        TelematicRunMode_00F00116_L405_2014();
        break;
    case 0x00F00117:    //车身39-远程通信控制模块蓄电池更换复位    //20190903
        TeleBatteryReplaceReset_00F00117_L405_2014();
        break;
    case 0x00F00007:    //车身40-发车前检查.    
        PreDevInspection_00F00007_L538JV_2016();
        break;
    case 0x00F00044:    //车身41-维护时间间隔复位.//20190903
        OilReset_00F00044_L550_201500();
        break;
    case 0x00F01631:    //车身42-保养消息重置     //
        Service_reset_NEW_lansheng_L494_2016();

        break;
    case 0x00F00082:    //车身43-传输模式    //20190903
        TransportationMode_00F00082_L319_2014();
        break;
    case 0x00F00083:    //车身44-约束构建模式    //20190903
        RestraintBuild_00F00083_L405_2013();
        break;
    case 0x00F00045:    //车身45-车辆复位    //20190903
        VehicleReset_00F00045_L319_2014(1);
        break;
    case 0x00F00084:    //车身46-里程表校准//20190903
        Odometer_Calibration_00F00084_L319_2010(1, 1);
        break;
    case 0x00F00183:    //车身47-电源供电维修模式诊断    // *****
        Power_supply_maintenance_00F00183_L538JV_2016();
        break;
    case 0x00F00088:    //车身48-蓄电池更换    //20190903
        BatteryReplacement_00F00088_L319_2014(1);
        break;
    case 0x00F0009E:    //车身49-静态电流控制模块内部检查//20190903
        QCC_ModuleCheck_00F0009E_L319_2014();
        break;
    case 0x00F00114:    //车身50-激活测试图片    //20190903
        Activate_Test_Picture_00F00114_L405_2014();
        break;
    case 0x00F00115:    //车身51-平视显示器控制模块重置    //20190903
        HeadUp_DisplayModule_Reset_00F00115_L405_2014();
        break;
    case 0x00F00187:    //车身52-解锁展开式拖车杆    //20190903
        UnlockDeployableTowbar_00F00187_L550_2015();
        break;
    case 0x00F00188:    //车身53-展开式拖车杆恢复    //20190903
        DeployableTowbarRecovery_00F00188_L550_2015();
        break;
    case 0x00F00189:    //车身54-收起展开式拖车杆    //20190903
        StowDeployableTowbar_00F00189_L550_2015(3, CBinary("\x31\x01\x02\x16\x00", 5));
        break;
    case 0x00F0018A:    //车身55-展开展开式拖车杆    //20190903
        StowDeployableTowbar_00F00189_L550_2015(2, CBinary("\x31\x01\x02\x16\x01", 5));
        break;
    case 0x00F0018B:    //车身56-展开式拖车杆扬声器测试    //20190903
        StowDeployableTowbar_00F00189_L550_2015(1, CBinary("\x31\x01\x60\x44", 4));
        break;
    case 0x00F00097:    //车身57-信息和娱乐系统    //20190903
        InforAndEntertainmentSystemSpeApplications_00F00097_L319_2012();
        break;
    case 0x00F00111:    //车身58-测试内部备用蓄电池    //20190903
        TestBackupBattery_00F00111_L405_2014();
        break;
    case 0x00F00112:    //车身59-紧急呼叫和故障呼叫开关照明测试    //20190903
        TeleSoSCall_00F00112_L405_2014();
        break;
    case 0x00F00110:    //车身60-远程通信 SIM 卡类型 //20190903
        TeleSIMCARD_00F00110_L405_2014();
        break;
    case 0x00F00091:    //车身61-报警触发器历史    //20190903
        AlarmTriggerHistory_00F00091_L319_2010();
        break;
    case 0x00F01288:    //车身62-手动归零    
        Hand_zero_NEW_lansheng_L494_2016();
        break;
    case 0x00F01289:    //车身63-一键自动归零    
        Auto_hand_zero_NEW_lansheng_L494_2016();
        break;
    case 0x00F0128A:    //车身64-刹车片更换(操作向导)    
        BRAKE_Replacement_L550_2015();
        break;




    case 60280://20190903
        TeleActivateApp_60280_L405_2014();
        break;
    case 0x00F0004E:
        TCMAdaptionClear_00F0004E_L405_2014_8SPDAUTO();
        break;
    case 0x00F00065:
        Recover_Keys_00F00065_L319_2012();//同L319_2012的00F00065
        break;
    case 0x00F0013A:
        Image_Control_Module_00F0013A_L550_2015();
        break;
    case 0x00F00185:
        DeployableTowbarSwitchBLillu_00F00185_L550_2015(1);
        break;
    case 0x00F00186:
        DeployableTowbarSwitchBLillu_00F00185_L550_2015(2);
        break;
    default:
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_THE_SELECTED_FUNCTION_IS_NOT_SUPPORTED);
        break;
    }

    return iRet;
}




// 阀门堵塞更换
W_ErrorCode CSeviceFunctionNew::Replacement_door_2015()
{
    W_ErrorCode iRet = 0;
    W_I16 iKey = 0;

    CSendFrame sendframe;
    CReceiveFrame rfRet;
    CBinary binRecive;
    char charTemp[500] = "";
    string strall = "";
    string strVin = "";
    string strsoftware = "";
    string strserial = "";
    int ivalue = 0;

    bool is7f;
    W_I32 iback = -1;
    string strTemp, data[6], units_mBar[6];

    //说明1
    iRet = FxShowMessageBox(g_GetTxtStringFormHtml("0x9002CDB5"), g_GetTxtStringFormHtml("0x9002B283") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BA40") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B378") + "\n" + g_GetTxtStringFormHtml("000BA41") + "\n" + "\n" + g_GetTxtStringFormHtml("0x90025D5A") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BA42") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BF1C"), DF_MB_OKCANCEL, DT_LEFT);
    if (iRet == DF_IDCANCEL)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x900019A5"), g_GetTxtStringFormHtml("0x9002C122"), DF_MB_OK);//因用户中止而失败 - 重试程序
        return CErrorCode::EC_TIME_OVER;
    }

    //说明2
    FxShowMessageBox(g_GetTxtStringFormHtml("0x9002CDB5"), g_GetTxtStringFormHtml("0x00000069") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BD1D") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BFBE")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x90027220") + "\n" + "\n" + g_GetTxtStringFormHtml("0x90027226") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BD20")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BD21") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BD22") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BD23") + "\n" + "\n" + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OK, DT_LEFT);

    //确保发动机在运转
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B93D"), g_GetTxtStringFormHtml("0x9001251C"));

    //变速器离合器咬合点测试
    iRet = FxShowMessageBox(g_GetTxtStringFormHtml("0x9002CDB5"), g_GetTxtStringFormHtml("0x0000BD24,0x90027212,0x9002721D,0x900012B4"), DF_MB_OKCANCEL, DT_LEFT);
    if (iRet == DF_IDCANCEL)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x900019A5"), g_GetTxtStringFormHtml("0x9002C122"), DF_MB_OK);//因用户中止而失败 - 重试程序
        return CErrorCode::EC_TIME_OVER;
    }
    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通信中
    Sleep(800);

    EnterSystem(PTL_CAN_11_500K, CBinary("\x07\xE1\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x07E9);
    SendDataComm(CBinary("\x22\xF1\x03", 3));
    sendframe.SetSendFrame(CBinary("\x10\x03", 2));
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount() < 2 || binRecive[0] != 0x50 || binRecive[1] != 0x03)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x900019A5"), g_GetTxtStringFormHtml("0x9000D1CE"), DF_MB_OK);//测试失败
        return CErrorCode::EC_TIME_OVER;
    }

    sendframe.SetSendFrame(CBinary("\x31\x01\x40\x66\x04", 5));  // 07 E1 08 05 31 01 40 66 04 00 00
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    if (checkIs7f(binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));
        return CErrorCode::EC_ECU_REFUSE;
    }
    else if (binRecive.GetByteCount() < 4 || binRecive[0] != 0x71 || binRecive[1] != 0x01 || binRecive[2] != 0x40 || binRecive[3] != 0x66)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x9000220B"), g_GetTxtStringFormHtml("0x00009A6B"), DF_MB_OK, DT_LEFT);
        return CErrorCode::EC_DATA;
    }
    sendframe.SetSendFrame(CBinary("\x31\x03\x40\x66", 4));  // 07 E1 08 04 31 03 40 66 00 00 00
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    if (checkIs7f(binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));
        return CErrorCode::EC_ECU_REFUSE;
    }
    else if (binRecive.GetByteCount() < 6 || binRecive[0] != 0x71 || binRecive[1] != 0x03 || binRecive[2] != 0x40 || binRecive[3] != 0x66)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x9000220B"), g_GetTxtStringFormHtml("0x00009A6B"), DF_MB_OK, DT_LEFT);
        return CErrorCode::EC_DATA;
    }
    PleaseWait_xS_haveTTL(10000, g_GetTxtStringFormHtml("0x0000B09D"), g_GetTxtStringFormHtml("0x9002365C,0x90027211"));//例程完成-变速器离合器咬合点测试
    SendDataComm(CBinary("\x10\x01", 2));

    //变速器离合器咬合点测试 - 完成
    FxShowMessageBox(g_GetTxtStringFormHtml("0x9002CDB5"), g_GetTxtStringFormHtml("0x90027211,0x0000B0A3") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OK, DT_LEFT);

    //点火关闭
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));

    //点火打开
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"));

    //s点火变速器离合器咬合点测试应用程序通过
    FxShowMessageBox(g_GetTxtStringFormHtml("0x9002CDB5"), g_GetTxtStringFormHtml("0x00000069,0x0000BD31") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OK, DT_LEFT);

    //点火打开
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"));

    //清除调适值
    iRet = FxShowMessageBox(g_GetTxtStringFormHtml("0x9002CDB5"), g_GetTxtStringFormHtml("0x900010F9,0x9002B286,0x0000BA36") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OKCANCEL, DT_LEFT);
    if (iRet == DF_IDCANCEL)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x900019A5"), g_GetTxtStringFormHtml("0x9002C122"), DF_MB_OK);//因用户中止而失败 - 重试程序
        return CErrorCode::EC_TIME_OVER;
    }
    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通信中
    Sleep(800);

    SendDataComm(CBinary("\x22\xF1\x03", 3));
    SendDataComm(CBinary("\x22\xF1\x03", 3));
    sendframe.SetSendFrame(CBinary("\x10\x03", 2));
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount() < 2 || binRecive[0] != 0x50 || binRecive[1] != 0x03)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x900019A5"), g_GetTxtStringFormHtml("0x9000D1CE"), DF_MB_OK);//测试失败
        return CErrorCode::EC_TIME_OVER;
    }

    sendframe.SetSendFrame(CBinary("\x31\x01\x40\x13", 4));  // 07 E1 08 04 31 01 40 13 00 00 00
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    if (checkIs7f(binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));
        return CErrorCode::EC_ECU_REFUSE;
    }
    else if (binRecive.GetByteCount() < 4 || binRecive[0] != 0x71 || binRecive[1] != 0x01 || binRecive[2] != 0x40 || binRecive[3] != 0x13)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x9000220B"), g_GetTxtStringFormHtml("0x00009A6B"), DF_MB_OK, DT_LEFT);
        return CErrorCode::EC_DATA;
    }
    SendDataComm(CBinary("\x10\x01", 2));

    //清除调适值 - 完成
    FxShowMessageBox(g_GetTxtStringFormHtml("0x9002CDB5"), g_GetTxtStringFormHtml("0x900010F9,0x0000B0A3") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OK, DT_LEFT);

    //点火关闭
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));

    // 变速器控制模块调适1
    FxShowMessageBox(g_GetTxtStringFormHtml("0x9002CDB5"), g_GetTxtStringFormHtml("0x0000BA2D") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BA40") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BA41") + "\n" + "\n" + g_GetTxtStringFormHtml("0x90025D5A")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BA42") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BF1C") + "\n" + "\n" + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OK, DT_LEFT);

    //变速器控制模块调适2
    FxShowMessageBox(g_GetTxtStringFormHtml("0x9002CDB5"), g_GetTxtStringFormHtml("0x0000BA2D") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BF1D") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900003AA") + "\n" + "\n" + g_GetTxtStringFormHtml("0x90026E4D")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x90026E4C") + "\n" + "\n" + g_GetTxtStringFormHtml("0x90026E41") + "\n" + "\n" + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OK, DT_LEFT);

    //变速器控制模块调适3
    FxShowMessageBox(g_GetTxtStringFormHtml("0x9002CDB5"), g_GetTxtStringFormHtml("0x9002B283") + "\n" + "\n" + g_GetTxtStringFormHtml("0x90026E47") + "\n" + "\n" + g_GetTxtStringFormHtml("0x90026E48") + "\n" + "\n" + g_GetTxtStringFormHtml("0x90026E49")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x90026E45") + "\n" + "\n" + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OK, DT_LEFT);

    //变速器控制模块调适  -  进入条件
    FxShowMessageBox(g_GetTxtStringFormHtml("0x9002CDB5"), g_GetTxtStringFormHtml("0x90027206") + "\n" + "\n" + g_GetTxtStringFormHtml("0x90027208") + "\n" + "\n" + g_GetTxtStringFormHtml("0x90027209")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x90027207") + "\n" + "\n" + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OK, DT_LEFT);

    //确保发动机在运转
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B93D"), g_GetTxtStringFormHtml("0x9001251C"));

    // 变速器液温度
    iRet = FxShowMessageBox(g_GetTxtStringFormHtml("0x9002CDB5"), g_GetTxtStringFormHtml("0x90027265,0x9002B330"), DF_MB_OKCANCEL, DT_LEFT);
    if (iRet == DF_IDCANCEL)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x900019A5"), g_GetTxtStringFormHtml("0x9002C122"), DF_MB_OK);//因用户中止而失败 - 重试程序
        return CErrorCode::EC_TIME_OVER;
    }
    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通信中
    Sleep(800);

    CActTestCtrl uiAct;
    string strCal = "";
    W_I16 iValue = 0;
    char EngTmp[20] = { 0 };

    uiAct.InitCtrl(g_GetTxtStringFormHtml("0x90002446"));//变速器液温度
    uiAct.SetColumnWid(75, 15, 10);
    uiAct.AddOneItem(g_GetTxtStringFormHtml("0x90002446,0x90027266"));//这个程序将持续读取变速器油液温度，直到满足正确的运行条件 (50°C)。
    uiAct.AddOneItem(g_GetTxtStringFormHtml("0x90002446"), FxGetStdString(CBinary("\x4A\xAA\x00\x00\x00\x05", 6)));
    uiAct.AddOneBtn(g_GetTxtStringFormHtml("0x0001D595"), true);//确定

    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\xE1\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x07E9);
    SendDataComm(CBinary("\x22\xF1\x03", 3));
    while (1)
    {
        sendframe.SetSendFrame(CBinary("\x22\x1E\x69", 3));
        rfRet = SendDataComm(sendframe);
        binRecive = rfRet.GetFirst();
        if (binRecive.GetByteCount() == 0)
        {
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_OK, DT_LEFT);
            return CErrorCode::EC_TIME_OVER;
        }
        else if (checkIs7f(binRecive))
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"), DF_MB_OK);//ECU不支持
            return CErrorCode::EC_ECU_REFUSE;
        }
        if (binRecive.GetByteCount() < 4 || binRecive[3] < 0x5A || binRecive[3] > 0xFF)  // 第4个字节为控制位，>5A
        {
            uiAct.SetBtnStatus(0, false);
            strCal = "Data out of range";
        }
        else
        {
            iValue = binRecive[3] - 0x28;
            sprintf(EngTmp, "%d", iValue);
            strCal = EngTmp;
            uiAct.SetBtnStatus(0, true);
        }
        uiAct.SetItemValue(1, strCal);
        iRet = uiAct.ShowCtrl();
        if (iRet == -1)
            return iRet;
        else if (iRet == 0)
            break;
    }

    // 满足正确的运行条件 (50°C)。 完成
    FxShowMessageBox(g_GetTxtStringFormHtml("0x9002CDB5"), g_GetTxtStringFormHtml("0x90002446,0x90027266,0x0000B0A3"), DF_MB_OK, DT_LEFT);
    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通信中
    Sleep(800);

    SendDataComm(CBinary("\x22\xF1\x03", 3));
    sendframe.SetSendFrame(CBinary("\x22\xF1\x8C", 3));
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    if (checkIs7f(binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));
        return CErrorCode::EC_ECU_REFUSE;
    }
    else if (binRecive.GetByteCount() < 3 || binRecive[0] != 0x62 || binRecive[1] != 0xF1 || binRecive[2] != 0x8C)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x9000220B"), g_GetTxtStringFormHtml("0x00009A6B"), DF_MB_OK, DT_LEFT);
        return CErrorCode::EC_DATA;
    }

    // 变速器控制模块调适  -  静态接合
    FxShowMessageBox(g_GetTxtStringFormHtml("0x9002CDB5"), g_GetTxtStringFormHtml("0x00000069") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002720B") + "\n" + "\n" +
        g_GetTxtStringFormHtml("0x9002720C") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002720D") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4") + "\n" + "\n" + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OK, DT_LEFT);

    SendDataComm(CBinary("\x22\xF1\x03", 3));
    sendframe.SetSendFrame(CBinary("\x22\xF1\x8C", 3));
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    if (!binRecive.GetByteCount() || checkIs7f(binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml(TXT_HTML_STATE_VALUE_IGNITION_OFF));//点火关闭
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B0AC"));//测试失败
        return CErrorCode::EC_TIME_OVER;
    }



    int count = 0;
    do
    {
        ivalue = 0;
        if (binRecive.GetByteCount() > (count + 3) && binRecive[count + 3])   // 软件版本   TEST3-TEST20
        {
            ivalue = binRecive[count + 3];
            if (ivalue == 0)
                break;
            if (ivalue > 9)
                sprintf(charTemp, "%c", ivalue);
            else
                sprintf(charTemp, "%d", ivalue);
            strVin += charTemp;
        }
        count++;
    } while (count < 17);

    sendframe.SetSendFrame(CBinary("\x22\xF1\x8C", 3));   // VIN   TEST3-TEST19
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    for (count = 0; count < binRecive.GetByteCount() - 3; count++)
    {
        ivalue = 0;
        if (binRecive[count + 3])
        {
            ivalue = binRecive[count + 3];
            sprintf(charTemp, "%d", ivalue);
            strsoftware += charTemp;
        }
    }
    sendframe.SetSendFrame(CBinary("\x22\xF1\x88", 3));  // 序列号   TEST3-TEST29
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    for (count = 0; count < binRecive.GetByteCount() - 3; count++)
    {
        ivalue = 0;
        if (binRecive[count + 3])
        {
            ivalue = binRecive[count + 3];
            sprintf(charTemp, "%d", ivalue);
            strserial += charTemp;
        }
    }

    strall = g_GetTxtStringFormHtml("0x9002B616") + ":%s\n"        //软件版本
        + g_GetTxtStringFormHtml("0x9002CE9B") + ":%s\n"        //序列号
        + g_GetTxtStringFormHtml("0x900254CE") + ":%s\n";        //VIN

    sprintf(charTemp, strall.c_str(), strsoftware.c_str(), strserial.c_str(), strVin.c_str());


    // 软件版本/序列号/VIN
    FxShowMessageBox(g_GetTxtStringFormHtml("0x9002CDB5"), charTemp, DF_MB_OK, DT_LEFT);

    vector<W_U8>    vctInt;
    CEcuInfoCtrl    list;

    // 分栏占屏比例
    vctInt.push_back(10);
    vctInt.push_back(10);
    vctInt.push_back(10);
    vctInt.push_back(10);
    vctInt.push_back(5);
    vctInt.push_back(5);
    vctInt.push_back(5);
    vctInt.push_back(25);
    vctInt.push_back(20);

    list.InitCtrl(g_GetTxtStringFormHtml("0x0000BA2D"), vctInt);
    list.AddOneBtn(g_GetTxtStringFormHtml("0x0001D595"));
    list.AddItem(g_GetTxtStringFormHtml("0x9001E80B"));
    list.AddItem("E");
    list.AddItem("C");
    list.AddItem("D");
    list.AddItem("B");
    list.AddItem("");
    list.AddItem(g_GetTxtStringFormHtml("0x9002D132"));
    list.AddItem(g_GetTxtStringFormHtml("0x9001EC8A"));
    list.AddItem(g_GetTxtStringFormHtml("0x90027A8D"));

    while (1)
    {
        CBinary binRecieve1;

        Sleep(250);


        sendframe.SetSendFrame(CBinary("\x22\x1E\x87", 3));   // Req: 07 E1 08 03 22 1E 87 00 00 00 00
        rfRet = SendDataComm(sendframe);
        binRecieve1 = rfRet.GetFirst();
        is7f = checkIs7f(binRecieve1);
        if (binRecieve1.GetByteCount() == 0)
        {
            FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ENTERSYSFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_PACKET_TIME_OVER;
        }
        else if (is7f)
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x90027265"), g_GetTxtStringFormHtml("0x0000BE50"));
            return CErrorCode::EC_ECU_REFUSE;
        }
        else if (binRecieve1.GetByteCount() < 3 || (binRecieve1[0] != 0x62 || binRecieve1[1] != 0x1E || binRecieve1[2] != 0x87))
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x90027265"), g_GetTxtStringFormHtml("0x0000B21F"), DF_MB_CANCEL, DT_LEFT);
            return CErrorCode::EC_DATA;
        }
        // 总共：4_2

        int value_4_2;
        string str_4_2;
        char buf[20];
        value_4_2 = binRecieve1[5] * 256 + binRecieve1[6];  // 16进制拼接2个字节
        sprintf(buf, "%d", value_4_2);
        str_4_2 = buf;

        // 总共：2_2
        int value_2_2;
        string str_2_2;
        value_2_2 = binRecieve1[7] * 256 + binRecieve1[8];
        sprintf(buf, "%d", value_2_2);
        str_2_2 = buf;

        // 总共: 3_2
        int value_3_2;
        string str_3_2;
        value_3_2 = binRecieve1[9] * 256 + binRecieve1[10];
        sprintf(buf, "%d", value_3_2);
        str_3_2 = buf;

        // 总共: 1_2
        int value_1_2;
        string str_1_2;
        value_1_2 = binRecieve1[11] * 256 + binRecieve1[12];
        sprintf(buf, "%d", value_1_2);
        str_1_2 = buf;


        // mBar
        sendframe.SetSendFrame(CBinary("\x22\x1E\x85", 3));  // 07 E1 08 03 22 1E 85 00 00 00 00
        rfRet = SendDataComm(sendframe);
        binRecieve1 = rfRet.GetFirst();
        is7f = checkIs7f(binRecieve1);
        if (binRecieve1.GetByteCount() == 0)
        {
            FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ENTERSYSFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_PACKET_TIME_OVER;
        }
        else if (is7f)
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x90027265"), g_GetTxtStringFormHtml("0x0000BE50"));
            return CErrorCode::EC_ECU_REFUSE;
        }
        else if (binRecieve1.GetByteCount() < 3 || (binRecieve1[0] != 0x62 || binRecieve1[1] != 0x1E || binRecieve1[2] != 0x85))
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x90027265"), g_GetTxtStringFormHtml("0x0000B21F"), DF_MB_CANCEL, DT_LEFT);
            return CErrorCode::EC_DATA;
        }
        // mBar：4_3
        int value_4_3;
        string str_4_3;
        value_4_3 = binRecieve1[5] * 256 + binRecieve1[6];  // 16进制拼接2个字节
        sprintf(buf, "%d", value_4_3);
        str_4_3 = buf;

        // mBar: 2_3
        int value_2_3;
        string str_2_3;
        value_2_3 = binRecieve1[7] * 256 + binRecieve1[8];
        sprintf(buf, "%d", value_2_3);
        str_2_3 = buf;

        // mBar: 3_3
        int value_3_3;
        string str_3_3;
        value_3_3 = binRecieve1[9] * 256 + binRecieve1[10];
        sprintf(buf, "%d", value_3_3);
        str_3_3 = buf;

        // mBar: 1_3
        int value_1_3;
        string str_1_3;
        value_1_3 = binRecieve1[11] * 256 + binRecieve1[12];
        sprintf(buf, "%d", value_1_3);
        str_1_3 = buf;


        sendframe.SetSendFrame(CBinary("\x22\x1E\x7E", 3));  // 07 E1 08 03 22 1E 7E 00 00 00 00
        rfRet = SendDataComm(sendframe);
        binRecieve1 = rfRet.GetFirst();
        is7f = checkIs7f(binRecieve1);
        if (binRecieve1.GetByteCount() == 0)
        {
            FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ENTERSYSFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_PACKET_TIME_OVER;
        }
        else if (is7f)
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x90027265"), g_GetTxtStringFormHtml("0x0000BE50"));
            return CErrorCode::EC_ECU_REFUSE;
        }
        else if (binRecieve1.GetByteCount() <= 3 || (binRecieve1[0] != 0x62 || binRecieve1[1] != 0x1E || binRecieve1[2] != 0x7E))
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x90027265"), g_GetTxtStringFormHtml("0x0000C1A4"), DF_MB_CANCEL, DT_LEFT);
            return CErrorCode::EC_DATA;
        }

        // 温度控制
        sendframe.SetSendFrame(CBinary("\x22\x1E\x69", 3));  // 07 E1 08 03 22 1E 69 00 00 00 00
        rfRet = SendDataComm(sendframe);
        binRecieve1 = rfRet.GetFirst();
        is7f = checkIs7f(binRecieve1);
        if (binRecieve1.GetByteCount() == 0)
        {
            FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ENTERSYSFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_PACKET_TIME_OVER;
        }
        else if (is7f)
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x90027265"), g_GetTxtStringFormHtml("0x0000BE50"));
            return CErrorCode::EC_ECU_REFUSE;
        }
        else if (binRecieve1.GetByteCount() <= 3 || (binRecieve1[0] != 0x62 || binRecieve1[1] != 0x1E || binRecieve1[2] != 0x69))
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x90027265"), g_GetTxtStringFormHtml("0x0000C1A4"), DF_MB_CANCEL, DT_LEFT);
            return CErrorCode::EC_DATA;
        }

        int value_temperature;
        string str_temperature;
        value_temperature = -40 + binRecieve1[3];  // 速度控制
        sprintf(buf, "%d", value_temperature);
        str_temperature = buf;
        string contain = "℃(摄氏度)";  // 字符串拼接
        str_temperature += contain;

        string change = "";
        if (binRecieve1[3] < 50)
        {
            change = "超出范围";
        }
        else
        {
            change = "在正常范围以内";
        }


        // 档位
        sendframe.SetSendFrame(CBinary("\x22\x1E\x1F", 3));   // 07 E1 08 03 22 1E 1F 00 00 00 00
        rfRet = SendDataComm(sendframe);
        binRecieve1 = rfRet.GetFirst();
        is7f = checkIs7f(binRecieve1);
        if (binRecieve1.GetByteCount() == 0)
        {
            FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ENTERSYSFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_PACKET_TIME_OVER;
        }
        else if (is7f)
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x90027265"), g_GetTxtStringFormHtml("0x0000BE50"));
            return CErrorCode::EC_ECU_REFUSE;
        }
        else if (binRecieve1.GetByteCount() <= 3 || (binRecieve1[0] != 0x62 || binRecieve1[1] != 0x1E || binRecieve1[2] != 0x1F))
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x90027265"), g_GetTxtStringFormHtml("0x0000C1A4"), DF_MB_CANCEL, DT_LEFT);
            return CErrorCode::EC_DATA;
        }
        int value_gear;
        string str_gear;
        value_gear = binRecieve1[49];
        sprintf(buf, "%d", value_gear);
        str_gear = buf;
        if (binRecieve1[49] == 0x00)
        {
            str_gear = "N";
        }


        sendframe.SetSendFrame(CBinary("\x22\xF4\x0C", 3));   //  07 E1 08 03 22 F4 0C 00 00 00 00
        rfRet = SendDataComm(sendframe);
        binRecieve1 = rfRet.GetFirst();
        is7f = checkIs7f(binRecieve1);
        if (binRecieve1.GetByteCount() == 0)
        {
            FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ENTERSYSFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_PACKET_TIME_OVER;
        }
        else if (is7f)
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x90027265"), g_GetTxtStringFormHtml("0x0000BE50"));
            return CErrorCode::EC_ECU_REFUSE;
        }
        else if (binRecieve1.GetByteCount() <= 3 || (binRecieve1[0] != 0x62 || binRecieve1[1] != 0xF4 || binRecieve1[2] != 0x0C))
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x90027265"), g_GetTxtStringFormHtml("0x0000C1A4"), DF_MB_CANCEL, DT_LEFT);
            return CErrorCode::EC_DATA;
        }



        // 踏板位置
        sendframe.SetSendFrame(CBinary("\x22\xF4\x5A", 3));  // 07 E1 08 03 22 F4 5A 00 00 00 00
        rfRet = SendDataComm(sendframe);
        binRecieve1 = rfRet.GetFirst();
        is7f = checkIs7f(binRecieve1);
        if (binRecieve1.GetByteCount() == 0)
        {
            FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ENTERSYSFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_PACKET_TIME_OVER;
        }
        else if (is7f)
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x90027265"), g_GetTxtStringFormHtml("0x0000BE50"));
            return CErrorCode::EC_ECU_REFUSE;
        }
        else if (binRecieve1.GetByteCount() <= 3 || (binRecieve1[0] != 0x62 || binRecieve1[1] != 0xF4 || binRecieve1[2] != 0x5A))
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x90027265"), g_GetTxtStringFormHtml("0x0000C1A4"), DF_MB_CANCEL, DT_LEFT);
            return CErrorCode::EC_DATA;
        }

        int value_step;
        string str_step;
        value_step = 0.49803 * binRecieve1[49];
        sprintf(buf, "%d", value_step);
        str_step = buf;
        string sym = "%";
        str_step += sym;



        sendframe.SetSendFrame(CBinary("\x22\x1E\x8B", 3));  //  07 E1 08 03 22 1E 8B 00 00 00 00
        rfRet = SendDataComm(sendframe);
        binRecieve1 = rfRet.GetFirst();
        is7f = checkIs7f(binRecieve1);
        if (binRecieve1.GetByteCount() == 0)
        {
            FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ENTERSYSFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_PACKET_TIME_OVER;
        }
        else if (is7f)
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x90027265"), g_GetTxtStringFormHtml("0x0000BE50"));
            return CErrorCode::EC_ECU_REFUSE;
        }
        else if (binRecieve1.GetByteCount() <= 3 || (binRecieve1[0] != 0x62 || binRecieve1[1] != 0x1E || binRecieve1[2] != 0x8B))
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x90027265"), g_GetTxtStringFormHtml("0x0000C1A4"), DF_MB_CANCEL, DT_LEFT);
            return CErrorCode::EC_DATA;
        }




        sendframe.SetSendFrame(CBinary("\x22\xF1\x03", 3));
        rfRet = SendDataComm(sendframe);

        list.SetSubItem(0, 1, "");
        list.SetSubItem(0, 2, g_GetTxtStringFormHtml("0x9002D745")); // 总共
        list.SetSubItem(0, 3, g_GetTxtStringFormHtml("0x9002D746")); // mBar
        list.SetSubItem(0, 4, "1");
        list.SetSubItem(0, 5, "2");
        list.SetSubItem(0, 6, "3");
        list.SetSubItem(0, 7, g_GetTxtStringFormHtml("0x9002D747")); // 涡轮扭矩范围 (Nm)
        list.SetSubItem(0, 8, g_GetTxtStringFormHtml("0x9002D748")); // 发动机转速范围(Rpm)

        list.SetSubItem(1, 1, "3");
        list.SetSubItem(1, 2, str_1_2);// 总共
        list.SetSubItem(1, 3, str_1_3);// mBar

        list.SetSubItem(2, 1, "7");
        list.SetSubItem(2, 2, str_2_2);
        list.SetSubItem(2, 3, str_2_3);

        list.SetSubItem(3, 1, "6");
        list.SetSubItem(3, 2, str_3_2);
        list.SetSubItem(3, 3, str_3_3);

        list.SetSubItem(4, 1, "7");
        list.SetSubItem(4, 2, str_4_2);
        list.SetSubItem(4, 3, str_3_3);

        list.SetSubItem(6, 1, g_GetTxtStringFormHtml("0x900150E7"));  // 踏板位置
        list.SetSubItem(6, 2, g_GetTxtStringFormHtml("0x9001F5CE")); // 档位
        list.SetSubItem(6, 3, g_GetTxtStringFormHtml("0x9001F5D2")); // 状态

        list.SetSubItem(7, 0, str_temperature);
        list.SetSubItem(7, 1, str_step); // str踏板位置
        if (units_mBar[5] == "0")
            list.SetSubItem(7, 2, "N");
        else
            list.SetSubItem(7, 2, str_gear);  // 档位
        list.SetSubItem(7, 3, g_GetTxtStringFormHtml("0x9002D129"));
        list.SetSubItem(8, 0, change); // 范围
        list.SetSubItem(8, 1, g_GetTxtStringFormHtml("0x9002D749"));
        iback = list.ShowCtrl();
        if (iback == -1)
        {
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
            return iRet;
        }
        else if (iback == 0)
        {
            break;
        }
    }


    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通信中
    Sleep(800);


    //变速器控制模块调适  -  静态接合
    FxShowMessageBox(g_GetTxtStringFormHtml("0x9002CDB5"), g_GetTxtStringFormHtml("0x00000069,0x9002720B,0x9002720C,0x9002720D,0x9002720F"), DF_MB_OK, DT_LEFT);

    // 点火关闭
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));

    // 故障码
    iRet = ClearSysDTC_Programme_538(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x07E8);

    return iRet;

}



// 点火循环计数器重置
W_ErrorCode CSeviceFunctionNew::Fire_count_reset_2015()
{
    W_ErrorCode iRet = 0;
    W_I16 iKey = 0;

    CSendFrame sendframe;
    CReceiveFrame rfRet;
    CBinary binAns, binCmd;
    CBinary binRecive;

    // 点火打开、发动机稳定、判断电压、点火关闭
    iRet = CheckEngineStop(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xF4\x0C\x00\x00\x00\x00", 11), 0x07E8, CBinary("\x01\x00", 2));
    if (iRet != 0)
        return CErrorCode::EC_DATA;

    // 重置中央接线盒点火循环计数器    
    iRet = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BCAD"), g_GetTxtStringFormHtml("0x0000C05F") + "\n" + "\n" + "0x9002D763" + "\n" + "\n" + "0x9002D764"
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x90022F8D"), DF_MB_OKCANCEL, DT_LEFT);
    if (iRet == DF_IDCANCEL)
        return 0;

    //点火打开
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"));

    //按下确定继续
    iRet = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BCAD"), g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OKCANCEL, DT_LEFT);
    if (iRet == DF_IDCANCEL)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000BE88"));
        return iRet;
    }
    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通信中
    Sleep(800);

    // 发送命令
    EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x26\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x072E);  // 进入系统    
    SendDataComm(CBinary("\x22\xF1\x03", 3));
    sendframe.SetSendFrame(CBinary("\x10\x03", 2));
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    if (checkIs7f(binRecive))
    {
        SendDataComm(CBinary("\x10\x01", 2));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"), DF_MB_ANYKEYRETURN, DT_LEFT);    //ECU不支持
        return CErrorCode::EC_ECU_REFUSE;
    }

    binAns = SendDataComm(CBinary("\x31\x01\x20\x5E", 4));  // 07 26 08 04 31 01 20 5E 00 00 00
    if (!binAns.GetByteCount())
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), FxGetStdString(CBinary("\xFF\x07\x00\x00\x00\x3A", 6)));    //通讯失败
        return 0;
    }
    else if (binAns.GetByteCount() < 4 || binAns[0] != 0x71 || binAns[1] != 0x01 || binAns[2] != 0x20 || binAns[3] != 0x5E)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BCAD"), g_GetTxtStringFormHtml("0x0000B21F"));//失败
        return 0;
    }
    m_pNetLayer->KeepLink(3000, CSendFrame(CBinary("\x3E\x80", 2)));    // 打开链路保持
    PleaseWait_xS_haveTTL(8000, g_GetTxtStringFormHtml("0x0000B09D"), g_GetTxtStringFormHtml("0x0000C045"));//进度条-请等待
    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通信中
    Sleep(800);
    SendDataComm(CBinary("\x10\x01", 2));  // 07 26 08 02 10 01 00 00 00 00 00
    m_pNetLayer->KeepLink(0); // 断开链路保持

    // 完成
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BCAD"), g_GetTxtStringFormHtml("0x9000128B") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OK, DT_LEFT);

    // 模块初始化
    PleaseWait_xS_haveTTL(10000, g_GetTxtStringFormHtml("0x00000066"), g_GetTxtStringFormHtml("0x0000B8FE") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900126DD"));

    //点火关闭
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));

    //读取故障码，清除故障码
    iRet = ClearSysDTC_Programme_538(PTL_CAN_11_500K, CBinary("\x07\x26\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x072E);

    return iRet;

}



// 电源供电维修模式诊断
W_ErrorCode CSeviceFunctionNew::fix_elec_style_2015()
{
    W_ErrorCode iRet = 0;
    W_I16 iKey = 0;

    CSendFrame sendframe;
    CReceiveFrame rfRet;
    CBinary binAns, binCmd;
    CBinary binRecive;

    // 操作说明1
    iRet = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BA51"), g_GetTxtStringFormHtml("0x0000BA52") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BA52")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BA54") + "\n" + "\n" + g_GetTxtStringFormHtml("0x90000D00") + "\n" + "\n" +
        g_GetTxtStringFormHtml("0x90000D01") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BA57") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BBAB"), DF_MB_OKCANCEL, DT_LEFT);
    if (iRet == DF_IDCANCEL)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000BE88")); // 操作人员中止了程序
        return iRet;
    }

    // 操作说明2
    iRet = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BA51"), g_GetTxtStringFormHtml("0x0000BA52") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BA53")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BA54") + "\n" + "\n" + g_GetTxtStringFormHtml("0x90000D00") + "\n" + "\n" +
        g_GetTxtStringFormHtml("0x90000D01") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BA57") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BBAB"), DF_MB_OKCANCEL, DT_LEFT);

    if (iRet == DF_IDCANCEL)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000BE88"));
        return iRet;
    }

    //点火打开
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"));
    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通信中
    Sleep(800);

    //EnterSystem(PTL_CAN_11_500K,CBinary("\x07\x16\x08\x03\x22\xF1\x03\x00\x00\x00\x00"),0x071E);
    return iRet;
}
































// 全部地形诊断模块
W_ErrorCode CSeviceFunctionNew::All_Terrain_Module_00F0005E_NEW_lansheng_L494_2016()
{
    W_ErrorCode iRet = CErrorCode::EC_SUCCESS;
    CSendFrame sendframe;
    CReceiveFrame rfRet;
    W_I16 iKey = 0;
    CBinary binRecive;

    // 确保在继续执行该程序前，已给车辆装配了一个新的模块
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000C044") + "\n" + "\n" + g_GetTxtStringFormHtml("0x80001618"), DF_MB_OKCANCEL, DT_LEFT);
    if (DF_IDCANCEL == iKey)
        return iRet;

    //判断电压，系统稳定运行
    iKey = CheckEngineStop(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xF4\x0C\x00\x00\x00\x00", 11), 0x07E8, CBinary("\x01\x00", 2));
    if (iRet)
        return iRet;

    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"));//将点火开关打开

    string strOpenFile = m_stropenfileConfigMenu;
    CJLRStringOperate strOpt;
    strOpt.Replace(strOpenFile, ".ctv", "");
    if ("module_special_X152_2014" == strOpenFile)
        PleaseWait_xS_haveTTL(10000, g_GetTxtStringFormHtml("0x00000066"), g_GetTxtStringFormHtml("0x0000B8FE"));


    // 学习车辆标识号
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x90025FAD"), g_GetTxtStringFormHtml("0x0000C045") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BD33") + "\n" + "\n" + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OKCANCEL, DT_LEFT);
    if (DF_IDCANCEL == iKey)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B8D1"));//操作人员已中止了此应用程序
        return iRet;
    }

    // 通信
    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);
    Sleep(1000);
    EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x92\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x079A);
    EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x92\x08\x02\x10\x03\x00\x00\x00\x00\x00", 11), 0x079A);


    //链路：11位Can500K
    if (m_stropenfileConfigMenu == "module_special_L550_2017.ctv")
    {
        iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x92\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x079A);
        sendframe.SetSendFrame(CBinary("\x10\x03", 2));
        m_rfRet = SendDataComm(sendframe);
        m_pNetLayer->KeepLink(2000, CSendFrame(CBinary("\x3E\x80", 2)));
    }
    else
        iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x92\x08\x02\x10\x03\x00\x00\x00\x00\x00", 11), 0x079A);
    if (iRet)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    rfRet = m_rfRet;
    binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount() < 5)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    if (checkIs7f(m_binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return CErrorCode::EC_ECU_REFUSE;
    }


    //step10
    CVehicleComm ecuInter;
    sendframe.SetSendFrame(CBinary("\x31\x01\x04\x04", 4));
    rfRet = SendDataComm(sendframe);
    if (0 == rfRet.GetByteCount())
    {
        ecuInter.SendReceive(CBinary("\x40\x00\x07\x92\x10\x01", 6));
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关
        return CErrorCode::EC_TIME_OVER;
    }

    m_binRecive = rfRet.GetFirst();
    if (checkIs7f(m_binRecive))
    {
        ecuInter.SendReceive(CBinary("\x40\x00\x07\x92\x10\x01", 6));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关
        return CErrorCode::EC_ECU_REFUSE;
    }

    if (m_binRecive.GetByteCount() < 4
        || m_binRecive[0] != 0x71
        || m_binRecive[1] != 0x01
        || m_binRecive[2] != 0x04
        || m_binRecive[3] != 0x04)
    {
        ecuInter.SendReceive(CBinary("\x40\x00\x07\x92\x10\x01", 6));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000C045"), g_GetTxtStringFormHtml("0x0000B21F"));//失败
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关
        return iRet;
    }

    //step11
    PleaseWait_xS_haveTTL(30000, g_GetTxtStringFormHtml("0x0000C045,0x0000B09D"));
    ecuInter.SendReceive(CBinary("\x40\x00\x07\x92\x10\x01", 6));
    m_pNetLayer->KeepLink(0);//关闭链路保持
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000C045"), g_GetTxtStringFormHtml("0x0000C045") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002A16C") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OK, DT_LEFT);//学习车辆标识号，完成
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关

    //step12~
    if (m_stropenfileConfigMenu == "module_special_L550_2017.ctv")
    {
        PleaseWait_xS_haveTTL(1000, g_GetTxtStringFormHtml("0x0000B09D"), g_GetTxtStringFormHtml("0x0000B8FF"));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B8FF"), g_GetTxtStringFormHtml("0x0000B0A3"));//完成
        iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x92\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x079A);
        sendframe.SetSendFrame(CBinary("\x19\x02\x0C", 3));
        rfRet = SendDataComm(sendframe);
        return iRet;
    }

    // 读故障码，清故障码
    iRet = CheckSysDTCNub_model2(PTL_CAN_11_500K, PTL_CAN_11_125K, CBinary("\x07\x92\x08\x03\x19\x02\x0C\x00\x00\x00\x00", 11), CBinary("\x07\xDF\x08\x04\x14\xFF\xFF\xFF\x00\x00\x00", 11), CBinary("\x07\xDF\x08\x03\x19\x02\x0C\x00\x00\x00\x00", 11), 0x079A);

    return iRet;
}



// 平视显示器冷却风扇模块
W_ErrorCode CSeviceFunctionNew::HeadUpDisplay_Cooling_Module_00F0005E_NEW_lansheng_L494_2016()
{
    W_ErrorCode iRet = CErrorCode::EC_SUCCESS;
    CSendFrame sendframe;
    CReceiveFrame rfRet;
    W_I16 iKey = 0;
    string strOpenFile = m_stropenfileConfigMenu;

    // 确保在继续执行该程序前，已给车辆装配了一个新的模块
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000C044") + "\n" + "\n" + g_GetTxtStringFormHtml("0x80001618"), DF_MB_OKCANCEL, DT_LEFT);
    if (DF_IDCANCEL == iKey)
        return iRet;

    // 判断文件和系统电压
    iKey = CheckEngineStop(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xF4\x0C\x00\x00\x00\x00", 11), 0x07E8, CBinary("\x01\x00", 2));
    if (iRet)
        return iRet;

    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"));//将点火开关打开
    PleaseWait_xS_haveTTL(10000, g_GetTxtStringFormHtml("0x00000066"), g_GetTxtStringFormHtml("0x0000B8FE,0x9001283E")); // 进度条5s，模块初始化

    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"));//将点火开关打开

    if ("module_special_L320_2010" == strOpenFile)
        // 执行读取故障码的功能
        iRet = ClearSysDTC_Programme_538(PTL_CAN_11_500K, CBinary("\x07\x64\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x076C);
    else
        iRet = CheckSysDTCNub_model1(PTL_CAN_11_500K, PTL_CAN_11_125K, CBinary("\x07\x64\x08\x03\x19\x02\x0C\x00\x00\x00\x00", 11), CBinary("\x07\xDF\x08\x04\x14\xFF\xFF\xFF\x00\x00\x00", 11), 0x076C);

    if ("module_special_L320_2010" == strOpenFile
        || "module_special_L320_2012" == strOpenFile
        || "module_special_X351_2013" == strOpenFile
        || "module_special_L322_2010" == strOpenFile
        || "module_special_X150_2010" == strOpenFile)
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"));

    return iRet;
}



// 速度控制模块
W_ErrorCode CSeviceFunctionNew::Speed_control_NEW_lansheng_L494_2016()
{
    W_ErrorCode iRet = CErrorCode::EC_SUCCESS;
    CSendFrame sendframe;
    CReceiveFrame rfRet;
    W_I16 iKey = 0;
    CBinary binRecive;
    W_U32 uStandValue1 = 0x981BB4;
    W_I32 P_table1[3][8] = { {0x5161E6,0x0FCD01,0xB7A7DF,0xC35062,0x2ABF09,0xFD42DF,0x579A63,0x07091B},
    {0xA72EFA,0xE67038,0x60FEAD,0x68C097,0x7D8FE2,0x522319,0x0848EF,0xB8AC12},
    {0xD975F9,0x1FF42F,0x92E682,0x89D3C8,0xBFB84C,0xD75C55,0x079576,0xA22520} };

    W_U32 uStandValue2 = 0x16EA79;
    W_I32 P_table2[3][8] = { {0xDF902B,0x813CCC,0x395612,0x4DA1AF,0xA44EC4,0x73B312,0xD96BAE,0x89F8D6},
    {0x29DF37,0x6881F5,0xEE0F60,0xE6315A,0xF37E2F,0xDCD2D4,0x86B922,0x365DDF},
    {0x578434,0x9105E2,0x1C174F,0x072205,0x314981,0x59AD98,0x8964BB,0x2CD4ED} };

    // 确保在继续执行该程序前，已给车辆装配了一个新的模块
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000C044") + "\n" + "\n" + g_GetTxtStringFormHtml("0x80001618"), DF_MB_OKCANCEL, DT_LEFT);
    if (DF_IDCANCEL == iKey)
        return iRet;

    //step2
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"));//将点火开关打开
    PleaseWait_xS_haveTTL(10000, g_GetTxtStringFormHtml("0x00000066,0x9001283E"), g_GetTxtStringFormHtml("0x0000B8FE")); // 初始化进度条  10s
    //对于还未输入车辆标识号的模块，程序要求将车辆标识号作为车辆配置的一部分传输，并写入模块.  如果以前记忆了车辆标识号，本程序将反馈指示未成功操作的状态.  使用该程序无法覆盖以前输入的车辆标识号.
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A61"), g_GetTxtStringFormHtml("0x90025FAD") + "\n" + "\n" +
        g_GetTxtStringFormHtml("0x0000BD33") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OKCANCEL, DT_LEFT);
    if (DF_IDCANCEL == iKey)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("@OprInfo$"), g_GetTxtStringFormHtml("0x0000B8D1"));//操作人员已中止了此应用程序
        return iRet;
    }


    //step3
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000C045"), g_GetTxtStringFormHtml("0x0000B09D"), DF_MB_NOBUTTON); // 请等待
    Sleep(500);
    //链路：11位can500K
    EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x64\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x076C);
    SendDataComm(CBinary("\x22\xF1\x03", 3));
    sendframe.SetSendFrame(CBinary("\x10\x03", 2));
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();

    rfRet = m_rfRet;
    binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount() < 5)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    m_binRecive = CBinary(binRecive.GetBuffer() + 4, binRecive.GetByteCount() - 4);
    if (checkIs7f(m_binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return CErrorCode::EC_ECU_REFUSE;
    }

    string strOpenFile = m_stropenfileConfigMenu;
    CJLRStringOperate strOpt;
    strOpt.Replace(strOpenFile, ".ctv", "");

    //安全访问
    if ("module_special_X250_2010" == strOpenFile || "module_special_X250" == strOpenFile || "module_special_L322_2010" == strOpenFile)
        iRet = SafeLogin_L405_2014_Oil(CBinary("\x27\x01", 2), uStandValue1, P_table1);
    else
        iRet = SafeLogin_L405_2014_Oil(CBinary("\x27\x01", 2), uStandValue2, P_table2);

    if (CErrorCode::EC_ECU_REFUSE == iRet)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000B09F"));//安全访问失败
        return CErrorCode::EC_ECU_REFUSE;
    }
    if (iRet < 0)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }
    //链路保持
    m_pNetLayer->KeepLink(1000, CSendFrame(CBinary("\x3E\x80", 2)));

    //step4
    CVehicleComm ecuInter;
    sendframe.SetSendFrame(CBinary("\x31\x01\x04\x04", 4)); // 发送数据,1-1
    rfRet = SendDataComm(sendframe);
    if (0 == rfRet.GetByteCount())
    {
        ecuInter.SendReceive(CBinary("\x40\x00\x07\x64\x10\x01", 6));
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    m_binRecive = rfRet.GetFirst();
    if (checkIs7f(m_binRecive))
    {
        ecuInter.SendReceive(CBinary("\x40\x00\x07\x64\x10\x01", 6));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return CErrorCode::EC_ECU_REFUSE;
    }

    if (m_binRecive.GetByteCount() < 4  // Req: 07 64 08 04 31 01 04 04 00 00 00
        || m_binRecive[0] != 0x71
        || m_binRecive[1] != 0x01
        || m_binRecive[2] != 0x04
        || m_binRecive[3] != 0x04)
    {
        ecuInter.SendReceive(CBinary("\x40\x00\x07\x64\x10\x01", 6));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000C045"), g_GetTxtStringFormHtml("0x0000B21F"));//失败
        return iRet;
    }

    //step5
    PleaseWait_xS(10000, g_GetTxtStringFormHtml("0x0000C045")); // 学习车辆标识号进度条   30s
    ecuInter.SendReceive(CBinary("\x40\x00\x07\x64\x10\x01", 6));
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000C045"), g_GetTxtStringFormHtml("0x90025FAD") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002A16C")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OK, DT_LEFT);//学习车辆标识号完成

    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x90008087"));//关闭点火开关
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x9000808A"));//将点火开关打开

    // 点火开关打开后，进入读故障码
    //step6
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BEC2"), g_GetTxtStringFormHtml("0x0000BEC8"), DF_MB_NOBUTTON); // 允许进入电子校准
    Sleep(300);

    if ("module_special_L320_2010" == strOpenFile)
        // 执行读取故障码的功能
        iRet = ClearSysDTC_Programme_538(PTL_CAN_11_500K, CBinary("\x07\x64\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x076C);
    else
        iRet = CheckSysDTCNub_model1(PTL_CAN_11_500K, PTL_CAN_11_125K, CBinary("\x07\x64\x08\x03\x19\x02\x0C\x00\x00\x00\x00", 11), CBinary("\x07\xDF\x08\x04\x14\xFF\xFF\xFF\x00\x00\x00", 11), 0x076C);

    if ("module_special_L320_2010" == strOpenFile
        || "module_special_L320_2012" == strOpenFile
        || "module_special_X351_2013" == strOpenFile
        || "module_special_L322_2010" == strOpenFile
        || "module_special_X150_2010" == strOpenFile)
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"));

    //链路：11位can500K
    SendDataComm(CBinary("\x22\xf1\x03", 3));
    SendDataComm(CBinary("\x22\xf1\x03", 3));
    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x64\x08\x02\x10\x03\x00\x00\x00\x00\x00", 11), 0x076C);
    if (iRet)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    rfRet = m_rfRet;
    binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount() < 5)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    m_binRecive = CBinary(binRecive.GetBuffer() + 4, binRecive.GetByteCount() - 4);
    if (checkIs7f(m_binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return CErrorCode::EC_ECU_REFUSE;
    }

    //安全访问
    if ("module_special_X250_2010" == strOpenFile || "module_special_X250" == strOpenFile || "module_special_L322_2010" == strOpenFile)
        iRet = SafeLogin_L405_2014_Oil(CBinary("\x27\x01", 2), uStandValue1, P_table1);  // 57 84 34
    else
        iRet = SafeLogin_L405_2014_Oil(CBinary("\x27\x01", 2), uStandValue2, P_table2);

    if (CErrorCode::EC_ECU_REFUSE == iRet)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000B09F"));//安全访问失败
        return CErrorCode::EC_ECU_REFUSE;
    }
    if (iRet < 0)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }
    //链路保持
    m_pNetLayer->KeepLink(1000, CSendFrame(CBinary("\x3E\x80", 2)));

    //step7
    sendframe.SetSendFrame(CBinary("\x2E\xA2\x2A\x03", 4));  // Req: 07 64 08 04 2E A2 2A 03 00 00 00
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();  // 07 6C 08 03 6E A2 2A 00 00 00 00

    sendframe.SetSendFrame(CBinary("\x2E\xA2\x2B\x00", 4));  //  Req: 07 64 08 04 2E A2 2B 00 00 00 00
    rfRet = SendDataComm(sendframe);
    m_binRecive = rfRet.GetFirst();  // 07 6C 08 03 6E A2 2B 00 00 00 00

    ecuInter.SendReceive(CBinary("\x40\x00\x07\x64\x10\x01", 6));  // Req: 07 64 08 02 10 01 00 00 00 00 00
    if (0 == binRecive.GetByteCount() || 0 == m_binRecive.GetByteCount())
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    if (checkIs7f(binRecive) || checkIs7f(m_binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return CErrorCode::EC_ECU_REFUSE;
    }

    if (binRecive.GetByteCount() != 3  // 0017:07 6C 08 03 6E A2 2A 00 00 00 00
        || m_binRecive.GetByteCount() != 3  // 0018:07 6C 08 03 6E A2 2B 00 00 00 0
        || binRecive[0] != 0x6E
        || binRecive[1] != 0xA2
        || binRecive[2] != 0x2A
        || m_binRecive[0] != 0x6E
        || m_binRecive[1] != 0xA2
        || m_binRecive[2] != 0x2B)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BEC2"), g_GetTxtStringFormHtml("0x0000B0AC"));//测试失败
        return iRet;
    }

    //step8
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BEC2"), g_GetTxtStringFormHtml("0x0000B0A3"));//电子校准状态完成
    PleaseWait_xS(2000, g_GetTxtStringFormHtml("0x0000BEC2,0x9000CF6A"));
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BEC2"), g_GetTxtStringFormHtml("0x0000BEC8,0x0000B0A3"), DF_MB_NOBUTTON); //本程序将令速度控制系统进入校准模式
    m_pNetLayer->KeepLink(0);

    Sleep(200);
    //链路：11位can500K
    SendDataComm(CBinary("\x22\xf1\x03", 3));
    SendDataComm(CBinary("\x22\xf1\x03", 3));
    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x64\x08\x02\x10\x01\x00\x00\x00\x00\x00", 11), 0x076C);  // 进入    
    if (iRet)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    rfRet = m_rfRet;
    binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount() < 5)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    m_binRecive = CBinary(binRecive.GetBuffer() + 4, binRecive.GetByteCount() - 4);
    if (checkIs7f(m_binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return CErrorCode::EC_ECU_REFUSE;
    }

    sendframe.SetSendFrame(CBinary("\x22\xA2\x2A", 3));  // 07 64 08 03 22 A2 2A 00 00 00 00
    rfRet = SendDataComm(sendframe);
    if (0 == rfRet.GetByteCount())
    {
        ecuInter.SendReceive(CBinary("\x40\x00\x07\x64\x10\x01", 6));
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    m_binRecive = rfRet.GetFirst();
    if (checkIs7f(m_binRecive))
    {
        ecuInter.SendReceive(CBinary("\x40\x00\x07\x64\x10\x01", 6));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return CErrorCode::EC_ECU_REFUSE;
    }

    if (m_binRecive.GetByteCount() < 4  // 07 6C 08 04 62 A2 2A 03 00 00 00
        || m_binRecive[0] != 0x62
        || m_binRecive[1] != 0xA2
        || m_binRecive[2] != 0x2A
        || m_binRecive[3] != 0x03)
    {
        ecuInter.SendReceive(CBinary("\x40\x00\x07\x64\x10\x01", 6));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关
        //校准模式程序未能完成        必须调查该问题        问题得到解决后，还可利用设置与配置菜单中单独的速度控制校准应用程序重试该步骤
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000069"), g_GetTxtStringFormHtml("0x0000BE12,0x0000B105,0x0000BE13"));
        return iRet;
    }

    //step09
    sendframe.SetSendFrame(CBinary("\x22\xA2\x2B", 3));  // Req: 07 64 08 03 22 A2 2B 00 00 00 00
    rfRet = SendDataComm(sendframe);
    m_binRecive = rfRet.GetFirst();
    if (0 == rfRet.GetByteCount())
    {
        ecuInter.SendReceive(CBinary("\x40\x00\x07\x64\x10\x01", 6));
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    m_binRecive = rfRet.GetFirst();
    if (checkIs7f(m_binRecive))
    {
        ecuInter.SendReceive(CBinary("\x40\x00\x07\x64\x10\x01", 6));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return CErrorCode::EC_ECU_REFUSE;
    }

    if (m_binRecive.GetByteCount() < 4  // 07 6C 08 04 62 A2 2B 00 00 00 00
        || m_binRecive[0] != 0x62
        || m_binRecive[1] != 0xA2
        || m_binRecive[2] != 0x2B
        || m_binRecive[3] != 0x00)
    {
        ecuInter.SendReceive(CBinary("\x40\x00\x07\x64\x10\x01", 6));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关
        //校准模式程序未能完成        必须调查该问题        问题得到解决后，还可利用设置与配置菜单中单独的速度控制校准应用程序重试该步骤
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000069"), g_GetTxtStringFormHtml("0x0000BE12,0x0000B105,0x0000BE13"));
        return iRet;
    }

    //step10
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BEC2"), g_GetTxtStringFormHtml("0x0000BEC2,0x0000B0A3"));//电子校准完成
    PleaseWait_xS(2000, g_GetTxtStringFormHtml("0x0000B0A3,0x9000CFF6"));
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关

    //step11~15
    if ("module_special_L320_2010" == strOpenFile)
        // 执行读取故障码的功能
        iRet = ClearSysDTC_Programme_538(PTL_CAN_11_500K, CBinary("\x07\x64\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x076C);
    else
        iRet = CheckSysDTCNub_model1(PTL_CAN_11_500K, PTL_CAN_11_125K, CBinary("\x07\x64\x08\x03\x19\x02\x0C\x00\x00\x00\x00", 11), CBinary("\x07\xDF\x08\x04\x14\xFF\xFF\xFF\x00\x00\x00", 11), 0x076C);

    if ("module_special_L320_2010" == strOpenFile
        || "module_special_L320_2012" == strOpenFile
        || "module_special_X351_2013" == strOpenFile
        || "module_special_L322_2010" == strOpenFile
        || "module_special_X150_2010" == strOpenFile)
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011")); //将点火开关打开
    // 完成故障码功能后跳入上方电子校准发送命令
    // 总共读2次故障码   ①：学习车辆标识完成之后 ②：电子校准状态完成之后

    //step16
    //此时 '跟随图标' 应该在闪烁，表示车辆正处于 '维修校准' 状态，并要求进行行驶循环. // 确保黄色图标此时在闪烁
    FxShowMessageBox(g_GetTxtStringFormHtml("0x90000BAA"), g_GetTxtStringFormHtml("0x9001F988") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BEC5")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x90022F90"), DF_MB_OKCANCEL, DT_LEFT);
    if (iKey == DF_IDCANCEL)
    {
        //    校准模式程序未能完成    必须调查该问题        问题得到解决后，还可利用设置与配置菜单中单独的速度控制校准应用程序重试该步骤
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000069"), g_GetTxtStringFormHtml("0x0000BE12,0x0000B105,0x0000BE13"), DF_MB_OK, DT_LEFT);
        return iRet;
    }

    if ("module_special_L320_2010" == strOpenFile
        || "module_special_L320_2012" == strOpenFile
        || "module_special_X351_2013" == strOpenFile
        || "module_special_L322_2010" == strOpenFile
        || "module_special_X150_2010" == strOpenFile)
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关
    // 注意说明+校准说明
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000BEC3,0x0000BECA,0x0000BECB,0x0000BECC,0x0000BECD") + "\n"
        + g_GetTxtStringFormHtml("0x0000BECE,0x0000BECF,0x0000BED0,0x0000BED1,0x0000BED2,0x0000BED3,0x0000BED4") + "\n"
        + g_GetTxtStringFormHtml("0x0000BED5,0x0000BED6,0x0000BED7,0x0000BED8,0x0000BED9,0x900012B4"), DF_MB_OK, DT_LEFT);

    return iRet;

}

// 数字音频广播模块
W_ErrorCode CSeviceFunctionNew::Digital_audio_NEW_lansheng_2016()
{
    W_ErrorCode iRet = CErrorCode::EC_SUCCESS;
    CSendFrame sendframe;
    CReceiveFrame rfRet;
    CVehicleComm ecuInter;
    CBinary binRecive;
    string strVehicle = m_stropenfileConfigMenu;
    CJLRStringOperate strOpt;


    CBinary binDiagID;
    W_U32 uProgID;
    CBinary binSendCmd1;
    CBinary binSendCmd2;

    binDiagID = CBinary("\x07\xA5", 2);
    uProgID = 0x07AD;
    binSendCmd1 = CBinary("\x40\x00\x07\xA5\x31\x02\x03\x00", 8);
    binSendCmd2 = CBinary("\x40\x00\x07\xA5\x10\x01", 6);


    //step1 确保在继续执行该程序前，已给车辆装配了一个新的模块
    iRet = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000004E"), g_GetTxtStringFormHtml("0x0000C044"), DF_MB_OKCANCEL, DT_LEFT);
    if (DF_IDCANCEL == iRet)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000BE88"));
        return iRet;
    }


    //step2~step5
    iRet = CheckEngineStop(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xF4\x0C\x00\x00\x00\x00", 11), 0x07E8, CBinary("\x01,0x00", 2));
    if (iRet)
    {
        return iRet;
    }


    CMessageBoxCtrl::SetBusyStatus(true);
    // 执行诊断命令完成
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000C100"), g_GetTxtStringFormHtml("0x900019A5") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002A16C"), DF_MB_NOBUTTON, DT_LEFT);
    Sleep(500);
    CMessageBoxCtrl::SetBusyStatus(false);


    // 125K
    iRet = EnterSystem(PTL_CAN_11_125K, binDiagID + CBinary("\x08\x03\x22\xf1\x03\x00\x00\x00\x00 ", 9), uProgID);
    sendframe.SetSendFrame(CBinary("\x10\x03", 2));
    rfRet = SendDataComm(sendframe);
    m_binRecive = rfRet.GetFirst();
    if (iRet || m_binRecive.GetByteCount() < 2)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    //send cmd
    sendframe.SetSendFrame(CBinary("\x31\x01\x03\x00\x00\x85", 6));
    rfRet = SendDataComm(sendframe);
    m_binRecive = rfRet.GetFirst();
    if (0 == rfRet.GetByteCount())
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return iRet;
    }
    if (checkIs7f(m_binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return CErrorCode::EC_ECU_REFUSE;
    }
    if (m_binRecive.GetByteCount() < 4
        || m_binRecive[0] != 0x71
        || m_binRecive[1] != 0x01
        || m_binRecive[2] != 0x03
        || m_binRecive[3] != 0x00)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000C100"), g_GetTxtStringFormHtml("0x0000B21F"));
        return iRet;
    }

    sendframe.SetSendFrame(CBinary("\x19\x02\x0C", 3));
    rfRet = SendDataComm(sendframe);
    m_binRecive = rfRet.GetFirst();
    if (m_binRecive.GetByteCount() < 3
        || m_binRecive[0] != 0x59
        || m_binRecive[1] != 0x02
        || m_binRecive[2] != 0x0C)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000C100"), g_GetTxtStringFormHtml("0x0000B21F"));
        return iRet;
    }


    ecuInter.SendReceive(binSendCmd1);
    ecuInter.SendReceive(binSendCmd2);

    // 点火打开
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"));
    // 模块初始化
    PleaseWait_xS(5000, g_GetTxtStringFormHtml("0x00000066"));
    // 点火关闭
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));

    // 故障码
    iRet = CheckSysDTCNub_model2(PTL_CAN_11_500K, PTL_CAN_11_125K, binDiagID + CBinary("\x08\x03\x19\x02\x0C\x00\x00\x00\x00", 9), CBinary("\x07\xA5\x08\x04\x14\xFF\xFF\xFF\x00\x00\x00", 11), CBinary("\x07\xA5\x08\x03\x19\x02\x0C\x00\x00\x00\x00", 11), uProgID);
    // iRet = ClearSysDTC_Programme_538(PTL_CAN_11_125K,CBinary("\x07\xA5\x08\x03\x19\x02\x0C\x00\x00\x00\x00",11),0x07AD);
    return iRet;


}



// 前控制/显示界面模块(高水平显示正面)
W_ErrorCode CSeviceFunctionNew::Front_control_display_NEW_lansheng_2016()
{
    W_ErrorCode iRet = CErrorCode::EC_SUCCESS;
    W_I16 iKey = 0;

    CSendFrame sendframe;
    CReceiveFrame rfRet;
    CBinary binRecive;

    //step01 确保在继续执行该程序前，已给车辆装配了一个新的模块
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000C044") + "\n" + "\n" + g_GetTxtStringFormHtml("0x80001618"), DF_MB_OKCANCEL, DT_LEFT);
    if (iKey == DF_IDCANCEL)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B8D1"), DF_MB_ANYKEYRETURN);//操作人员已中止了此应用程序.
        return 0;
    }

    //step02 点火打开、发动机、电压、点火关闭   500K
    iRet = CheckEngineStop(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xF4\x0C\x00\x00\x00\x00", 11), 0x07E8, CBinary("\x01\x00", 2));
    if (iRet != 0)
        return 0;


    // 125K
    CMessageBoxCtrl::SetBusyStatus(true);
    // 执行诊断命令完成
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000C100"), g_GetTxtStringFormHtml("0x900019A5") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002A16C"), DF_MB_NOBUTTON, DT_LEFT);
    Sleep(1000);
    CMessageBoxCtrl::SetBusyStatus(false);


    // 点火打开
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"));

    // 模块初始化
    PleaseWait_xS_haveTTL(5000, g_GetTxtStringFormHtml("0x00000066"), g_GetTxtStringFormHtml("0x0000B8FE"));

    // 学习车辆标识号
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000C045"), g_GetTxtStringFormHtml("0x90025FAD") + "\n" + "\n" +
        g_GetTxtStringFormHtml("0x0000BD33") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OKCANCEL, DT_LEFT);
    if (iKey == DF_IDCANCEL)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B8D1"), DF_MB_ANYKEYRETURN);//操作人员已中止了此应用程序.
        return 0;
    }
    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通信中
    Sleep(800);

    EnterSystem(PTL_CAN_11_125K, CBinary("\x07\xA5\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x07AD);
    SendDataComm(CBinary("\x22\xF1\x03", 3));
    sendframe.SetSendFrame(CBinary("\x10\x03", 2));
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    if (rfRet.GetByteCount() == 0)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return iRet;
    }
    if (binRecive.GetByteCount() < 2)
    {
        if (checkIs7f(m_binRecive))
        {
            CMessageBoxCtrl::SetBusyStatus(false);
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
            return CErrorCode::EC_ECU_REFUSE;
        }
    }

    sendframe.SetSendFrame(CBinary("\x31\x01\x04\x04", 4));  // 07 A5 08 04 31 01 04 04 00 00 00
    rfRet = SendDataComm(sendframe);
    if (rfRet.GetByteCount() == 0)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }
    if (checkIs7f(rfRet))
    {
        FxShowMessageBox(FxGetStdString(STD_TTL_MSG_INFORMATION), g_GetTxtStringFormHtml("0x0000BE50"), DF_MB_BACK);
        return iRet;
    }
    CBinary binAns = rfRet.GetFirst();
    if (binAns.GetByteCount() < 4 || (binAns[0] != 0x71 || binAns[1] != 0x01 || binAns[2] != 0x04 || binAns[3] != 0x04))
    {
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        if (rfRet.GetByteCount() == 0)
        {
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_TIME_OVER;
        }
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B21F"), DF_MB_ANYKEYRETURN);//失败
        return 0;
    }

    m_pNetLayer->KeepLink(3000, CSendFrame(CBinary("\x3E\x80", 2)));//链路保持
    PleaseWait_xS_haveTTL(5000, g_GetTxtStringFormHtml("0x0000B09D"), g_GetTxtStringFormHtml("0x0000C045"));//学习车辆标识号-请等待
    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通信中
    Sleep(800);
    SendDataComm(CBinary("\x10\x01", 2));
    m_pNetLayer->KeepLink(0);

    // 学习车辆标识号-完成
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000C045"), g_GetTxtStringFormHtml("0x90025FAD") + "\n" + "\n" +
        g_GetTxtStringFormHtml("0x9002A16C") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OK, DT_LEFT);

    EnterSystem(PTL_CAN_11_125K, CBinary("\x07\xA5\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x07AD);
    SendDataComm(CBinary("\x22\xF1\x03", 3));
    sendframe.SetSendFrame(CBinary("\x10\x03", 2));
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    if (rfRet.GetByteCount() == 0)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return iRet;
    }
    if (binRecive.GetByteCount() < 2)
    {
        if (checkIs7f(m_binRecive))
        {
            CMessageBoxCtrl::SetBusyStatus(false);
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
            return CErrorCode::EC_ECU_REFUSE;
        }
    }

    sendframe.SetSendFrame(CBinary("\x31\x01\x04\x0E\x1F", 5));  // 07 A5 08 05 31 01 04 0E 1F 00 00
    rfRet = SendDataComm(sendframe);
    if (rfRet.GetByteCount() == 0)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }
    if (checkIs7f(rfRet))
    {
        FxShowMessageBox(FxGetStdString(STD_TTL_MSG_INFORMATION), g_GetTxtStringFormHtml("0x0000BE50"), DF_MB_BACK);
        return iRet;
    }
    binAns = rfRet.GetFirst();
    if (binAns.GetByteCount() < 5 || (binAns[0] != 0x71 || binAns[1] != 0x01 || binAns[2] != 0x04 || binAns[3] != 0x0E || binAns[4] != 0x1F))
    {
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        if (rfRet.GetByteCount() == 0)
        {
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_TIME_OVER;
        }
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B21F"), DF_MB_ANYKEYRETURN);//失败
        return 0;
    }


    PleaseWait_xS_haveTTL(5000, g_GetTxtStringFormHtml("0x0000BCD9"), g_GetTxtStringFormHtml("0x0000C40D"));//重置WIFI热点
    SendDataComm(CBinary("\x10\x01", 2));

    // 点火关闭
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));

    //step07 故障码
    iRet = CheckSysDTCNub_model2(PTL_CAN_11_500K, PTL_CAN_11_125K, CBinary("\x07\xA5\x08\x03\x19\x02\x0C\x00\x00\x00\x00", 9), CBinary("\x07\xA5\x08\x04\x14\xFF\xFF\xFF\x00\x00\x00", 11), CBinary("\x07\xA5\x08\x03\x19\x02\x0C\x00\x00\x00\x00", 11), 0x07AD);

    return iRet;

}



// 前部控制接口模块(取暖，通风和空调控制)
W_ErrorCode CSeviceFunctionNew::FCIM_NEW_lansheng_2016()
{
    W_ErrorCode iRet = CErrorCode::EC_SUCCESS;
    W_I16 iKey = 0;

    CSendFrame sendframe;
    CReceiveFrame rfRet;
    CBinary binRecive;

    // 确保在继续执行该程序前，已给车辆装配了一个新的模块
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000C044") + "\n" + "\n" + g_GetTxtStringFormHtml("0x80001618"), DF_MB_OKCANCEL, DT_LEFT);
    if (iKey == DF_IDCANCEL)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B8D1"), DF_MB_ANYKEYRETURN);//操作人员已中止了此应用程序.
        return iRet;
    }

    // 点火打开、发动机、电压、点火关闭  500K
    iRet = CheckEngineStop(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xF4\x0C\x00\x00\x00\x00", 11), 0x07E8, CBinary("\x01\x00", 2));
    if (iRet)
        return iRet;

    // 点火打开
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"));

    // 模块在初始化，请稍候
    PleaseWait_xS_haveTTL(5000, g_GetTxtStringFormHtml("0x00000066"), g_GetTxtStringFormHtml("0x0000B8FE"));

    while (1)
    {
        // 学习车辆标识号
        iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000C045"), g_GetTxtStringFormHtml("0x90025FAD") + "\n" + "\n" +
            g_GetTxtStringFormHtml("0x0000BD33") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OKCANCEL, DT_LEFT);
        if (iKey == DF_IDCANCEL)
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B8D1"), DF_MB_ANYKEYRETURN);//操作人员已中止了此应用程序.
            return 0;
        }
        FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通讯中
        Sleep(800);


        EnterSystem(PTL_CAN_11_125K, CBinary("\x07\xA7\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x07AF);
        SendDataComm(CBinary("\x22\xF1\x03", 3));
        sendframe.SetSendFrame(CBinary("\x10\x03", 2));
        rfRet = SendDataComm(sendframe);
        binRecive = rfRet.GetFirst();
        if (binRecive.GetByteCount() < 2)
        {
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_TIME_OVER;
        }
        if (checkIs7f(binRecive))
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
            return CErrorCode::EC_ECU_REFUSE;
        }

        sendframe.SetSendFrame(CBinary("\x31\x01\x04\x04", 4));
        rfRet = SendDataComm(sendframe);
        m_binRecive = rfRet.GetFirst();
        if (m_binRecive.GetByteCount() > 3
            && 0x71 == m_binRecive[0]
            && 0x01 == m_binRecive[1]
            && 0x04 == m_binRecive[2]
            && 0x04 == m_binRecive[3])
        {
            m_pNetLayer->KeepLink(3000, CSendFrame(CBinary("\x3E\x80", 2)));//链路保持
            PleaseWait_xS_haveTTL(8000, g_GetTxtStringFormHtml("0x0000B09D"), g_GetTxtStringFormHtml("0x0000C045"));//学习车辆标识号-请等待
            FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通信中
            Sleep(800);
            SendDataComm(CBinary("\x10\x01", 2));
            m_pNetLayer->KeepLink(0);

            break;//跳出while (1)
        }
        m_pNetLayer->KeepLink(1000, CSendFrame(CBinary("\x3E\x80", 2)));//链路保持

        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        if (0 == m_binRecive.GetByteCount())
        {
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_TIME_OVER;
        }

        if (checkIs7f(m_binRecive))
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
            return CErrorCode::EC_ECU_REFUSE;
        }

    }

    // 学习车辆标识号-完成
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000C045"), g_GetTxtStringFormHtml("0x90025FAD") + "\n" + "\n" +
        g_GetTxtStringFormHtml("0x9002A16C") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OK, DT_LEFT);

    //step07 点火关闭
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));

    //step08 故障码
    iRet = CheckSysDTCNub_model1(PTL_CAN_11_125K, PTL_CAN_11_500K, CBinary("\x07\xA5\x08\x03\x19\x02\x0C\x00\x00\x00\x00", 11), CBinary("\x07\xA5\x08\x04\x14\xFF\xFF\xFF\x00\x00\x00", 11), 0x07AD);

    return iRet;

}



// 前部控制接口模块B
W_ErrorCode CSeviceFunctionNew::Front_control_B_NEW_lansheng_2016()
{
    W_ErrorCode iRet = CErrorCode::EC_SUCCESS;
    W_I16 iKey = 0;

    CSendFrame sendframe;
    CReceiveFrame rfRet;
    CBinary binRecive;

    // 确保在继续执行该程序前，已给车辆装配了一个新的模块
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000C044") + "\n" + "\n" + g_GetTxtStringFormHtml("0x80001618"), DF_MB_OKCANCEL, DT_LEFT);
    if (iKey == DF_IDCANCEL)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B8D1"), DF_MB_ANYKEYRETURN);//操作人员已中止了此应用程序.
        return iRet;
    }

    // 点火打开、发动机、电压、点火关闭  500K
    iRet = CheckEngineStop(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xF4\x0C\x00\x00\x00\x00", 11), 0x07E8, CBinary("\x01\x00", 2));
    if (iRet)
        return iRet;

    // 点火打开
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"));

    // 模块在初始化，请稍候
    PleaseWait_xS_haveTTL(5000, g_GetTxtStringFormHtml("0x00000066"), g_GetTxtStringFormHtml("0x0000B8FE"));


    // 学习车辆标识号
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000C045"), g_GetTxtStringFormHtml("0x90025FAD") + "\n" + "\n" +
        g_GetTxtStringFormHtml("0x0000BD33") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OKCANCEL, DT_LEFT);
    if (iKey == DF_IDCANCEL)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B8D1"), DF_MB_ANYKEYRETURN);//操作人员已中止了此应用程序.
        return 0;
    }
    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通讯中
    Sleep(800);

    while (1)
    {
        EnterSystem(PTL_CAN_11_125K, CBinary("\x07\xA0\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x07A8);
        SendDataComm(CBinary("\x22\xF1\x03", 3));
        sendframe.SetSendFrame(CBinary("\x10\x03", 2));
        rfRet = SendDataComm(sendframe);
        binRecive = rfRet.GetFirst();
        if (binRecive.GetByteCount() < 2)
        {
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_TIME_OVER;
        }
        if (checkIs7f(binRecive))
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
            return CErrorCode::EC_ECU_REFUSE;
        }

        sendframe.SetSendFrame(CBinary("\x31\x01\x04\x04", 4));
        rfRet = SendDataComm(sendframe);
        m_binRecive = rfRet.GetFirst();
        if (m_binRecive.GetByteCount() > 3
            && 0x71 == m_binRecive[0]
            && 0x01 == m_binRecive[1]
            && 0x04 == m_binRecive[2]
            && 0x04 == m_binRecive[3])
        {
            m_pNetLayer->KeepLink(3000, CSendFrame(CBinary("\x3E\x80", 2)));//链路保持
            PleaseWait_xS_haveTTL(8000, g_GetTxtStringFormHtml("0x0000B09D"), g_GetTxtStringFormHtml("0x0000C045"));//学习车辆标识号-请等待
            FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通信中
            Sleep(800);
            SendDataComm(CBinary("\x10\x01", 2));
            m_pNetLayer->KeepLink(0);

            break;//跳出while (1)
        }
        m_pNetLayer->KeepLink(1000, CSendFrame(CBinary("\x3E\x80", 2)));//链路保持

        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        if (0 == m_binRecive.GetByteCount())
        {
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_TIME_OVER;
        }

        if (checkIs7f(m_binRecive))
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
            return CErrorCode::EC_ECU_REFUSE;
        }
    }


    // 学习车辆标识号-完成
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000C045"), g_GetTxtStringFormHtml("0x90025FAD") + "\n" + "\n" +
        g_GetTxtStringFormHtml("0x9002A16C") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OK, DT_LEFT);

    //step07 点火关闭
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));

    //step08 故障码
    iRet = CheckSysDTCNub_model1(PTL_CAN_11_125K, PTL_CAN_11_500K, CBinary("\x07\xA5\x08\x03\x19\x02\x0C\x00\x00\x00\x00", 11), CBinary("\x07\xA5\x08\x04\x14\xFF\xFF\xFF\x00\x00\x00", 11), 0x07AD);

    return iRet;


}



// 前部控制接口模块C(前音频控制面板)
W_ErrorCode CSeviceFunctionNew::Front_control_C_NEW_lansheng_2016()
{
    W_ErrorCode iRet = CErrorCode::EC_SUCCESS;
    W_I16 iKey = 0;

    CSendFrame sendframe;
    CReceiveFrame rfRet;
    CBinary binRecive;

    // 确保在继续执行该程序前，已给车辆装配了一个新的模块
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000C044") + "\n" + "\n" + g_GetTxtStringFormHtml("0x80001618"), DF_MB_OKCANCEL, DT_LEFT);
    if (iKey == DF_IDCANCEL)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B8D1"), DF_MB_ANYKEYRETURN);//操作人员已中止了此应用程序.
        return iRet;
    }

    // 点火打开、发动机、电压、点火关闭  500K
    iRet = CheckEngineStop(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xF4\x0C\x00\x00\x00\x00", 11), 0x07E8, CBinary("\x01\x00", 2));
    if (iRet)
        return iRet;

    // 点火打开
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"));

    // 模块在初始化，请稍候
    PleaseWait_xS_haveTTL(5000, g_GetTxtStringFormHtml("0x00000066"), g_GetTxtStringFormHtml("0x0000B8FE"));


    // 学习车辆标识号
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000C045"), g_GetTxtStringFormHtml("0x90025FAD") + "\n" + "\n" +
        g_GetTxtStringFormHtml("0x0000BD33") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OKCANCEL, DT_LEFT);
    if (iKey == DF_IDCANCEL)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B8D1"), DF_MB_ANYKEYRETURN);//操作人员已中止了此应用程序.
        return 0;
    }
    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通讯中
    Sleep(800);

    while (1)
    {
        EnterSystem(PTL_CAN_11_125K, CBinary("\x07\xA1\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x07A9);
        SendDataComm(CBinary("\x22\xF1\x03", 3));
        sendframe.SetSendFrame(CBinary("\x10\x03", 2));
        rfRet = SendDataComm(sendframe);
        binRecive = rfRet.GetFirst();
        if (binRecive.GetByteCount() < 2)
        {
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_TIME_OVER;
        }
        if (checkIs7f(binRecive))
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
            return CErrorCode::EC_ECU_REFUSE;
        }

        sendframe.SetSendFrame(CBinary("\x31\x01\x04\x04", 4));
        rfRet = SendDataComm(sendframe);
        m_binRecive = rfRet.GetFirst();
        if (m_binRecive.GetByteCount() > 3
            && 0x71 == m_binRecive[0]
            && 0x01 == m_binRecive[1]
            && 0x04 == m_binRecive[2]
            && 0x04 == m_binRecive[3])
        {
            m_pNetLayer->KeepLink(3000, CSendFrame(CBinary("\x3E\x80", 2)));//链路保持
            PleaseWait_xS_haveTTL(8000, g_GetTxtStringFormHtml("0x0000B09D"), g_GetTxtStringFormHtml("0x0000C045"));//学习车辆标识号-请等待
            FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通信中
            Sleep(800);
            SendDataComm(CBinary("\x10\x01", 2));
            m_pNetLayer->KeepLink(0);

            break;//跳出while (1)
        }
        m_pNetLayer->KeepLink(1000, CSendFrame(CBinary("\x3E\x80", 2)));//链路保持

        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        if (0 == m_binRecive.GetByteCount())
        {
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_TIME_OVER;
        }

        if (checkIs7f(m_binRecive))
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
            return CErrorCode::EC_ECU_REFUSE;
        }
    }


    // 学习车辆标识号-完成
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000C045"), g_GetTxtStringFormHtml("0x90025FAD") + "\n" + "\n" +
        g_GetTxtStringFormHtml("0x9002A16C") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OK, DT_LEFT);

    //step07 点火关闭
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));

    //step08 故障码
    iRet = CheckSysDTCNub_model1(PTL_CAN_11_125K, PTL_CAN_11_500K, CBinary("\x07\xA5\x08\x03\x19\x02\x0C\x00\x00\x00\x00", 11), CBinary("\x07\xA5\x08\x04\x14\xFF\xFF\xFF\x00\x00\x00", 11), 0x07AD);

    return iRet;


}



// 导航控制模块
W_ErrorCode CSeviceFunctionNew::Navigation_control_NEW_lansheng_L494_2016()
{
    W_ErrorCode iRet = CErrorCode::EC_SUCCESS;
    W_I16 iKey;

    CSendFrame sendframe;
    CReceiveFrame rfRet;
    CVehicleComm ecuInter;
    CBinary binRecive;


    // 确保在继续执行该程序前，已给车辆装配了一个新的模块
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000C044") + "\n" + "\n" + g_GetTxtStringFormHtml("0x80001618"), DF_MB_OKCANCEL, DT_LEFT);
    if (iKey == DF_IDCANCEL)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B8D1"), DF_MB_ANYKEYRETURN);//操作人员已中止了此应用程序.
        return iRet;
    }

    // 点火打开、发动机、电压、点火关闭
    iRet = CheckEngineStop(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xF4\x0C\x00\x00\x00\x00", 11), 0x07E8, CBinary("\x01\x00", 2));
    if (iRet)
    {
        return iRet;
    }

    // 125K
    CMessageBoxCtrl::SetBusyStatus(true);
    // 执行诊断命令完成
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000C100"), g_GetTxtStringFormHtml("0x900019A5") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002A16C"), DF_MB_NOBUTTON, DT_LEFT);
    Sleep(500);
    CMessageBoxCtrl::SetBusyStatus(false);

    // 点火打开
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"));

    // 模块初始化
    PleaseWait_xS(15000, g_GetTxtStringFormHtml("0x00000066"));

    // 学习车辆标识号
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000C045"), g_GetTxtStringFormHtml("0x90025FAD") + "\n" + "\n" +
        g_GetTxtStringFormHtml("0x0000BD33") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OKCANCEL, DT_LEFT);
    if (iKey == DF_IDCANCEL)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B8D1"), DF_MB_ANYKEYRETURN);//操作人员已中止了此应用程序.
        return 0;
    }

    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通讯中
    Sleep(800);

    EnterSystem(PTL_CAN_11_125K, CBinary("\x07\x35\x08\x03\x22\xF1\x03\x00\x00\x00\x00 ", 11), 0x073D);
    SendDataComm(CBinary("\x22\xF1\x03", 3));
    sendframe.SetSendFrame(CBinary("\x10\x03", 2));
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount() < 2)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }
    if (checkIs7f(m_binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return CErrorCode::EC_ECU_REFUSE;
    }

    //send cmd
    sendframe.SetSendFrame(CBinary("\x31\x01\x04\x04", 4));
    rfRet = SendDataComm(sendframe);
    m_binRecive = rfRet.GetFirst();
    if (0 == rfRet.GetByteCount())
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return iRet;
    }
    if (checkIs7f(m_binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return CErrorCode::EC_ECU_REFUSE;
    }
    if (m_binRecive.GetByteCount() < 4
        || m_binRecive[0] != 0x71
        || m_binRecive[1] != 0x01
        || m_binRecive[2] != 0x04
        || m_binRecive[3] != 0x04)
    {
        ecuInter.SendReceive(CBinary("\x40\x00\x07\x35\x10\x01", 6));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000C045"), g_GetTxtStringFormHtml("0x0000B21F"));//学习车辆标识号-失败
        return iRet;
    }
    m_pNetLayer->KeepLink(3000, CSendFrame(CBinary("\x3E\x80", 2)));//链路保持
    PleaseWait_xS_haveTTL(8000, g_GetTxtStringFormHtml("0x0000B09D"), g_GetTxtStringFormHtml("0x0000C045"));//学习车辆标识号-请等待
    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通信中
    Sleep(800);
    ecuInter.SendReceive(CBinary("\x40\x00\x07\x35\x10\x01", 6));
    m_pNetLayer->KeepLink(0);

    // 学习车辆标识号-完成
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000C045"), g_GetTxtStringFormHtml("0x90025FAD") + "\n" + "\n" +
        g_GetTxtStringFormHtml("0x9002A16C") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OK, DT_LEFT);

    // 随需自检模式
    iRet = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B8FF"), g_GetTxtStringFormHtml("0x9001537C") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9001C263")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OKCANCEL, DT_LEFT);
    if (DF_IDCANCEL == iRet)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000BE88"));//操作人员已中止了此应用程序
        return iRet;
    }

    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通讯中
    Sleep(800);

    EnterSystem(PTL_CAN_11_125K, CBinary("\x07\x35\x08\x03\x22\xF1\x03\x00\x00\x00\x00 ", 11), 0x073D);
    SendDataComm(CBinary("\x22\xF1\x03", 3));
    sendframe.SetSendFrame(CBinary("\x10\x03", 2));
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount() < 2)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }
    if (checkIs7f(binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return CErrorCode::EC_ECU_REFUSE;
    }

    //send cmd
    sendframe.SetSendFrame(CBinary("\x31\x01\x02\x02", 4));
    rfRet = SendDataComm(sendframe);
    m_binRecive = rfRet.GetFirst();
    if (0 == rfRet.GetByteCount())
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return iRet;
    }
    if (m_binRecive.GetByteCount() < 4
        || m_binRecive[0] != 0x71
        || m_binRecive[1] != 0x01
        || m_binRecive[2] != 0x02
        || m_binRecive[3] != 0x02)
    {
        ecuInter.SendReceive(CBinary("\x40\x00\x07\x35\x10\x01", 6));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B8FF"), g_GetTxtStringFormHtml("0x0000B982"));
        return iRet;
    }


    sendframe.SetSendFrame(CBinary("\x31\x03\x02\x02", 4));
    rfRet = SendDataComm(sendframe);
    m_binRecive = rfRet.GetFirst();
    if (0 == rfRet.GetByteCount())
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return iRet;
    }
    if (m_binRecive.GetByteCount() < 4
        || m_binRecive[0] != 0x71
        || m_binRecive[1] != 0x03
        || m_binRecive[2] != 0x02
        || m_binRecive[3] != 0x02)
    {
        ecuInter.SendReceive(CBinary("\x40\x00\x07\x35\x10\x01", 6));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B8FF"), g_GetTxtStringFormHtml("0x0000B982"));
        return iRet;
    }

    m_pNetLayer->KeepLink(3000, CSendFrame(CBinary("\x3E\x80", 2)));//链路保持
    PleaseWait_xS_haveTTL(8000, g_GetTxtStringFormHtml("0x0000B09D"), g_GetTxtStringFormHtml("0x0000B8FF"));//随需自检模式-请等待
    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通信中
    Sleep(800);
    ecuInter.SendReceive(CBinary("\x40\x00\x07\x35\x10\x01", 6));
    m_pNetLayer->KeepLink(0);

    // 随需自检模式-完成
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B8FF"), g_GetTxtStringFormHtml("0x0000B8FF") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002A16C")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OK, DT_LEFT);


    // 点火关闭
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));

    // 故障码
    iRet = ClearSysDTC_Programme_538(PTL_CAN_11_125K, CBinary("\x07\x35\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x073D);

    return iRet;


}











// 换挡模块
W_ErrorCode CSeviceFunctionNew::Gear_shift_NEW_lansheng_L494_2016()
{
    W_ErrorCode iRet = CErrorCode::EC_SUCCESS;
    CSendFrame sendframe;
    CReceiveFrame rfRet;
    CBinary safeCMD = CBinary("\x27\x03", 2);


    // 确保在继续执行该程序前，已给车辆装配了一个新的模块
    W_I16 iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000C044") + "\n" + "\n" + g_GetTxtStringFormHtml("0x80001618"), DF_MB_OKCANCEL, DT_LEFT);
    if (DF_IDCANCEL == iKey)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B8D1"));//操作人员已中止了次应用程序
        return iRet;
    }

    //step2~6
    iKey = CheckEngineStop(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xF4\x0C\x00\x00\x00\x00", 11), 0x07E8, CBinary("\x01\x00", 2));

    //step7
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"));//将点火开关打开
    PleaseWait_xS_haveTTL(10000, g_GetTxtStringFormHtml("0x00000066"), g_GetTxtStringFormHtml("0x0000B8FE"));//延时10s

    //对于还未输入车辆标识号的模块，程序要求将车辆标识号作为车辆配置的一部分传输，并写入模块.  如果以前记忆了车辆标识号，本程序将反馈指示未成功操作的状态.  使用该程序无法覆盖以前输入的车辆标识号.
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A61"), g_GetTxtStringFormHtml("0x90025FAD") + "\n" + "\n" +
        g_GetTxtStringFormHtml("0x0000BD33") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OKCANCEL, DT_LEFT);
    if (DF_IDCANCEL == iKey)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("@OprInfo$"), g_GetTxtStringFormHtml("0x0000B8D1"));//操作人员已中止了此应用程序
        return iRet;
    }

    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);
    Sleep(1000);

    //链路：11位can500K

    EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x32\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x073A);
    SendDataComm(CBinary("\x22\xf1\x03", 3));
    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x32\x08\x02\x10\x03\x00\x00\x00\x00\x00", 11), 0x073A);

    if (iRet)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    rfRet = m_rfRet;
    CBinary binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount() < 5)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    m_binRecive = CBinary(binRecive.GetBuffer() + 4, binRecive.GetByteCount() - 4);
    if (checkIs7f(m_binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return iRet;
    }

    // 安全访问
    iRet = SafeLogin_Standard3(CBinary("\x27\x03", 2), 0xACD51C);
    if (CErrorCode::EC_ECU_REFUSE == iRet)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000B09F"));//安全访问失败
        return iRet;
    }

    if (iRet < 0)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }
    m_pNetLayer->KeepLink(1000, CSendFrame(CBinary("\x3E\x00", 2)));    //链路保持


    //step10
    CVehicleComm ecuInter;
    sendframe.SetSendFrame(CBinary("\x31\x01\x04\x04", 4));
    rfRet = SendDataComm(sendframe);
    if (0 == rfRet.GetByteCount())
    {
        ecuInter.SendReceive(CBinary("\x40\x00\x07\x32\x10\x01", 6));
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    m_binRecive = rfRet.GetFirst();
    if (checkIs7f(m_binRecive))
    {
        ecuInter.SendReceive(CBinary("\x40\x00\x07\x32\x10\x01", 6));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return iRet;
    }

    if (m_binRecive.GetByteCount() < 4
        || m_binRecive[0] != 0x71
        || m_binRecive[1] != 0x01
        || m_binRecive[2] != 0x04
        || m_binRecive[3] != 0x04)
    {
        ecuInter.SendReceive(CBinary("\x40\x00\x07\x32\x10\x01", 6));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000C045"), g_GetTxtStringFormHtml("0x0000B21F"));//失败
        return iRet;
    }

    //step11
    PleaseWait_xS(10000);//延时30s
    ecuInter.SendReceive(CBinary("\x40\x00\x07\x32\x10\x01", 6));
    m_pNetLayer->KeepLink(0);//断开链路

    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000C045"), g_GetTxtStringFormHtml("0x90025FAD") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002A16C")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OK, DT_LEFT);//学习车辆标识号完成
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"));//将点火开关打开

    //执行随需自检将会使相关控制模块执行预定义的测试，这将导致任何相关的故障代码被记录（如果存在故障）
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B8FF"), g_GetTxtStringFormHtml("0x9001537C") + "\n" + "\n"
        + g_GetTxtStringFormHtml("0x9001C263") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OKCANCEL, DT_LEFT);
    if (DF_IDCANCEL == iKey)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B8D1"));//操作人员已中止了次应用程序
        return iRet;
    }

    //step12
    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);
    Sleep(1000);

    //链路：11位can500k

    EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x32\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x073A);
    SendDataComm(CBinary("\x22\xf1\x03", 3));
    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x32\x08\x02\x10\x03\x00\x00\x00\x00\x00", 11), 0x073A);

    if (iRet)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    rfRet = m_rfRet;
    binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount() < 5)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    m_binRecive = CBinary(binRecive.GetBuffer() + 4, binRecive.GetByteCount() - 4);
    if (checkIs7f(m_binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return iRet;
    }

    //安全访问
    iRet = SafeLogin_Standard3(CBinary("\x27\x03", 2), 0xACD51C);
    if (CErrorCode::EC_ECU_REFUSE == iRet)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000B09F"));//安全访问失败
        return iRet;
    }

    if (iRet < 0)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }
    //链路保持
    m_pNetLayer->KeepLink(1000, CSendFrame(CBinary("\x3E\x00", 2)));


    //step13
    sendframe.SetSendFrame(CBinary("\x31\x01\x02\x02", 4));  // 07 32 08 04 31 01 02 02 00 00 00
    rfRet = SendDataComm(sendframe);
    if (0 == rfRet.GetByteCount())
    {
        ecuInter.SendReceive(CBinary("\x40\x00\x07\x32\x10\x01", 6));
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    m_binRecive = rfRet.GetFirst();
    if (checkIs7f(m_binRecive))
    {
        ecuInter.SendReceive(CBinary("\x40\x00\x07\x32\x10\x01", 6));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return iRet;
    }

    if (m_binRecive.GetByteCount() < 4
        || m_binRecive[0] != 0x71
        || m_binRecive[1] != 0x01
        || m_binRecive[2] != 0x02
        || m_binRecive[3] != 0x02)
    {
        ecuInter.SendReceive(CBinary("\x40\x00\x07\x32\x10\x01", 6));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B8FF"), g_GetTxtStringFormHtml("0x0000B21F"));//失败
        return iRet;
    }

    //step14

    PleaseWait_xS(3000);//延时3s
    sendframe.SetSendFrame(CBinary("\x31\x03\x02\x02", 4));  // 07 32 08 04 31 03 02 02 00 00 00
    rfRet = SendDataComm(sendframe);
    if (0 == rfRet.GetByteCount())
    {
        ecuInter.SendReceive(CBinary("\x40\x00\x07\x32\x10\x01", 6));
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    m_binRecive = rfRet.GetFirst();
    if (checkIs7f(m_binRecive))
    {
        ecuInter.SendReceive(CBinary("\x40\x00\x07\x32\x10\x01", 6));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return iRet;
    }

    if (m_binRecive.GetByteCount() < 4
        || m_binRecive[0] != 0x71
        || m_binRecive[1] != 0x03
        || m_binRecive[2] != 0x02
        || m_binRecive[3] != 0x02
        || (m_binRecive.GetByteCount() > 4 && (1 == m_binRecive[4] || 2 == m_binRecive[4])))
    {
        ecuInter.SendReceive(CBinary("\x40\x00\x07\x32\x10\x01", 6));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B8FF"), g_GetTxtStringFormHtml("0x0000B21F"));//失败
        return iRet;
    }

    PleaseWait_xS(10000);//延时10s


    //step14.1
    ecuInter.SendReceive(CBinary("\x40\x00\x07\x32\x10\x01", 6));
    m_pNetLayer->KeepLink(0);

    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B8FF"), g_GetTxtStringFormHtml("0x0000B8FF") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002A16C")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OK, DT_LEFT);  //随需自检模式完成
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关

    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"));//将点火开关打开
    PleaseWait_xS(5000);
    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x32\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x073A);
    sendframe.SetSendFrame(CBinary("\x19\x02\x0c", 3));
    rfRet = SendDataComm(sendframe);


    //step15~
    iRet = ClearSysDTC_Programme_538(PTL_CAN_11_500K, CBinary("\x07\x32\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x073A);

    return iRet;


}

// 运动版-换档模块
W_ErrorCode CSeviceFunctionNew::Gear_shift_NEW_lansheng_L494_2016_SPORT()
{
    W_ErrorCode iRet = CErrorCode::EC_SUCCESS;
    CSendFrame sendframe;
    CReceiveFrame rfRet;
    CBinary safeCMD = CBinary("\x27\x03", 2);

    //W_U32 uStandValue = 0xEDCE96;
    //W_I32 P_table[3][8] = {{0x24B4C4,0x7A1823,0xC272FD,0xB00F00121,0x5F6A2B,0x8897FD,0x224F41,0x72DC39},
    //{0xD2FBD8,0x93A51A,0x152B8F,0x1D15B5,0x085AC0,0x27F63B,0x7D9DCD,0xCD7930},
    //{0xACA0DB,0x6A210D,0xE733A0,0xFC06EA,0xCA6D6E,0xA28977,0x724054,0xD7F002}};

    // 确保在继续执行该程序前，已给车辆装配了一个新的模块
    W_I16 iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000C044") + "\n" + "\n" + g_GetTxtStringFormHtml("0x80001618"), DF_MB_OKCANCEL, DT_LEFT);
    if (DF_IDCANCEL == iKey)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B8D1"));//操作人员已中止了次应用程序
        return iRet;
    }

    //step2~6
    iKey = CheckEngineStop(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xF4\x0C\x00\x00\x00\x00", 11), 0x07E8, CBinary("\x01\x00", 2));

    //step7
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"));//将点火开关打开
    PleaseWait_xS_haveTTL(10000, g_GetTxtStringFormHtml("0x00000066"), g_GetTxtStringFormHtml("0x0000B8FE"));//延时10s

    //对于还未输入车辆标识号的模块，程序要求将车辆标识号作为车辆配置的一部分传输，并写入模块.  如果以前记忆了车辆标识号，本程序将反馈指示未成功操作的状态.  使用该程序无法覆盖以前输入的车辆标识号.
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A61"), g_GetTxtStringFormHtml("0x90025FAD") + "\n" + "\n" +
        g_GetTxtStringFormHtml("0x0000BD33") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OKCANCEL, DT_LEFT);
    if (DF_IDCANCEL == iKey)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("@OprInfo$"), g_GetTxtStringFormHtml("0x0000B8D1"));//操作人员已中止了此应用程序
        return iRet;
    }

    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);
    Sleep(1000);

    //链路：11位can500K

    EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x32\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x073A);
    SendDataComm(CBinary("\x22\xf1\x03", 3));
    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x32\x08\x02\x10\x03\x00\x00\x00\x00\x00", 11), 0x073A);

    if (iRet)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    rfRet = m_rfRet;
    CBinary binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount() < 5)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    m_binRecive = CBinary(binRecive.GetBuffer() + 4, binRecive.GetByteCount() - 4);
    if (checkIs7f(m_binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return iRet;
    }


    // 安全访问
    iRet = SafeLogin_Standard3(CBinary("\x27\x03", 2), 0xACA0DB);
    if (iRet < 0)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }
    m_pNetLayer->KeepLink(1000, CSendFrame(CBinary("\x3E\x00", 2)));    //链路保持


    //step10
    CVehicleComm ecuInter;
    sendframe.SetSendFrame(CBinary("\x31\x01\x04\x04", 4));
    rfRet = SendDataComm(sendframe);
    if (0 == rfRet.GetByteCount())
    {
        ecuInter.SendReceive(CBinary("\x40\x00\x07\x32\x10\x01", 6));
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    m_binRecive = rfRet.GetFirst();
    if (checkIs7f(m_binRecive))
    {
        ecuInter.SendReceive(CBinary("\x40\x00\x07\x32\x10\x01", 6));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return iRet;
    }

    if (m_binRecive.GetByteCount() < 4
        || m_binRecive[0] != 0x71
        || m_binRecive[1] != 0x01
        || m_binRecive[2] != 0x04
        || m_binRecive[3] != 0x04)
    {
        ecuInter.SendReceive(CBinary("\x40\x00\x07\x32\x10\x01", 6));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000C045"), g_GetTxtStringFormHtml("0x0000B21F"));//失败
        return iRet;
    }

    // 学习车辆标识
    PleaseWait_xS_haveTTL(10000, g_GetTxtStringFormHtml("0x0000C045"), g_GetTxtStringFormHtml("0x80000EFE"));
    ecuInter.SendReceive(CBinary("\x40\x00\x07\x32\x10\x01", 6));
    m_pNetLayer->KeepLink(0);//断开链路

    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000C045"), g_GetTxtStringFormHtml("0x90025FAD") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002A16C")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OK, DT_LEFT);//学习车辆标识号完成
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"));//将点火开关打开

    //执行随需自检将会使相关控制模块执行预定义的测试，这将导致任何相关的故障代码被记录（如果存在故障）
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B8FF"), g_GetTxtStringFormHtml("0x9001537C") + "\n" + "\n"
        + g_GetTxtStringFormHtml("0x9001C263") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OKCANCEL, DT_LEFT);
    if (DF_IDCANCEL == iKey)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B8D1"));//操作人员已中止了次应用程序
        return iRet;
    }

    //step12
    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);
    Sleep(1000);

    //链路：11位can500k

    EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x32\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x073A);
    SendDataComm(CBinary("\x22\xf1\x03", 3));
    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x32\x08\x02\x10\x03\x00\x00\x00\x00\x00", 11), 0x073A);

    if (iRet)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    rfRet = m_rfRet;
    binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount() < 5)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    m_binRecive = CBinary(binRecive.GetBuffer() + 4, binRecive.GetByteCount() - 4);
    if (checkIs7f(m_binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return iRet;
    }

    // 安全访问
    iRet = SafeLogin_Standard3(CBinary("\x27\x03", 2), 0xACA0DB);
    if (iRet < 0)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }
    m_pNetLayer->KeepLink(1000, CSendFrame(CBinary("\x3E\x00", 2)));    //链路保持

    if (iRet < 0)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }
    //链路保持
    m_pNetLayer->KeepLink(1000, CSendFrame(CBinary("\x3E\x00", 2)));


    //step13
    sendframe.SetSendFrame(CBinary("\x31\x01\x02\x02", 4));  // 07 32 08 04 31 01 02 02 00 00 00
    rfRet = SendDataComm(sendframe);
    if (0 == rfRet.GetByteCount())
    {
        ecuInter.SendReceive(CBinary("\x40\x00\x07\x32\x10\x01", 6));
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    m_binRecive = rfRet.GetFirst();
    if (checkIs7f(m_binRecive))
    {
        ecuInter.SendReceive(CBinary("\x40\x00\x07\x32\x10\x01", 6));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return iRet;
    }

    if (m_binRecive.GetByteCount() < 4
        || m_binRecive[0] != 0x71
        || m_binRecive[1] != 0x01
        || m_binRecive[2] != 0x02
        || m_binRecive[3] != 0x02)
    {
        ecuInter.SendReceive(CBinary("\x40\x00\x07\x32\x10\x01", 6));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B8FF"), g_GetTxtStringFormHtml("0x0000B21F"));//失败
        return iRet;
    }

    //step14

    PleaseWait_xS(3000);//延时3s
    sendframe.SetSendFrame(CBinary("\x31\x03\x02\x02", 4));  // 07 32 08 04 31 03 02 02 00 00 00
    rfRet = SendDataComm(sendframe);
    if (0 == rfRet.GetByteCount())
    {
        ecuInter.SendReceive(CBinary("\x40\x00\x07\x32\x10\x01", 6));
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    m_binRecive = rfRet.GetFirst();
    if (checkIs7f(m_binRecive))
    {
        ecuInter.SendReceive(CBinary("\x40\x00\x07\x32\x10\x01", 6));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return iRet;
    }

    if (m_binRecive.GetByteCount() < 4
        || m_binRecive[0] != 0x71
        || m_binRecive[1] != 0x03
        || m_binRecive[2] != 0x02
        || m_binRecive[3] != 0x02
        || (m_binRecive.GetByteCount() > 4 && (1 == m_binRecive[4] || 2 == m_binRecive[4])))
    {
        ecuInter.SendReceive(CBinary("\x40\x00\x07\x32\x10\x01", 6));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B8FF"), g_GetTxtStringFormHtml("0x0000B21F"));//失败
        return iRet;
    }

    // 随需自检模式
    PleaseWait_xS_haveTTL(10000, g_GetTxtStringFormHtml("0x0000B8FF"), g_GetTxtStringFormHtml("0x80000EFE"));


    //step14.1
    ecuInter.SendReceive(CBinary("\x40\x00\x07\x32\x10\x01", 6));
    m_pNetLayer->KeepLink(0);

    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B8FF"), g_GetTxtStringFormHtml("0x0000B8FF") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002A16C")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OK, DT_LEFT);  //随需自检模式完成
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关

    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"));//将点火开关打开
    PleaseWait_xS(5000);
    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x32\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x073A);
    sendframe.SetSendFrame(CBinary("\x19\x02\x0c", 3));
    rfRet = SendDataComm(sendframe);


    //step15~
    iRet = ClearSysDTC_Programme_538(PTL_CAN_11_500K, CBinary("\x07\x32\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x073A);

    return iRet;
}


// 通用近距离传感器模块
W_ErrorCode CSeviceFunctionNew::GeneralProximitySensor_NEW_lansheng_L494_2016()
{
    W_ErrorCode iRet = CErrorCode::EC_SUCCESS;
    CSendFrame sendframe;
    CReceiveFrame rfRet;
    W_I16 iKey;

    //step1
    //确保在继续执行该程序前，已给车辆装配了一个新的模块
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000C044") + "\n" + "\n" + g_GetTxtStringFormHtml("0x80001618"), DF_MB_OKCANCEL, DT_LEFT);
    if (DF_IDCANCEL == iKey)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B8D1"));//操作人员已中止了次应用程序
        return iRet;
    }

    //step2~6
    iKey = CheckEngineStop(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xF4\x0C\x00\x00\x00\x00", 11), 0x07E8, CBinary("\x01\x00", 2));

    if (iRet)
        return iRet;

    //step7
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"));//将点火开关打开
    PleaseWait_xS_haveTTL(10000, g_GetTxtStringFormHtml("0x00000066"), g_GetTxtStringFormHtml("0x0000B8FE"));  // 进度条60s
    //学习车辆标识，  如果以前记忆了车辆标识号，本程序将反馈指示未成功操作的状态.  使用该程序无法覆盖以前输入的车辆标识号.
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A61"), g_GetTxtStringFormHtml("0x90025FAD") + "\n" + "\n" +
        g_GetTxtStringFormHtml("0x0000BD33") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OKCANCEL, DT_LEFT);
    if (DF_IDCANCEL == iKey)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("@OprInfo$"), g_GetTxtStringFormHtml("0x0000B8D1"));//操作人员已中止了此应用程序
        return iRet;
    }

    //step8
    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);
    Sleep(1000);
    //链路：11位can500K

    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x01\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x0709);
    SendDataComm(CBinary("\x22\xF1\x03", 3));
    sendframe.SetSendFrame(CBinary("\x10\x03", 2));
    m_rfRet = SendDataComm(sendframe);
    m_pNetLayer->KeepLink(1000, CSendFrame(CBinary("\x3E\x80", 2)));

    if (iRet)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    CBinary binRecive = m_rfRet.GetFirst();
    if (binRecive.GetByteCount() < 5)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    m_binRecive = CBinary(binRecive.GetBuffer() + 4, binRecive.GetByteCount() - 4);
    if (checkIs7f(m_binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return CErrorCode::EC_ECU_REFUSE;
    }

    CVehicleComm ecuInter;
    sendframe.SetSendFrame(CBinary("\x31\x01\x04\x04", 4));  // 07 01 08 04 31 01 04 04 00 00 00
    rfRet = SendDataComm(sendframe);
    if (0 == rfRet.GetByteCount())
    {
        ecuInter.SendReceive(CBinary("\x40\x00\x07\x01\x10\x01", 6));
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    m_binRecive = rfRet.GetFirst();
    if (checkIs7f(m_binRecive))
    {
        ecuInter.SendReceive(CBinary("\x40\x00\x07\x01\x10\x01", 6));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return CErrorCode::EC_ECU_REFUSE;
    }

    if (m_binRecive.GetByteCount() < 4  // 07 09 08 04 71 01 04 04 00 00 00
        || m_binRecive[0] != 0x71
        || m_binRecive[1] != 0x01
        || m_binRecive[2] != 0x04
        || m_binRecive[3] != 0x04)
    {
        ecuInter.SendReceive(CBinary("\x40\x00\x07\x01\x10\x01", 6));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000C045"), g_GetTxtStringFormHtml("0x0000B21F"));//失败
        return CErrorCode::EC_DATA;
    }

    //step9
    PleaseWait_xS_haveTTL(10000, g_GetTxtStringFormHtml("0x0000B09D"), g_GetTxtStringFormHtml("0x0000C045"));
    ecuInter.SendReceive(CBinary("\x40\x00\x07\x01\x10\x01", 6));

    m_pNetLayer->KeepLink(0);

    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000C045"), g_GetTxtStringFormHtml("0x0000C045") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OK, DT_LEFT);//学习车辆标识完成

    //执行随需自检将会使相关控制模块执行预定义的测试，这将导致任何相关的故障代码被记录（如果存在故障）
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B8FF"), g_GetTxtStringFormHtml("0x9001537C") + "\n" + "\n"
        + g_GetTxtStringFormHtml("0x9001C263") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OKCANCEL, DT_LEFT);
    if (DF_IDCANCEL == iKey)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B8D1"));//操作人员已中止了次应用程序
        return iRet;
    }

    //step10
    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);
    Sleep(1000);
    //链路：11位can500K

    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x01\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x0709);
    SendDataComm(CBinary("\x22\xf1\x03", 3));
    sendframe.SetSendFrame(CBinary("\x10\x03", 2));
    SendDataComm(sendframe);
    m_pNetLayer->KeepLink(1000, CSendFrame(CBinary("\x3E\x80", 2)));

    if (iRet)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    binRecive = m_rfRet.GetFirst();
    if (binRecive.GetByteCount() < 5)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    m_binRecive = CBinary(binRecive.GetBuffer() + 4, binRecive.GetByteCount() - 4);
    if (checkIs7f(m_binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return CErrorCode::EC_ECU_REFUSE;
    }


    sendframe.SetSendFrame(CBinary("\x31\x01\x02\x02", 4)); //  07 01 08 04 31 01 02 02 00 00 00
    rfRet = SendDataComm(sendframe);
    if (0 == rfRet.GetByteCount())
    {
        ecuInter.SendReceive(CBinary("\x40\x00\x07\x01\x10\x01", 6));
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    m_binRecive = rfRet.GetFirst();
    if (checkIs7f(m_binRecive))
    {
        ecuInter.SendReceive(CBinary("\x40\x00\x07\x01\x10\x01", 6));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return CErrorCode::EC_ECU_REFUSE;
    }

    if (m_binRecive.GetByteCount() < 4  // :07 09 08 04 71 01 02 02 00 00 00
        || m_binRecive[0] != 0x71
        || m_binRecive[1] != 0x01
        || m_binRecive[2] != 0x02
        || m_binRecive[3] != 0x02)
    {
        ecuInter.SendReceive(CBinary("\x40\x00\x07\x01\x10\x01", 6));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B8FF"), g_GetTxtStringFormHtml("0x0000B21F"));//失败
        return CErrorCode::EC_DATA;
    }

    string strOpenFile = m_stropenfileConfigMenu;  // 判断文件版本
    CJLRStringOperate strOpt;
    strOpt.Replace(strOpenFile, ".ctv", "");
    if (("module_special_L319_2014" == strOpenFile) || ("module_special_L550_2017" == strOpenFile))
    {
        W_U32 uMsStart = GetTickCount();
        W_U32 uMsPass = 0;
        W_U32 uMsStop = 0;
        string strTTL = g_GetTxtStringFormHtml("0x0000B8FF");
        string strPormot = g_GetTxtStringFormHtml("0x0000B09D");
        while (1)
        {
            do
            {
                uMsStop = GetTickCount();
                uMsPass = uMsStop - uMsStart;
                FxProgressBar(strTTL, strPormot, uMsPass * 100 / 50000);
            } while (uMsPass < 2000);

            if (uMsPass > 49999)
            {
                sendframe.SetSendFrame(CBinary("\x31\x02\x02\x02", 4));
                rfRet = SendDataComm(sendframe);
                ecuInter.SendReceive(CBinary("\x40\x00\x07\x01\x10\x01", 6));
                FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B8FF"), g_GetTxtStringFormHtml("0x0000C098"));//由于超时而失败
                return CErrorCode::EC_TIME_OVER;
            }
            sendframe.SetSendFrame(CBinary("\x31\x03\x02\x02", 4));
            rfRet = SendDataComm(sendframe);
            m_binRecive = rfRet.GetFirst();
            if (m_binRecive.GetByteCount() > 4
                && 0x71 == m_binRecive[0]
                && 0x03 == m_binRecive[1]
                && 0x02 == m_binRecive[2]
                && 0x02 == m_binRecive[3]
                && 0x02 == (m_binRecive[4] & 0x0F))
                Sleep(200);
            else break;
        }

        ecuInter.SendReceive(CBinary("\x40\x00\x07\x01\x10\x01", 6));  // 07 01 08 02 10 01 00 00 00 00 00
        m_pNetLayer->KeepLink(0);
        if (0 == m_binRecive.GetByteCount())
        {
            //ecuInter.SendReceive(CBinary("\x40\x00\x07\x01\x10\x01",6));
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_TIME_OVER;
        }

        if (checkIs7f(m_binRecive))
        {
            //ecuInter.SendReceive(CBinary("\x40\x00\x07\x01\x10\x01",6));
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
            return CErrorCode::EC_ECU_REFUSE;
        }

        if (m_binRecive.GetByteCount() < 4
            || m_binRecive[0] != 0x71
            || m_binRecive[1] != 0x03
            || m_binRecive[2] != 0x02
            || m_binRecive[3] != 0x02
            || (m_binRecive.GetByteCount() > 4 && 1 == (m_binRecive[4] & 0x0F)))
        {
            //ecuInter.SendReceive(CBinary("\x40\x00\x07\x01\x10\x01",6));
            FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B8FF"), g_GetTxtStringFormHtml("0x0000B21F"));//失败
            return CErrorCode::EC_DATA;
        }
    }
    else if ("module_special_L405_2014" == strOpenFile)
    {
        PleaseWait_xS_haveTTL(1000, g_GetTxtStringFormHtml("0x0000B09D"), g_GetTxtStringFormHtml("0x0000B8FF"));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B8FF"), g_GetTxtStringFormHtml("0x0000B8FF,0x0000B0A3"));//完成
    }
    else  //
    {
        PleaseWait_xS_haveTTL(10000, g_GetTxtStringFormHtml("0x0000B09D"), g_GetTxtStringFormHtml("0x0000B8FF"));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B8FF"), g_GetTxtStringFormHtml("0x0000B0A3"));//完成
    }

    if (m_stropenfileConfigMenu == "module_special_L550_2017.ctv")
    {
        PleaseWait_xS_haveTTL(1000, g_GetTxtStringFormHtml("0x0000B09D"), g_GetTxtStringFormHtml("0x0000B8FF"));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B8FF"), g_GetTxtStringFormHtml("0x0000B0A3"));//完成
        iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x01\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x0709);
        sendframe.SetSendFrame(CBinary("\x19\x02\x0C", 3));
        rfRet = SendDataComm(sendframe);
        return iRet;
    }

    //step13~
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关


    iRet = CheckSysDTCNub_model1(PTL_CAN_11_500K, PTL_CAN_11_125K, CBinary("\x07\x01\x08\x03\x19\x02\x0C\x00\x00\x00\x00", 11), CBinary("\x07\xDF\x08\x04\x14\xFF\xFF\xFF\x00\x00\x00", 11), 0x0709);

    return iRet;

}



// 图像处理控制模块A
W_ErrorCode CSeviceFunctionNew::Image_control_NEW_lansheng_L494_2016()
{
    W_ErrorCode iRet = CErrorCode::EC_SUCCESS;
    CSendFrame sendframe;
    CReceiveFrame rfRet;
    W_I16 iKey = 0;

    //step1
    //请注意：在下列应用程序运行期间，若要成功校准自动远光灯摄像头，需要进行 3 - 5 分钟的驱动循环。
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x900120EF"), g_GetTxtStringFormHtml("0x90026FE6") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BBAB"), DF_MB_OKCANCEL, DT_LEFT);
    if (DF_IDCANCEL == iKey)
        return iRet;

    //确保在继续执行该程序前，已给车辆装配了一个新的模块
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000C044") + "\n" + "\n" + g_GetTxtStringFormHtml("0x80001618"), DF_MB_OKCANCEL, DT_LEFT);
    if (DF_IDCANCEL == iKey)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B8D1"));//操作人员已中止了次应用程序
        return iRet;
    }


    //step2~6
    iKey = CheckEngineStop(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xF4\x0C\x00\x00\x00\x00", 11), 0x07E8, CBinary("\x01\x00", 2));
    if (iRet)
        return iRet;

    // step7
    //FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"),g_GetTxtStringFormHtml("0x00000011"));//将点火开关打开
    //iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x900120EF"),g_GetTxtStringFormHtml("0x90026EF5,0x9002B330"),DF_MB_OKCANCEL,DT_LEFT);// 中央车辆配置文件数据读入
    //if (DF_IDCANCEL == iKey)
    //{
    //    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"),g_GetTxtStringFormHtml("0x0000B8D1"));//操作人员已中止了此应用程序
    //    return iRet;
    //}
    //PleaseWait_xS(2000,g_GetTxtStringFormHtml("0x9002CEB9,0x9002D355")); // 数据读入，请等待


    //学习车辆标识，  如果以前记忆了车辆标识号，本程序将反馈指示未成功操作的状态.  使用该程序无法覆盖以前输入的车辆标识号.
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A61"), g_GetTxtStringFormHtml("0x90025FAD") + "\n" + "\n" +
        g_GetTxtStringFormHtml("0x0000BD33") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OKCANCEL, DT_LEFT);
    if (DF_IDCANCEL == iKey)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("@OprInfo$"), g_GetTxtStringFormHtml("0x0000B8D1"));//操作人员已中止了此应用程序
        return iRet;
    }


    //step8
    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);
    Sleep(1000);
    //链路：11位can125K
    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x01\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x0709);
    SendDataComm(CBinary("\x22\xf1\x03", 3));
    sendframe.SetSendFrame(CBinary("\x10\x03", 2));
    SendDataComm(sendframe);
    m_pNetLayer->KeepLink(1000, CSendFrame(CBinary("\x3E\x80", 2)));
    if (iRet)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    rfRet = m_rfRet;
    CBinary binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount() < 5)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    m_binRecive = CBinary(binRecive.GetBuffer() + 4, binRecive.GetByteCount() - 4);
    if (checkIs7f(m_binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return CErrorCode::EC_ECU_REFUSE;
    }

    CVehicleComm ecuInter;
    sendframe.SetSendFrame(CBinary("\x31\x01\x04\x04", 4));
    rfRet = SendDataComm(sendframe);
    if (0 == rfRet.GetByteCount())
    {
        ecuInter.SendReceive(CBinary("\x40\x00\x07\xB1\x10\x01", 6));
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    m_binRecive = rfRet.GetFirst();
    if (checkIs7f(m_binRecive))
    {
        ecuInter.SendReceive(CBinary("\x40\x00\x07\xB1\x10\x01", 6));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return CErrorCode::EC_ECU_REFUSE;
    }

    if (m_binRecive.GetByteCount() < 4
        || m_binRecive[0] != 0x71
        || m_binRecive[1] != 0x01
        || m_binRecive[2] != 0x04
        || m_binRecive[3] != 0x04)
    {
        ecuInter.SendReceive(CBinary("\x40\x00\x07\xB1\x10\x01", 6));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B8FF"), g_GetTxtStringFormHtml("0x0000B21F"));//失败
        return CErrorCode::EC_DATA;
    }
    m_pNetLayer->KeepLink(0);//断开链路


    //学习车辆标识完成
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000C045"), g_GetTxtStringFormHtml("0x0000C045") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OK, DT_LEFT);
    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x64\x08\x02\x10\x01\x00\x00\x00\x00\x00", 11), 0x076C);  // 进入    
    if (iRet)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }



    //FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BEBD"),g_GetTxtStringFormHtml("0x0000BD33,0x9002B330"),DF_MB_OKCANCEL,DT_LEFT);// 再次显示处理说明    

    // 随需模式，执行随需自检将会使相关控制模块执行预定义的测试，这将导致任何相关的故障代码被记录（如果存在故障）.
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B8FF"), g_GetTxtStringFormHtml("0x9001537C") + "\n" + "\n"
        + g_GetTxtStringFormHtml("0x9001C263") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OKCANCEL, DT_LEFT);
    if (DF_IDCANCEL == iKey)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B8D1"));//操作人员已中止了此应用程序
        return iRet;
    }
    PleaseWait_xS(3000, g_GetTxtStringFormHtml("0x9001537C,0x90022B86"));


    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);
    Sleep(1000);

    //链路：11位can500K
    EnterSystem(PTL_CAN_11_125K, CBinary("\x07\x06\x08\x03\x22\xF1\x03\x00\x00\x00\x00 ", 11), 0x070E);
    SendDataComm(CBinary("\x22\xf1\x03", 3));
    sendframe.SetSendFrame(CBinary("\x10\x03", 2));
    SendDataComm(sendframe);
    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x06\x08\x02\x10\x03\x00\x00\x00\x00\x00", 11), 0x070E);
    if (iRet)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    binRecive = m_rfRet.GetFirst();
    if (binRecive.GetByteCount() < 5)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    m_binRecive = CBinary(binRecive.GetBuffer() + 4, binRecive.GetByteCount() - 4);
    if (checkIs7f(m_binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return CErrorCode::EC_ECU_REFUSE;
    }


    sendframe.SetSendFrame(CBinary("\x31\x01\x02\x02", 4));  // 07 06 08 04 31 01 02 02 00 00 00
    rfRet = SendDataComm(sendframe);
    if (0 == rfRet.GetByteCount())
    {
        ecuInter.SendReceive(CBinary("\x40\x00\x07\xB1\x10\x01", 6));
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    m_binRecive = rfRet.GetFirst();
    if (checkIs7f(m_binRecive))
    {
        ecuInter.SendReceive(CBinary("\x40\x00\x07\xB1\x10\x01", 6));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return CErrorCode::EC_ECU_REFUSE;
    }

    if (m_binRecive.GetByteCount() < 4  // 07 0E 08 04 71 01 02 02 00 00 00
        || m_binRecive[0] != 0x71
        || m_binRecive[1] != 0x01
        || m_binRecive[2] != 0x02
        || m_binRecive[3] != 0x02)
    {
        ecuInter.SendReceive(CBinary("\x40\x00\x07\xB1\x10\x01", 6));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B8FF"), g_GetTxtStringFormHtml("0x0000B21F"));//失败
        return CErrorCode::EC_DATA;
    }

    sendframe.SetSendFrame(CBinary("\x31\x03\x02\x02", 4));  // 07 06 08 04 31 03 02 02 00 00 00
    rfRet = SendDataComm(sendframe);
    if (0 == rfRet.GetByteCount())
    {
        ecuInter.SendReceive(CBinary("\x40\x00\x07\xB1\x10\x01", 6));
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    m_binRecive = rfRet.GetFirst();
    if (checkIs7f(m_binRecive))
    {
        ecuInter.SendReceive(CBinary("\x40\x00\x07\xB1\x10\x01", 6));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return CErrorCode::EC_ECU_REFUSE;
    }

    if (m_binRecive.GetByteCount() < 4  // 07 0E 08 04 71 03 02 02 00 00 00
        || m_binRecive[0] != 0x71
        || m_binRecive[1] != 0x03
        || m_binRecive[2] != 0x02
        || m_binRecive[3] != 0x02)
    {
        ecuInter.SendReceive(CBinary("\x40\x00\x07\xB1\x10\x01", 6));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B8FF"), g_GetTxtStringFormHtml("0x0000B21F"));//失败
        return CErrorCode::EC_DATA;
    }

    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x06\x08\x02\x10\x01\x00\x00\x00\x00\x00", 11), 0x070E);  // 进入    
    if (iRet)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }


    // 随需自检模式完成
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BEBD"), g_GetTxtStringFormHtml("0x0000B8FF") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002A16C")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OK, DT_LEFT);

    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml(TXT_HTML_STATE_VALUE_IGNITION_OFF));//关闭点火开关（位置 0）.
    PleaseWait_xS(10000, g_GetTxtStringFormHtml("0x90020A87,0x9002D307")); // 模块初始化 10s

    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BEBD"), g_GetTxtStringFormHtml("0x900080A6") + "\n" + "\n" + g_GetTxtStringFormHtml("0x90029FEF")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002701B") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OK, DT_LEFT);  // 重要说明1

    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BEBD"), g_GetTxtStringFormHtml("0x9002CF12") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BEB6")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BEB7") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BEB8")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BEB9") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BEBA")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BEBB") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OK, DT_LEFT); // 重要说明2

    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"));//将点火开关打开
    // 照相机校准
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BEBD"), g_GetTxtStringFormHtml("0x9001FE2C") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BE61")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OKCANCEL, DT_LEFT);
    if (DF_IDCANCEL == iKey)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B8D1"));//操作人员已中止了此应用程序
        return iRet;
    }

    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);
    Sleep(1000);
    //链路：11位can500K
    EnterSystem(PTL_CAN_11_125K, CBinary("\x07\x06\x08\x03\x22\xF1\x03\x00\x00\x00\x00 ", 11), 0x070E);
    SendDataComm(CBinary("\x22\xF1\x03", 3));
    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x06\x08\x02\x10\x03\x00\x00\x00\x00\x00", 11), 0x070E);
    if (iRet)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    binRecive = m_rfRet.GetFirst();
    if (binRecive.GetByteCount() < 5)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    m_binRecive = CBinary(binRecive.GetBuffer() + 4, binRecive.GetByteCount() - 4);
    if (checkIs7f(m_binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return CErrorCode::EC_ECU_REFUSE;
    }

    sendframe.SetSendFrame(CBinary("\x31\x01\x80\x0C", 4));  // 07 06 08 04 31 01 80 0C 00 00 00
    rfRet = SendDataComm(sendframe);
    if (0 == rfRet.GetByteCount())
    {
        ecuInter.SendReceive(CBinary("\x40\x00\x07\xB1\x10\x01", 6));
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    m_binRecive = rfRet.GetFirst();
    if (checkIs7f(m_binRecive))
    {
        ecuInter.SendReceive(CBinary("\x40\x00\x07\xB1\x10\x01", 6));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return CErrorCode::EC_ECU_REFUSE;
    }

    if (m_binRecive.GetByteCount() < 4  // 07 0E 08 04 71 01 80 0C 00 00 00
        || m_binRecive[0] != 0x71
        || m_binRecive[1] != 0x01
        || m_binRecive[2] != 0x80
        || m_binRecive[3] != 0x0C)
    {
        ecuInter.SendReceive(CBinary("\x40\x00\x07\xB1\x10\x01", 6));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B8FF"), g_GetTxtStringFormHtml("0x0000B21F"));//失败
        return CErrorCode::EC_DATA;
    }

    sendframe.SetSendFrame(CBinary("\x31\x03\x80\x0C", 4));  // 07 06 08 04 31 03 80 0C 00 00 00
    rfRet = SendDataComm(sendframe);
    if (0 == rfRet.GetByteCount())
    {
        ecuInter.SendReceive(CBinary("\x40\x00\x07\xB1\x10\x01", 6));
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    m_binRecive = rfRet.GetFirst();
    if (checkIs7f(m_binRecive))
    {
        ecuInter.SendReceive(CBinary("\x40\x00\x07\xB1\x10\x01", 6));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return CErrorCode::EC_ECU_REFUSE;
    }

    if (m_binRecive.GetByteCount() < 4  // 07 0E 08 04 71 03 80 0C 00 00 00
        || m_binRecive[0] != 0x71
        || m_binRecive[1] != 0x03
        || m_binRecive[2] != 0x80
        || m_binRecive[3] != 0x0C)
    {
        ecuInter.SendReceive(CBinary("\x40\x00\x07\xB1\x10\x01", 6));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B8FF"), g_GetTxtStringFormHtml("0x0000B21F"));//失败
        return CErrorCode::EC_DATA;
    }

    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x06\x08\x02\x10\x01\x00\x00\x00\x00\x00", 11), 0x070E);  // 进入    
    if (iRet)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }


    PleaseWait_xS(5000, g_GetTxtStringFormHtml("0x9001FE2C,0x90015264,0x900234AE")); // 远光灯模块正在进行中

    // 自动远光灯模块完成
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BEBD"), g_GetTxtStringFormHtml("0x9001FE2C") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002A16C")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OK, DT_LEFT);

    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml(TXT_HTML_STATE_VALUE_IGNITION_OFF));//关闭点火开关（位置 0）.
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"));//将点火开关打开

    iRet = CheckSysDTCNub_model1(PTL_CAN_11_500K, PTL_CAN_11_125K, CBinary("\x07\x01\x08\x03\x19\x02\x0C\x00\x00\x00\x00", 11), CBinary("\x07\xDF\x08\x04\x14\xFF\xFF\xFF\x00\x00\x00", 11), 0x0709);

    return iRet;
}



// 约束乘员分类系统模块
W_ErrorCode CSeviceFunctionNew::Restraints_NEW_lansheng_L494_2016()
{
    W_ErrorCode iRet = CErrorCode::EC_SUCCESS;
    CSendFrame sendframe;
    CReceiveFrame rfRet;
    W_I16 iKey = 0;
    W_U32 uStandValue = 0xB7DA6A;
    W_I32 P_table[3][8] = { {0x7EA038,0x200CDF,0x986601,0xEC91BC,0x057ED7,0xD28301,0x785BBD,0x28C8C5},    // 安全访问
    {0x88EF24,0xC9B1E6,0x4F3F73,0x470149,0x524E3C,0x7DE2C7,0x278931,0x976DCC},
    {0xF6B427,0x3035F1,0xBD275C,0xA61216,0x907992,0xF89D8B,0x2854A8,0x8DE4FE} };


    //确保在继续执行该程序前，已给车辆装配了一个新的模块
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000C044") + "\n" + "\n" + g_GetTxtStringFormHtml("0x80001618"), DF_MB_OKCANCEL, DT_LEFT);
    if (DF_IDCANCEL == iKey)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B8D1"));//操作人员已中止了次应用程序
        return iRet;
    }

    //step2~6
    iKey = CheckEngineStop(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xF4\x0C\x00\x00\x00\x00", 11), 0x07E8, CBinary("\x01\x00", 2));

    if (iRet)
        return iRet;

    //step7
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"));//将点火开关打开
    PleaseWait_xS_haveTTL(10000, g_GetTxtStringFormHtml("0x00000066"), g_GetTxtStringFormHtml("0x0000B8FE"));//延时10s

    //学习车辆标识，  如果以前记忆了车辆标识号，本程序将反馈指示未成功操作的状态.  使用该程序无法覆盖以前输入的车辆标识号.
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A61"), g_GetTxtStringFormHtml("0x90025FAD") + "\n" + "\n" +
        g_GetTxtStringFormHtml("0x0000BD33") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OKCANCEL, DT_LEFT);
    if (DF_IDCANCEL == iKey)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B8D1"));//操作人员已中止了此应用程序
        return iRet;
    }

    //step8
    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);
    Sleep(1000);
    //链路：11位can500K

    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x65\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x076D); // 进入专属的CAN
    sendframe.SetSendFrame(CBinary("\x10\x03", 2));
    SendDataComm(sendframe);
    m_pNetLayer->KeepLink(1000, CSendFrame(CBinary("\x3E\x80", 2)));

    if (iRet)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    rfRet = m_rfRet;
    CBinary binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount() < 5)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }


    m_binRecive = CBinary(binRecive.GetBuffer() + 4, binRecive.GetByteCount() - 4);
    if (checkIs7f(m_binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return CErrorCode::EC_ECU_REFUSE;
    }

    //安全访问
    iRet = SafeLogin_L405_2014_Oil(CBinary("\x27\x03", 2), uStandValue, P_table);  // 07 65 08 05 27 04 F6 B4 27 00 00
    if (CErrorCode::EC_ECU_REFUSE == iRet)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000B09F"));//安全访问失败
        return CErrorCode::EC_ECU_REFUSE;
    }

    if (iRet)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }
    //链路保持
    //if(m_stropenfileConfigMenu == "module_special_L550_2017.ctv")
    //    m_pNetLayer->KeepLink(1000,CSendFrame(CBinary("\x3E\x80",2)));
    //else
    //    m_pNetLayer->KeepLink(1000,CSendFrame(CBinary("\x3E\x00",2)));
    //m_pNetLayer->KeepLink(0);//断开链路


    //step9
    CVehicleComm ecuInter;
    sendframe.SetSendFrame(CBinary("\x31\x01\x04\x04", 4));
    rfRet = SendDataComm(sendframe);
    if (0 == rfRet.GetByteCount())
    {
        ecuInter.SendReceive(CBinary("\x40\x00\x07\x65\x10\x01", 6));
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    m_binRecive = rfRet.GetFirst();
    if (checkIs7f(m_binRecive))
    {
        ecuInter.SendReceive(CBinary("\x40\x00\x07\x65\x10\x01", 6));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return CErrorCode::EC_ECU_REFUSE;
    }

    if (m_binRecive.GetByteCount() < 4
        || m_binRecive[0] != 0x71
        || m_binRecive[1] != 0x01
        || m_binRecive[2] != 0x04
        || m_binRecive[3] != 0x04)
    {
        ecuInter.SendReceive(CBinary("\x40\x00\x07\x65\x10\x01", 6));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000C045"), g_GetTxtStringFormHtml("0x0000B21F"));//失败
        return CErrorCode::EC_DATA;
    }

    //step10
    PleaseWait_xS_haveTTL(10000, g_GetTxtStringFormHtml("0x0000B09D"), g_GetTxtStringFormHtml("0x0000C045"));//延时30s
    ecuInter.SendReceive(CBinary("\x40\x00\x07\x65\x10\x01", 6));
    m_pNetLayer->KeepLink(0);  // 断开链路

    // 学习车辆标识完成
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000C045"), g_GetTxtStringFormHtml("0x0000C045") + "\n" + "\n" +
        g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OK, DT_LEFT);
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关

    //step11
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"));//将点火开关打开

    //确保前排座椅上未摆放任何物品.   下一操作将校准占用分类传感器座椅补偿.
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x000000AB"), g_GetTxtStringFormHtml("0x90023E53") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000B30A") + "\n" + "\n" +
        g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OKCANCEL, DT_LEFT);
    if (DF_IDCANCEL == iKey)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关
        return iRet;
    }

    //step12
    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);
    Sleep(1000);
    //链路：11位can500K

    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x65\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x076D);
    SendDataComm(CBinary("\x22\xf1\x03", 3));
    sendframe.SetSendFrame(CBinary("\x10\x03", 2));
    SendDataComm(sendframe);

    if (iRet)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    rfRet = m_rfRet;
    binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount() < 5)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    m_binRecive = CBinary(binRecive.GetBuffer() + 4, binRecive.GetByteCount() - 4);
    if (checkIs7f(m_binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return CErrorCode::EC_ECU_REFUSE;
    }

    //安全访问
    iRet = SafeLogin_L405_2014_Oil(CBinary("\x27\x03", 2), uStandValue, P_table); // 07 65 08 05 27 04 F6 B4 27 00 00
    if (CErrorCode::EC_ECU_REFUSE == iRet)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000B09F"));//安全访问失败
        return CErrorCode::EC_ECU_REFUSE;
    }

    if (iRet)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }
    //链路保持
    if (m_stropenfileConfigMenu == "module_special_L550_2017.ctv")
        m_pNetLayer->KeepLink(1000, CSendFrame(CBinary("\x3E\x80", 2)));
    else
        m_pNetLayer->KeepLink(1000, CSendFrame(CBinary("\x3E\x00", 2)));

    //step13
    sendframe.SetSendFrame(CBinary("\x31\x01\x50\x07", 4));
    rfRet = SendDataComm(sendframe);
    if (0 == rfRet.GetByteCount())
    {
        ecuInter.SendReceive(CBinary("\x40\x00\x07\x65\x10\x01", 6));
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    m_binRecive = rfRet.GetFirst();
    if (checkIs7f(m_binRecive))
    {
        ecuInter.SendReceive(CBinary("\x40\x00\x07\x65\x10\x01", 6));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return CErrorCode::EC_ECU_REFUSE;
    }

    if (m_binRecive.GetByteCount() < 4  // 07 6D 08 06 71 01 50 07 20 09 09
        || m_binRecive[0] != 0x71
        || m_binRecive[1] != 0x01
        || m_binRecive[2] != 0x50
        || m_binRecive[3] != 0x07)
    {
        ecuInter.SendReceive(CBinary("\x40\x00\x07\x65\x10\x01", 6));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BFAC"), g_GetTxtStringFormHtml("0x0000B21F"));//失败
        return CErrorCode::EC_DATA;
    }

    //step14
    PleaseWait_xS_haveTTL(2000, g_GetTxtStringFormHtml("0x0000B09D"), g_GetTxtStringFormHtml("0x0000BFAC"));
    sendframe.SetSendFrame(CBinary("\x31\x03\x50\x07", 4));
    rfRet = SendDataComm(sendframe);
    ecuInter.SendReceive(CBinary("\x40\x00\x07\x65\x10\x01", 6));
    m_pNetLayer->KeepLink(0);
    if (0 == rfRet.GetByteCount())
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关
        return CErrorCode::EC_TIME_OVER;
    }

    m_binRecive = rfRet.GetFirst();
    if (checkIs7f(m_binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关
        return CErrorCode::EC_ECU_REFUSE;
    }

    if (m_binRecive.GetByteCount() < 5  // 07 6D 08 06 71 03 50 07 20 09 09
        || m_binRecive[0] != 0x71
        || m_binRecive[1] != 0x03
        || m_binRecive[2] != 0x50
        || m_binRecive[3] != 0x07
        || (m_binRecive[4] != 0x21 && m_binRecive[4] != 0x20))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BFAC"), g_GetTxtStringFormHtml("0x0000B21F"));//失败
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关
        return CErrorCode::EC_DATA;
    }

    if (0x21 == m_binRecive[4])
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BFAC"), g_GetTxtStringFormHtml("0x0000B0A3"));//完成
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000069"), g_GetTxtStringFormHtml("0x0000C261"));//完成之前中止常规程序
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关
        return iRet;
    }
    else if (m_binRecive.GetByteCount() == 5)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关
        return iRet;
    }
    else if (m_binRecive.GetByteCount() == 6);
    else
    {
        W_I16 iLengh = m_binRecive.GetByteCount() - 1;
        W_U32 iCount = 0;
        for (int i = 5; i < iLengh; i++)
        {
            iCount += m_binRecive[i];
        }
        if (iCount)
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关
            return iRet;
        }
    }

    //step15
    W_I16 iPostion = m_binRecive.GetByteCount() - 1;
    switch (m_binRecive[iPostion])
    {
    case 1:
        //乘载分类系统配置错误    车辆蓄电池电压过低。    重新给蓄电池充电到11.5V以上，然后运行座套更换功能。
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009570"), g_GetTxtStringFormHtml("0x00001F08,0x0000C262,0x0000C263"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关
        return iRet;
    case 2:
        //乘载分类系统配置错误    在制造模式下乘客一侧座椅没有被标定。    完整安装一个新的乘员分级系统（OCS）维修套件，然后运行新乘员分级系统（OCS）配置功能。
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009570"), g_GetTxtStringFormHtml("0x00001F08,0x0000C265,0x0000C266"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关
        return iRet;
    case 3:
        //乘载分类系统配置错误    例行程序已经开始    在重新运行坐垫更换程序之前等待10秒
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009570"), g_GetTxtStringFormHtml("0x00001F08,0x0000C267,0x0000C268"), DF_MB_OK, DT_LEFT);
        PleaseWait_xS_haveTTL(10000, g_GetTxtStringFormHtml("0x00000066"), g_GetTxtStringFormHtml("0x0000B8FE"));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关
        return iRet;
    case 4:
        //乘载分类系统配置错误    乘客分级约束系统的故障码已设置    维修乘客分级约束系统的故障码然后运行坐垫更换程序
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009570"), g_GetTxtStringFormHtml("0x00001F08,0x0000C269,0x0000C26A"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关
        return iRet;
    case 5:
        //乘载分类系统配置错误    配置状态未知    未知故障
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009570"), g_GetTxtStringFormHtml("0x00001F08,0x0000C26B,0x0000C03D"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关
        break;
    case 6:
        //乘载分类系统配置错误    乘客座位上检查到物体    乘客座椅上或者附近不能放置任何物品，以保证例程能够被正确运行    确保座椅组件已经正确安装，并且移除了乘客座椅上得所有物品    重试一次例程，或者运行坐垫更换程序
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009570"), g_GetTxtStringFormHtml("0x00001F08,0x0000C26C,0x0000C26D,0x0000C26E,0x0000C26F"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关
        return iRet;
    case 7:
        //乘载分类系统配置错误    检测到压力波动    确保没有在乘客座椅上或者紧挨着座椅进行操作    确保座椅组件已经正确安装，并且移除了乘客座椅上得所有物品    重试一次例程，或者运行坐垫更换程序    如果故障依然存在，检查软管线路和模块安装是否正确
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009570"), g_GetTxtStringFormHtml("0x00001F08,0x0000C270,0x0000C271,0x0000C26E,0x0000C26F,0x0000C272"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关
        return iRet;
    case 8:
        //乘载分类系统配置错误    环境温度超出范围    确保车辆温度在10到40摄氏度之间    如果必要的话移动车辆并使车辆温度在新地点稳定下来    重试一次例程，或者运行坐垫更换程序
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009570"), g_GetTxtStringFormHtml("0x00001F08,0x0000C273,0x0000C274,0x0000C275,0x0000C26F"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关
        return iRet;
    case 9:
        //控制模块程序成功完成
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009570"), g_GetTxtStringFormHtml("0x0000B0C7"));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关
        PleaseWait_xS_haveTTL(10000, g_GetTxtStringFormHtml("0x00000066"), g_GetTxtStringFormHtml("0x0000B8FE"));
        break;
    default:
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关
        return iRet;
    }

    //step16~
    if (m_stropenfileConfigMenu == "module_special_L550_2017.ctv")
        iRet = ClearSysDTC_Mode_0722(PTL_CAN_11_500K, CBinary("\x07\x65\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x076D);
    else
        iRet = CheckSysDTCNub_model2(PTL_CAN_11_500K, PTL_CAN_11_125K, CBinary("\x07\x65\x08\x03\x19\x02\x0C\x00\x00\x00\x00", 11), CBinary("\x07\xDF\x08\x04\x14\xFF\xFF\xFF\x00\x00\x00", 11), CBinary("\x07\xDF\x08\x03\x19\x02\x0C\x00\x00\x00\x00", 11), 0x076D);

    return iRet;


}



// 踏板控制模块
W_ErrorCode CSeviceFunctionNew::Board_control_NEW_lansheng_L494_2016()
{
    W_ErrorCode iRet = CErrorCode::EC_SUCCESS;
    CSendFrame sendframe;
    CReceiveFrame rfRet;
    W_I16 iKey = 0;
    W_U32 uStandValue = 0x446E64;
    W_I32 P_table[3][8] = { {0x8D1436,0xD3B8D1,0x6BD20F,0x1F25B2,0xF6CAD9,0x21370F,0x8BEFB3,0xDB7CCB},
    {0x7B5B2A,0x3A05E8,0xBC8B7D,0xB4B547,0xA1FA32,0x8E56C9,0xD43D3F,0x64D9C2},
    {0x050029,0xC381FF,0x4E9352,0x55A618,0x63CD9C,0x0B2985,0xDBE0A6,0x7E50F0} };


    //车辆是否配备有踏板系统？  如未配备，请退出应用程序
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000BFE5")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x80001618"), DF_MB_OKCANCEL, DT_LEFT);
    if (DF_IDCANCEL == iKey)
    {
        return iRet;
    }

    //确保在继续执行该程序前，已给车辆装配了一个新的模块
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000C044") + "\n" + "\n" + g_GetTxtStringFormHtml("0x80001618"), DF_MB_OKCANCEL, DT_LEFT);
    if (DF_IDCANCEL == iKey)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B8D1"));//操作人员已中止了次应用程序
        return iRet;
    }


    // 点火打开、发动机、电压、点火关闭
    iRet = CheckEngineStop(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xF4\x0C\x00\x00\x00\x00", 11), 0x07E8, CBinary("\x01\x00", 2));
    if (iRet)
    {
        return iRet;
    }

    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"), DF_MB_ANYKEYRETURN, DT_LEFT);//将点火开关打开

    PleaseWait_xS_haveTTL(5000, g_GetTxtStringFormHtml("0x00000066"), g_GetTxtStringFormHtml("0x0000B8FE"));

    // 随需自检模式
    iRet = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B8FF"), g_GetTxtStringFormHtml("0x9001537C") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9001C263")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OKCANCEL, DT_LEFT);
    if (DF_IDCANCEL == iRet)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000BE88"));//操作人员已中止了此应用程序
        return iRet;
    }


    //链路：11位can125k
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B8FF"), g_GetTxtStringFormHtml("0x0000B09D"), DF_MB_NOBUTTON);
    Sleep(200);
    EnterSystem(PTL_CAN_11_125K, CBinary("\x07\x66\x08\x03\x22\xF1\x03\x00\x00\x00\x00 ", 11), 0x076E);
    SendDataComm(CBinary("\x22\xF1\x03", 3));
    iRet = EnterSystem(PTL_CAN_11_125K, CBinary("\x07\x66\x08\x02\x10\x03\x00\x00\x00\x00\x00", 11), 0x076E);
    if (iRet < 0)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    rfRet = m_rfRet;
    CBinary binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount() < 5)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_DATA;
    }
    m_binRecive = CBinary(binRecive.GetBuffer() + 4, binRecive.GetByteCount() - 4);
    if (checkIs7f(m_binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"), DF_MB_ANYKEYRETURN, DT_LEFT);//ECU不支持
        return iRet;
    }


    //安全访问
    iRet = SafeLogin_L405_2014_Oil(CBinary("\x27\x03", 2), uStandValue, P_table);//0x050029
    if (CErrorCode::EC_ECU_REFUSE == iRet)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000B09F"), DF_MB_ANYKEYRETURN, DT_LEFT);//安全访问失败
        return iRet;
    }
    if (iRet < 0)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }



    m_pNetLayer->KeepLink(1000, CSendFrame(CBinary("\x3E\x00", 2)));

    //step10
    sendframe.SetSendFrame(CBinary("\x31\x01\x02\x02", 4));
    rfRet = SendDataComm(sendframe);
    if (0 == rfRet.GetByteCount())
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }
    m_binRecive = rfRet.GetFirst();
    if (checkIs7f(m_binRecive))
    {
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"), DF_MB_ANYKEYRETURN, DT_LEFT);//ECU不支持
        return iRet;
    }
    if (m_binRecive.GetByteCount() < 4 || m_binRecive[0] != 0x71 || m_binRecive[1] != 1 || m_binRecive[2] != 2 || m_binRecive[3] != 2)
    {
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B8FF"), g_GetTxtStringFormHtml("0x0000B21F"), DF_MB_ANYKEYRETURN, DT_LEFT);//失败
        return iRet;
    }

    //step11
    Sleep(2000);
    sendframe.SetSendFrame(CBinary("\x31\x03\x02\x02", 4));
    rfRet = SendDataComm(sendframe);
    if (0 == rfRet.GetByteCount())
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    m_binRecive = rfRet.GetFirst();
    sendframe.SetSendFrame(CBinary("\x10\x01", 2));
    rfRet = SendDataComm(sendframe);
    if (checkIs7f(m_binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"), DF_MB_ANYKEYRETURN, DT_LEFT);//ECU不支持
        return iRet;
    }
    if (m_binRecive.GetByteCount() < 4 || m_binRecive[0] != 0x71 || m_binRecive[1] != 3 || m_binRecive[2] != 2 || m_binRecive[3] != 2 || (m_binRecive.GetByteCount() > 4 && m_binRecive[4] != 1 && m_binRecive[4] != 2))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B8FF"), g_GetTxtStringFormHtml("0x0000B21F"), DF_MB_ANYKEYRETURN, DT_LEFT);//失败
        return iRet;
    }


    // 随需自检模式-完成
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B8FF"), g_GetTxtStringFormHtml("0x0000B8FF") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002A16C")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OK, DT_LEFT);

    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_ANYKEYRETURN, DT_LEFT);//关闭点火开关

    //step12~
    iRet = CheckSysDTCNub_model1(PTL_CAN_11_125K, PTL_CAN_11_500K, CBinary("\x07\x66\x08\x03\x19\x02\x0C\x00\x00\x00\x00", 11), CBinary("\x07\xDF\x08\x04\x14\xFF\xFF\xFF\x00\x00\x00", 11), 0x076E);

    return iRet;

}


// 后门行李箱模块
W_ErrorCode CSeviceFunctionNew::Back_door_modules_NEW_lansheng_L494_2016()
{
    W_ErrorCode iRet = CErrorCode::EC_SUCCESS;
    W_U32 uStandValue = 0x4EE954;
    W_I16 iKey;
    W_I32 P_table[3][8] = { {0x879306,0xD93FE1,0x61553F,0x15A282,0xFC4DE9,0x2BB03F,0x816883,0xD1FBFB},
    {0x71DC1A,0x3082D8,0xB60C4D,0xBE3277,0xAB7D02,0x84D1F9,0xDEBA0F,0x6E5EF2},
    {0x0F8719,0xC906CF,0x441462,0x5F2128,0x694AAC,0x01AEB5,0xD16796,0x74D7C0} };

    CSendFrame sendframe;
    CReceiveFrame rfRet;
    CVehicleComm ecuInter;
    CBinary binRecive;

    // 点火打开、发动机、电压、点火关闭  500K
    iRet = CheckEngineStop(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xF4\x0C\x00\x00\x00\x00", 11), 0x07E8, CBinary("\x01\x00", 2));
    if (iRet)
        return iRet;


    // 125K

    //确保在继续执行该程序前，已给车辆装配了一个新的模块
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000C044") + "\n" + "\n" + g_GetTxtStringFormHtml("0x80001618"), DF_MB_OKCANCEL, DT_LEFT);
    if (DF_IDCANCEL == iKey)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B8D1"));//操作人员已中止了次应用程序
        return iRet;
    }

    //  如果尾门尚未关闭，手动关闭尾门.  确保尾门锁扣进入其主要（完全关闭）位置.
    FxShowMessageBox(g_GetTxtStringFormHtml("0x9000238B"), g_GetTxtStringFormHtml("0x0000BFFE") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000C010")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OK, DT_LEFT);

    // 点火打开
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"));

    // 尾门／行李箱校准-清除调适值
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x9000238B"), g_GetTxtStringFormHtml("0x0000C022") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000B10F")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OKCANCEL, DT_LEFT);
    if (DF_IDCANCEL == iKey)
        return iRet;

    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//正在建立车辆通讯
    Sleep(800);

    EnterSystem(PTL_CAN_11_125K, CBinary("\x07\x75\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x077D);
    ecuInter.SendReceive(CBinary("\x40\x00\x07\x75\x22\xF1\x03", 7));
    sendframe.SetSendFrame(CBinary("\x10\x03", 2));
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount() < 2)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }
    if (checkIs7f(binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return CErrorCode::EC_ECU_REFUSE;
    }

    //安全访问
    iRet = SafeLogin_L405_2014_Oil(CBinary("\x27\x03", 2), uStandValue, P_table);  // 0F 87 19
    if (CErrorCode::EC_ECU_REFUSE == iRet)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000B09F"));//安全访问失败
        return CErrorCode::EC_ECU_REFUSE;
    }
    if (iRet < 0)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }
    m_pNetLayer->KeepLink(0);//断开链路

    sendframe.SetSendFrame(CBinary("\x31\x01\x04\x02", 4));  // 07 75 08 04 31 01 04 02 00 00 00
    rfRet = SendDataComm(sendframe);
    m_binRecive = rfRet.GetFirst();
    if (m_binRecive.GetByteCount() < 4
        || m_binRecive[0] != 0x71
        || m_binRecive[1] != 0x01
        || m_binRecive[2] != 0x04
        || m_binRecive[3] != 0x02)
    {
        ecuInter.SendReceive(CBinary("\x40\x00\x07\x75\x10\x01", 6));
        if (0 == m_binRecive.GetByteCount())
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        else if (checkIs7f(m_binRecive))
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持

        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000C022"), g_GetTxtStringFormHtml("0x0000B21F"));//失败
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B99E"), g_GetTxtStringFormHtml("0x0000B99F,0x00004BE4"), DF_MB_OK, DT_LEFT);//一般故障
        return CErrorCode::EC_DATA;
    }

    m_pNetLayer->KeepLink(3000, CSendFrame(CBinary("\x3E\x80", 2)));//链路保持

    PleaseWait_xS_haveTTL(8000, g_GetTxtStringFormHtml("0x0000B09D"), g_GetTxtStringFormHtml("0x0000C022"));//尾门／行李箱校准-请等待

    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通信中
    Sleep(800);
    ecuInter.SendReceive(CBinary("\x40\x00\x07\x75\x10\x01", 6));
    m_pNetLayer->KeepLink(0);//链路关闭

    // 尾门／行李箱校准-完成
    FxShowMessageBox(g_GetTxtStringFormHtml("0x9000238B"), g_GetTxtStringFormHtml("0x0000C022") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002A16C")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OK, DT_LEFT);

    //step07 重置止动位置值
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000C022"), g_GetTxtStringFormHtml("0x0000C01B"), DF_MB_NOBUTTON);

    CMessageBoxCtrl::SetBusyStatus(true); //漏斗打开
    Sleep(1000);
    CMessageBoxCtrl::SetBusyStatus(false);//漏斗关闭

    //step08 模块初始化
    PleaseWait_xS_haveTTL(5000, g_GetTxtStringFormHtml("0x00000066"), g_GetTxtStringFormHtml("0x0000B8FE"));

    ecuInter.SendReceive(CBinary("\x40\x00\x07\x75\x22\xF1\x03", 7));
    ecuInter.SendReceive(CBinary("\x40\x00\x07\x75\x22\xF1\x03", 7));
    ecuInter.SendReceive(CBinary("\x40\x00\x07\x75\x10\x01", 6));
    sendframe.SetSendFrame(CBinary("\x22\xD9\x15", 3));  // 07 75 08 03 22 D9 15 00 00 00 00
    rfRet = SendDataComm(sendframe);
    m_binRecive = rfRet.GetFirst();
    if (m_binRecive.GetByteCount() < 5
        || m_binRecive[0] != 0x62
        || m_binRecive[1] != 0xD9
        || m_binRecive[2] != 0x15
        || m_binRecive[3] != 0xFF
        || m_binRecive[4] != 0xFF)
    {
        if (0 == m_binRecive.GetByteCount())
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        else if (checkIs7f(m_binRecive))
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持

        ecuInter.SendReceive(CBinary("\x40\x00\x07\x75\x10\x01", 6));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B99E"), g_GetTxtStringFormHtml("0x0000B99F,0x00004BE4"), DF_MB_OK, DT_LEFT);//一般故障
        return CErrorCode::EC_DATA;
    }

    // 确保尾门打开
    FxShowMessageBox(g_GetTxtStringFormHtml("0x9000238B"), g_GetTxtStringFormHtml("0x900081C4") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9000EC1B")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x9000EC16") + "\n" + "\n" + g_GetTxtStringFormHtml("0x90022F9A")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OK, DT_LEFT);

    // 模块初始化
    PleaseWait_xS_haveTTL(5000, g_GetTxtStringFormHtml("0x00000066"), g_GetTxtStringFormHtml("0x0000B8FE"));

    ecuInter.SendReceive(CBinary("\x40\x00\x07\x75\x22\xF1\x03", 7));
    ecuInter.SendReceive(CBinary("\x40\x00\x07\x75\x22\xF1\x03", 7));
    ecuInter.SendReceive(CBinary("\x40\x00\x07\x75\x10\x01", 6));
    sendframe.SetSendFrame(CBinary("\x22\xD9\x15", 3));  // 07 75 08 03 22 D9 15 00 00 00 00
    rfRet = SendDataComm(sendframe);
    m_binRecive = rfRet.GetFirst();
    while (1)
    {
        if (m_binRecive.GetByteCount() > 3 && m_binRecive[0] == 0x62 && m_binRecive[1] == 0xD9 && m_binRecive[2] == 0x15)
            break;

        if (0 == m_binRecive.GetByteCount())
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        else if (checkIs7f(m_binRecive))
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持

        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关        
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B99E"), g_GetTxtStringFormHtml("0x0000B99F,0x00004BE4"), DF_MB_OK, DT_LEFT);//一般故障
        return CErrorCode::EC_DATA;
    }

    W_U32 iCount = 0;
    if (m_binRecive.GetByteCount() > 4)
        iCount = m_binRecive[3] * 256 + m_binRecive[4];

    if (m_stropenfileConfigMenu == "module_special_L538_2017.ctv"
        || m_stropenfileConfigMenu == "module_special_L538JV_2016.ctv"
        || m_stropenfileConfigMenu == "module_special_X761_2017.cvt"
        || m_stropenfileConfigMenu == "module_special_X152_2014"
        || m_stropenfileConfigMenu == "module_special_X351_2013"
        || m_stropenfileConfigMenu == "module_special_X351_2010")
    {
        if (iCount < 0x400 || iCount > 0xC00)
            iCount = 0;
    }
    else
    {
        if (iCount < 0x76C || iCount > 0xE10)   // <1900    >3600
            iCount = 0;
    }
    m_pNetLayer->KeepLink(0);
    //stepNN
    if (!iCount)  // 不为否
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//点火关闭
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000069"), g_GetTxtStringFormHtml("0x0000006A,0x0000B105"), DF_MB_OK, DT_LEFT);//程序未能完成.    必须调查该问题.
        return CErrorCode::EC_DATA;
    }

    // 尾门的自动关闭
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x9000238B"), g_GetTxtStringFormHtml("0x9002A3D3") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002A3D4")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OKCANCEL, DT_LEFT);
    if (DF_IDCANCEL == iKey)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B8D1"));//操作人员已中止了此应用程序
        return iRet;
    }


    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通讯中
    Sleep(800);

    // 尾门的自动关闭
    PleaseWait_xS_haveTTL(5000, g_GetTxtStringFormHtml("0x9002A3D3"), g_GetTxtStringFormHtml("0x9002A3D3"));

    //链路：11位can125k
    EnterSystem(PTL_CAN_11_125K, CBinary("\x07\x75\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x077D);
    ecuInter.SendReceive(CBinary("\x40\x00\x07\x75\x22\xF1\x03", 7));
    sendframe.SetSendFrame(CBinary("\x10\x03", 2));
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount() < 2)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }
    if (checkIs7f(binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return CErrorCode::EC_ECU_REFUSE;
    }

    //安全访问
    iRet = SafeLogin_L405_2014_Oil(CBinary("\x27\x03", 2), uStandValue, P_table);  // 0F 87 19
    if (CErrorCode::EC_ECU_REFUSE == iRet)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000B09F"));//安全访问失败
        return CErrorCode::EC_ECU_REFUSE;
    }
    if (iRet < 0)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }
    m_pNetLayer->KeepLink(0);//断开链路

    sendframe.SetSendFrame(CBinary("\x31\x01\xF0\x02", 4)); // 07 75 08 04 31 01 F0 02 00 00 00
    rfRet = SendDataComm(sendframe);
    m_binRecive = rfRet.GetFirst();
    if (m_binRecive.GetByteCount() < 4
        || m_binRecive[0] != 0x71
        || m_binRecive[1] != 0x01
        || m_binRecive[2] != 0xF0
        || m_binRecive[3] != 0x02)
    {
        ecuInter.SendReceive(CBinary("\x40\x00\x07\x75\x10\x01", 6));
        if (0 == m_binRecive.GetByteCount())
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        else if (checkIs7f(m_binRecive))
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持

        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B99E"), g_GetTxtStringFormHtml("0x0000B99F,0x00004BE4"), DF_MB_OK, DT_LEFT);//一般故障
        return CErrorCode::EC_DATA;
    }

    m_pNetLayer->KeepLink(3000, CSendFrame(CBinary("\x3E\x80", 2)));//链路保持

    PleaseWait_xS_haveTTL(5000, g_GetTxtStringFormHtml("0x0000B09D"), g_GetTxtStringFormHtml("0x0000C022"));//学习车辆标识号-请等待

    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通信中
    Sleep(800);
    ecuInter.SendReceive(CBinary("\x40\x00\x07\x75\x10\x01", 6));
    m_pNetLayer->KeepLink(0);//链路关闭

    // 尾门的自动关闭-完成
    FxShowMessageBox(g_GetTxtStringFormHtml("0x9000238B"), g_GetTxtStringFormHtml("0x9002A3D3") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002A16C")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OK, DT_LEFT);

    // 模块初始化
    PleaseWait_xS_haveTTL(5000, g_GetTxtStringFormHtml("0x00000066"), g_GetTxtStringFormHtml("0x0000B8FE"));

    // 此程序将读取尾门锁扣状态的存储值以便确定尾门完全关闭
    FxShowMessageBox(g_GetTxtStringFormHtml("0x900120FF"), g_GetTxtStringFormHtml("0x0000C021"), DF_MB_NOBUTTON);

    CMessageBoxCtrl::SetBusyStatus(true); //漏斗打开
    Sleep(1000);
    CMessageBoxCtrl::SetBusyStatus(false);//漏斗关闭

    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通讯中
    Sleep(800);

    iRet = EnterSystem(PTL_CAN_11_125K, CBinary("\x07\x75\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x077D);
    SendDataComm(CBinary("\x22\xF1\x03", 3));
    ecuInter.SendReceive(CBinary("\x40\x00\x07\x75\x10\x01", 6));
    sendframe.SetSendFrame(CBinary("\x22\xD9\x08", 3));  // 07 75 08 03 22 D9 08 00 00 00 00
    rfRet = SendDataComm(sendframe);
    m_binRecive = rfRet.GetFirst();
    if (m_binRecive.GetByteCount() < 4
        || m_binRecive[0] != 0x62
        || m_binRecive[1] != 0xD9
        || m_binRecive[2] != 0x08)
    {
        if (0 == m_binRecive.GetByteCount())
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        else if (checkIs7f(m_binRecive))
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持

        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B99E"), g_GetTxtStringFormHtml("0x0000B99F,0x00004BE4"), DF_MB_OK, DT_LEFT);//一般故障
        return CErrorCode::EC_DATA;
    }

    if (m_binRecive[3] != 1)  // 07 7D 08 04 62 D9 08 01 00 00 00
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000069"), g_GetTxtStringFormHtml("0x0000006A,0x0000B105"), DF_MB_OK, DT_LEFT);//程序未能完成-必须调查该问题
        return CErrorCode::EC_DATA;
    }

    // 点火关闭
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));

    // 点火打开
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"));

    //学习车辆标识，  如果以前记忆了车辆标识号，本程序将反馈指示未成功操作的状态.  使用该程序无法覆盖以前输入的车辆标识号.
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A61"), g_GetTxtStringFormHtml("0x90025FAD") + "\n" + "\n" +
        g_GetTxtStringFormHtml("0x0000BD33") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OKCANCEL, DT_LEFT);
    if (DF_IDCANCEL == iKey)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B8D1"));//操作人员已中止了此应用程序
        return iRet;
    }

    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通讯中
    Sleep(800);

    EnterSystem(PTL_CAN_11_125K, CBinary("\x07\x75\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x077D);
    ecuInter.SendReceive(CBinary("\x40\x00\x07\x75\x22\xF1\x03", 7));
    sendframe.SetSendFrame(CBinary("\x10\x03", 2));
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount() < 2)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }
    if (checkIs7f(binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return CErrorCode::EC_ECU_REFUSE;
    }

    sendframe.SetSendFrame(CBinary("\x31\x01\x04\x04", 4));  // 07 75 08 04 31 01 04 04 00 00 00
    rfRet = SendDataComm(sendframe);
    m_binRecive = rfRet.GetFirst();
    if (m_binRecive.GetByteCount() < 4
        || m_binRecive[0] != 0x71
        || m_binRecive[1] != 0x01
        || m_binRecive[2] != 0x04
        || m_binRecive[3] != 0x04)
    {
        ecuInter.SendReceive(CBinary("\x40\x00\x07\x75\x10\x01", 6));
        if (0 == m_binRecive.GetByteCount())
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        else if (checkIs7f(m_binRecive))
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        else
            FxShowMessageBox(g_GetTxtStringFormHtml("0x0000C045"), g_GetTxtStringFormHtml("0x0000B21F"));//失败

        //stepNN
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B99E"), g_GetTxtStringFormHtml("0x0000B99F,0x00004BE4"), DF_MB_OK, DT_LEFT);//一般故障
        return CErrorCode::EC_DATA;
    }

    m_pNetLayer->KeepLink(3000, CSendFrame(CBinary("\x3E\x80", 2)));//链路保持
    PleaseWait_xS_haveTTL(5000, g_GetTxtStringFormHtml("0x0000B09D"), g_GetTxtStringFormHtml("0x0000C045"));//学习车辆标识号-请等待
    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通信中
    Sleep(800);
    ecuInter.SendReceive(CBinary("\x40\x00\x07\x75\x10\x01", 6));
    m_pNetLayer->KeepLink(0);//断开链路

    // 学习车辆标识号-完成
    FxShowMessageBox(g_GetTxtStringFormHtml("0x9000238B"), g_GetTxtStringFormHtml("0x0000C045") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002A16C")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OK, DT_LEFT);

    // 点火关闭
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));

    // 控制模块程序成功完成
    FxShowMessageBox(g_GetTxtStringFormHtml("0x9000238B"), g_GetTxtStringFormHtml("0x0000B0C7") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OK, DT_LEFT);

    // 故障码
    iRet = CheckSysDTCNub_model1(PTL_CAN_11_125K, PTL_CAN_11_500K, CBinary("\x07\x75\x08\x03\x19\x02\x0C\x00\x00\x00\x00", 11), CBinary("\x07\x75\x08\x04\x14\xFF\xFF\xFF\x00\x00\x00", 11), 0x077D);

    return iRet;


}






// 转向角传感器模块
W_ErrorCode CSeviceFunctionNew::ConfigureNewModules_NEW_lansehng_L494_2016()
{
    W_ErrorCode iRet = CErrorCode::EC_SUCCESS;

    W_I16 iKey = 0;
    CSendFrame sendframe;
    CReceiveFrame rfRet;

    //step1        
    //确保在继续执行该程序前，已给车辆装配了一个新的模块
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000C044") + "\n" + "\n" + g_GetTxtStringFormHtml("0x80001618"), DF_MB_OKCANCEL, DT_LEFT);
    if (iKey == DF_IDCANCEL)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B8D1"), DF_MB_ANYKEYRETURN);//操作人员已中止了此应用程序.
        return 0;
    }


    iKey = CheckEngineStop(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xF4\x0C\x00\x00\x00\x00", 11), 0x07E8, CBinary("\x01\x00", 2));
    if (iRet != 0)
        return 0;


    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"));//将点火开关打开（位置 2）.

    //step2
    //执行随需自检将会使相关控制模块执行预定义的测试，这将导致任何相关的故障代码被记录（如果存在故障）
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B8FF"), g_GetTxtStringFormHtml("0x9001537C") + "\n" + "\n"
        + g_GetTxtStringFormHtml("0x9001C263") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OKCANCEL, DT_LEFT);
    if (iKey == DF_IDCANCEL)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B8D1"), DF_MB_ANYKEYRETURN);//操作人员已中止了此应用程序.
        return iRet;
    }

    //step3
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B09D"), DF_MB_NOBUTTON);
    string strOpenfileConfigMenu = m_stropenfileConfigMenu;
    CJLRStringOperate strOpt;
    strOpt.Replace(strOpenfileConfigMenu, ".ctv", "");
    //链路：11位can500k

    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x97\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x079F);
    SendDataComm(CBinary("\x22\xf1\x03", 3));
    sendframe.SetSendFrame(CBinary("\x10\x01", 2));
    SendDataComm(sendframe);
    m_pNetLayer->KeepLink(2000, CSendFrame(CBinary("\x3E\x80", 2)));//链路保持

    if (iRet < 0)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return iRet;
    }


    rfRet = m_rfRet;
    m_binRecive = rfRet.GetFirst();
    if (m_binRecive.GetByteCount())
    {
        m_binRecive = CBinary(m_binRecive.GetBuffer() + 4, m_binRecive.GetByteCount() - 4);
        if (checkIs7f(m_binRecive))
        {
            CMessageBoxCtrl::SetBusyStatus(false);
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
            return CErrorCode::EC_ECU_REFUSE;
        }
    }

    sendframe.SetSendFrame(CBinary("\x31\x01\x02\x02", 4));  // 07 97 08 04 31 01 02 02 00 00 00
    rfRet = SendDataComm(sendframe);
    if (rfRet.GetByteCount() == 0)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }
    if (checkIs7f(rfRet))
    {
        FxShowMessageBox(FxGetStdString(STD_TTL_MSG_INFORMATION), g_GetTxtStringFormHtml("0x0000006A"), DF_MB_BACK);
        return iRet;
    }
    CBinary binAns = rfRet.GetFirst();
    if (binAns.GetByteCount() < 4 || (binAns[0] != 0x71 || binAns[1] != 0x01 || binAns[2] != 0x02 || binAns[3] != 0x02))
    {
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        if (rfRet.GetByteCount() == 0)
        {
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_TIME_OVER;
        }
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B918"), g_GetTxtStringFormHtml("0x0000B21F"), DF_MB_ANYKEYRETURN);    //失败
        return 0;
    }

    Sleep(3000);

    sendframe.SetSendFrame(CBinary("\x31\x03\x02\x02", 4));
    rfRet = SendDataComm(sendframe);
    if (rfRet.GetByteCount() == 0)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }
    if (checkIs7f(rfRet))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"), DF_MB_BACK);
        return iRet;
    }
    binAns = rfRet.GetFirst();
    if (binAns.GetByteCount() < 4 || (binAns[0] != 0x71 || binAns[1] != 0x03 || binAns[2] != 0x02 || binAns[3] != 0x02))
    {
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        if (rfRet.GetByteCount() == 0)
        {
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_TIME_OVER;
        }
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B918"), g_GetTxtStringFormHtml("0x0000B21F"), DF_MB_ANYKEYRETURN);    //失败
        return 0;
    }


    if (binAns.GetByteCount() > 4 && binAns[4] < 0x03)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B8FF"), g_GetTxtStringFormHtml("0x0000B21F"));
        return CErrorCode::EC_DATA;
    }


    // 随需自检模式完成
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BEBD"), g_GetTxtStringFormHtml("0x0000B8FF") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002A16C")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OK, DT_LEFT);

    iRet = CheckSysDTCNub(PTL_CAN_11_500K, PTL_CAN_11_125K, CBinary("\x07\x97\x08\x03\x19\x02\x0C\x00\x00\x00\x00", 11), CBinary("\x07\xDF\x08\x04\x14\xFF\xFF\xFF\x00\x00\x00", 11), 0x079F);

    return iRet;

}


// 卫星音频单元模块
W_ErrorCode CSeviceFunctionNew::Satellite_modules_NEW_lansheng_L494_2016()
{
    W_ErrorCode iRet = CErrorCode::EC_SUCCESS;
    W_I16 iKey = 0;

    CSendFrame sendframe;
    CReceiveFrame rfRet;
    CBinary binRecive;
    string strTemp;
    CVehicleComm ecuInter;

    int iDtcNub;
    string str;
    char    chvalue[500];

    //step01 确保在继续执行该程序前，已给车辆装配了一个新的模块
    iRet = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000004E"), g_GetTxtStringFormHtml("0x0000C044")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x80001618"), DF_MB_OKCANCEL, DT_LEFT);
    if (DF_IDCANCEL == iRet)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000BE88"));//操作人员已中止了此应用程序
        return iRet;
    }

    // 500K
    // 点火打开、发动机、电压、点火关闭
    iRet = CheckEngineStop(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xF4\x0C\x00\x00\x00\x00", 11), 0x07E8, CBinary("\x01\x00", 2));
    if (iRet)
    {
        return iRet;
    }


    // 125K

    CMessageBoxCtrl::SetBusyStatus(true);
    // 执行诊断命令完成
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000C100"), g_GetTxtStringFormHtml("0x900019A5") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002A16C"), DF_MB_NOBUTTON, DT_LEFT);
    Sleep(500);
    CMessageBoxCtrl::SetBusyStatus(false);

    EnterSystem(PTL_CAN_11_125K, CBinary("\x07\xA5\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x07AD);


    // 点火打开
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"));

    // 模块初始化
    PleaseWait_xS(10000, g_GetTxtStringFormHtml("0x00000066"));

    // 点火关闭
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"));

    // 点火打开
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"));

    PleaseWait_xS_haveTTL(5000, g_GetTxtStringFormHtml("0x90021E19"), g_GetTxtStringFormHtml("0x0000005F"));//正在读取故障代码
    CBinaryGroup bgDtc;//关闭0 + 打开2

    EnterSystem(PTL_CAN_11_125K, CBinary("\x07\xA5\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x07AD);
    sendframe.SetSendFrame(CBinary("\x10\x03", 2));
    rfRet = SendDataComm(sendframe);
    ecuInter.SendReceive(CBinary("\x40\x00\x07\xA5\x31\x01\x03\x00\x00\x81", 10));
    sendframe.SetSendFrame(CBinary("\x19\x02\x0C", 3));
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount())
    {
        if (binRecive.GetByteCount())
        {
            if (binRecive[0] == 0x7F)
                iDtcNub = 0;
            else
                iDtcNub = (binRecive.GetByteCount() - 3) / 4;
        }
    }
    else
        iDtcNub = 0;

    ecuInter.SendReceive(CBinary("\x40\x00\x07\xA5\x31\x02\x03\x00", 8));
    sendframe.SetSendFrame(CBinary("\x10\x01", 2));
    rfRet = SendDataComm(sendframe);

    if (iDtcNub > 0)
    {
        str.clear();
        strTemp = g_GetTxtStringFormHtml("0x0000B92B");//已记录的故障诊断码：%d
        sprintf(chvalue, strTemp.c_str(), iDtcNub);
        str += chvalue;
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B92C"), str + "\n" + g_GetTxtStringFormHtml("0x0000B158"), DF_MB_OK, DT_LEFT); //故障码诊断码清除与读取
    }
    else
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B92C"), g_GetTxtStringFormHtml("0x0000B0C7"));//控制模块程序成功完成.

    iRet = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B92D"), g_GetTxtStringFormHtml("0x0000B92E,0x0000B111"), DF_MB_OKCANCEL, DT_LEFT);//操作信息下一程序将执行完整的车辆故障诊断代码清除.

    if (iRet == DF_IDCANCEL)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B92D,0x0000B92A"));//故障诊断代码清除与重新读取中止
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x90008087"));//点火关闭    
        return CErrorCode::EC_TIME_OVER;
    }

    FxShowMessageBox(FxGetStdString(STD_INFO_COMMUNICATION_STATUS), g_GetTxtStringFormHtml("0x0000B09D"), DF_MB_NOBUTTON, DT_LEFT);//正在通信中，请等待
    PleaseWait_xS_haveTTL(15000, g_GetTxtStringFormHtml("0x0000B92D"), g_GetTxtStringFormHtml("0x0000005F"));//清除所有故障码代码

    EnterSystem(PTL_CAN_11_500K, CBinary("\x07\xDF\x08\x02\x01\x00\x00\x00\x00\x00\x00", 11), 0x07E8);
    sendframe.SetSendFrame(CBinary("\x14\xFF\xFF\xFF", 4));
    rfRet = SendDataComm(sendframe);
    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x26\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x072E);
    sendframe.SetSendFrame(CBinary("\x10\x03", 2));
    rfRet = SendDataComm(sendframe);
    SafeLogin_Standard3(CBinary("\x27\x21", 2), 0x88703A);
    sendframe.SetSendFrame(CBinary("\x31\x01\x70\x01", 4));
    rfRet = SendDataComm(sendframe);

    ecuInter.SendReceive(CBinary("\x40\x00\x07\x22\x14\xFF\xFF\xFF", 8));
    ecuInter.SendReceive(CBinary("\x40\x00\x07\x26\x31\x02\x70\x01", 8));
    sendframe.SetSendFrame(CBinary("\x10\x01", 2));
    rfRet = SendDataComm(sendframe);
    m_pNetLayer->KeepLink(0);//打断链路

    if (m_stropenfileConfigMenu == "module_special_L538JV_2016.ctv")
    {
        EnterSystem(PTL_CAN_11_125K, CBinary("\x07\xA5\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x07AD);
        sendframe.SetSendFrame(CBinary("\x10\x03", 2));
        rfRet = SendDataComm(sendframe);
        ecuInter.SendReceive(CBinary("\x40\x00\x07\xA5\x31\x01\x03\x00\x00\x86", 10));
        ecuInter.SendReceive(CBinary("\x40\x00\x07\xA5\x14\xFF\xFF\xFF", 8));
        ecuInter.SendReceive(CBinary("\x40\x00\x07\xA5\x31\x02\x03\x00", 8));
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);

        ecuInter.SendReceive(CBinary("\x40\x00\x07\xA5\x22\xF1\x03", 7));
        sendframe.SetSendFrame(CBinary("\x10\x03", 2));
        rfRet = SendDataComm(sendframe);
        ecuInter.SendReceive(CBinary("\x40\x00\x07\xA5\x31\x01\x03\x00\x00\x80", 10));
        ecuInter.SendReceive(CBinary("\x40\x00\x07\xA5\x14\xFF\xFF\xFF", 8));
        ecuInter.SendReceive(CBinary("\x40\x00\x07\xA5\x31\x02\x03\x00", 8));
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);

        ecuInter.SendReceive(CBinary("\x40\x00\x07\xA5\x22\xF1\x03", 7));
        sendframe.SetSendFrame(CBinary("\x10\x03", 2));
        rfRet = SendDataComm(sendframe);
        ecuInter.SendReceive(CBinary("\x40\x00\x07\xA5\x31\x01\x03\x00\x00\x85", 10));
        ecuInter.SendReceive(CBinary("\x40\x00\x07\xA5\x14\xFF\xFF\xFF", 8));
        ecuInter.SendReceive(CBinary("\x40\x00\x07\xA5\x31\x02\x03\x00", 8));
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);

        ecuInter.SendReceive(CBinary("\x40\x00\x07\xA5\x22\xF1\x03", 7));
        sendframe.SetSendFrame(CBinary("\x10\x03", 2));
        rfRet = SendDataComm(sendframe);
        ecuInter.SendReceive(CBinary("\x40\x00\x07\xA5\x31\x01\x03\x00\x00\x68", 10));
        ecuInter.SendReceive(CBinary("\x40\x00\x07\xA5\x14\xFF\xFF\xFF", 8));
        ecuInter.SendReceive(CBinary("\x40\x00\x07\xA5\x31\x02\x03\x00", 8));
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);

        ecuInter.SendReceive(CBinary("\x40\x00\x07\xA5\x22\xF1\x03", 7));
        sendframe.SetSendFrame(CBinary("\x10\x03", 2));
        rfRet = SendDataComm(sendframe);
        ecuInter.SendReceive(CBinary("\x40\x00\x07\xA5\x31\x01\x03\x00\x00\x8B", 10));
        ecuInter.SendReceive(CBinary("\x40\x00\x07\xA5\x14\xFF\xFF\xFF", 8));
        ecuInter.SendReceive(CBinary("\x40\x00\x07\xA5\x31\x02\x03\x00", 8));
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);

        ecuInter.SendReceive(CBinary("\x40\x00\x07\xA5\x22\xF1\x03", 7));
        sendframe.SetSendFrame(CBinary("\x10\x03", 2));
        rfRet = SendDataComm(sendframe);
        ecuInter.SendReceive(CBinary("\x40\x00\x07\xA5\x31\x01\x03\x00\x00\x81", 10));
        ecuInter.SendReceive(CBinary("\x40\x00\x07\xA5\x14\xFF\xFF\xFF", 8));
        ecuInter.SendReceive(CBinary("\x40\x00\x07\xA5\x31\x02\x03\x00", 8));
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);

        ecuInter.SendReceive(CBinary("\x40\x00\x07\xA5\x22\xF1\x03", 7));
        sendframe.SetSendFrame(CBinary("\x10\x03", 2));
        rfRet = SendDataComm(sendframe);
        ecuInter.SendReceive(CBinary("\x40\x00\x07\xA5\x31\x01\x03\x00\x00\x87", 10));
        ecuInter.SendReceive(CBinary("\x40\x00\x07\xA5\x14\xFF\xFF\xFF", 8));
        ecuInter.SendReceive(CBinary("\x40\x00\x07\xA5\x31\x02\x03\x00", 8));
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
    }

    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x90008087"));//点火关闭    
    PleaseWait_xS(10000, g_GetTxtStringFormHtml("0x0000BA11"));//正在初始化
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"));//点火打开

    ecuInter.SendReceive(CBinary("\x40\x00\x07\xA5\x22\xF1\x03", 7));
    sendframe.SetSendFrame(CBinary("\x10\x03", 2));
    rfRet = SendDataComm(sendframe);
    ecuInter.SendReceive(CBinary("\x40\x00\x07\xA5\x31\x01\x03\x00\x00\x81", 10));
    sendframe.SetSendFrame(CBinary("\x19\x02\x0C", 3));
    rfRet = SendDataComm(sendframe);
    ecuInter.SendReceive(CBinary("\x40\x00\x07\xA5\x31\x02\x03\x00", 8));
    sendframe.SetSendFrame(CBinary("\x10\x01", 2));
    rfRet = SendDataComm(sendframe);

    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B92C"), str + "\n" + g_GetTxtStringFormHtml("0x0000B158"), DF_MB_OK, DT_LEFT); //已记录的故障诊断码:%
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B92C"), g_GetTxtStringFormHtml("0x0000BA28"), DF_MB_OK, DT_LEFT);//控制模块程序已完成，已记录故障码

    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x90008087"));//点火关闭

    return iRet;


}



// 右侧安全带预警器
W_ErrorCode CSeviceFunctionNew::Safety_belt_right_NEW_lansheng_L494_2016()
{
    W_ErrorCode iRet = CErrorCode::EC_SUCCESS;
    CSendFrame sendframe;
    CReceiveFrame rfRet;
    W_I16 iKey = 0;
    CBinary binEnterCmd;//10 03进系统指令
    CBinary binEnterCmd2;//10 01进系统指令
    CBinary binQuitCmd;//10 01退出系统指令
    W_U32 enterPara;//进系统地址
    CVehicleComm ecuInter;
    string strPormot;//部分车型、选择不同，某些地方标题不同
    CJLRStringOperate strOpt;
    string strOpenFile = m_stropenfileConfigMenu;
    strOpt.Replace(strOpenFile, ".ctv", "");

    binEnterCmd = CBinary("\x07\xD1\x08\x02\x10\x03\x00\x00\x00\x00\x00", 11);
    binEnterCmd2 = CBinary("\x07\xD1\x08\x02\x10\x01\x00\x00\x00\x00\x00", 11);
    binQuitCmd = CBinary("\x40\x00\x07\xD1\x10\x01", 6);
    enterPara = 0x07D9;
    strPormot = g_GetTxtStringFormHtml("0x0000BD15"); // 右侧

    //step1
    //确保在继续执行该程序前，已给车辆装配了一个新的模块
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000C044") + "\n" + "\n" + g_GetTxtStringFormHtml("0x80001618"), DF_MB_OKCANCEL, DT_LEFT);
    if (DF_IDCANCEL == iKey)
        return iRet;

    //step2~6
    iRet = CheckEngineStop(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xF4\x0C\x00\x00\x00\x00", 11), 0x07E8, CBinary("\x01\x00", 2));
    if (iRet)
        return iRet;


    while (1)
    {
        //step7
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x90009E9C"));//确保点火开关打开

        PleaseWait_xS_haveTTL(10000, g_GetTxtStringFormHtml("0x00000066"), g_GetTxtStringFormHtml("0x0000B8FE"));

        //step8
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B916"), g_GetTxtStringFormHtml("0x0000B09D"), DF_MB_NOBUTTON);
        Sleep(500);
        m_pNetLayer->KeepLink(0);//断开链路保持

        //链路：11位can

        iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\xD1\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x07D9);
        sendframe.SetSendFrame(CBinary("\x22\xf1\x03", 3));
        SendDataComm(sendframe);
        iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\xD1\x08\x04\x14\xFF\xFF\xFF\x00\x00\x00", 11), 0x07D9);


        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x90009FF7"));// 确保关闭点火开关
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x90009E9C"));// 确保将点火开关打开
        PleaseWait_xS_haveTTL(10000, g_GetTxtStringFormHtml("0x00000066"), g_GetTxtStringFormHtml("0x0000B8FE"));

        //学习车辆标识，  如果以前记忆了车辆标识号，本程序将反馈指示未成功操作的状态.  使用该程序无法覆盖以前输入的车辆标识号.
        iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A61"), g_GetTxtStringFormHtml("0x90025FAD") + "\n" + "\n" +
            g_GetTxtStringFormHtml("0x0000BD33") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OKCANCEL, DT_LEFT);
        if (DF_IDCANCEL == iKey)
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B8D1"));//操作人员已中止了此应用程序
            return iRet;
        }

        //step9
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000C045"), g_GetTxtStringFormHtml("0x0000B09D"), DF_MB_NOBUTTON);
        Sleep(500);
        //链路：11位Can500K
        iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\xD1\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x07D9);
        sendframe.SetSendFrame(CBinary("\x22\xf1\x03", 3));
        SendDataComm(sendframe);
        iRet = EnterSystem(PTL_CAN_11_500K, binEnterCmd, enterPara);
        if (iRet)
        {
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_TIME_OVER;
        }

        rfRet = m_rfRet;
        CBinary binRecive = rfRet.GetFirst();
        if (binRecive.GetByteCount() < 5)
        {
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_TIME_OVER;
        }

        m_binRecive = CBinary(binRecive.GetBuffer() + 4, binRecive.GetByteCount() - 4);
        if (checkIs7f(m_binRecive))
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
            return CErrorCode::EC_ECU_REFUSE;
        }

        sendframe.SetSendFrame(CBinary("\x31\x01\x04\x04", 4));
        rfRet = SendDataComm(sendframe);
        if (0 == rfRet.GetByteCount())
        {
            ecuInter.SendReceive(binQuitCmd);
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_TIME_OVER;
        }

        m_binRecive = rfRet.GetFirst();
        if (checkIs7f(m_binRecive))
        {
            ecuInter.SendReceive(binQuitCmd);
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
            return CErrorCode::EC_ECU_REFUSE;
        }

        if (m_binRecive.GetByteCount() < 4  // 07 D9 08 04 71 01 04 04 00 00 00
            || m_binRecive[0] != 0x71
            || m_binRecive[1] != 0x01
            || m_binRecive[2] != 0x04
            || m_binRecive[3] != 0x04)
        {
            ecuInter.SendReceive(binQuitCmd);
            FxShowMessageBox(g_GetTxtStringFormHtml("0x0000C045"), g_GetTxtStringFormHtml("0x0000B21F"));//失败
            return CErrorCode::EC_DATA;
        }

        //step10
        PleaseWait_xS_haveTTL(10000, g_GetTxtStringFormHtml("0x0000B09D"), g_GetTxtStringFormHtml("0x0000C045"));
        ecuInter.SendReceive(binQuitCmd);  // 07 D1 08 02 10 01 00 00 00 00 00

        // 学习车辆标识完成
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000C045"), g_GetTxtStringFormHtml("0x0000C045") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OK, DT_LEFT);

        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x90009FF7"));// 确保关闭点火开关
        PleaseWait_xS_haveTTL(10000, g_GetTxtStringFormHtml("0x00000066"), g_GetTxtStringFormHtml("0x0000B8FE"));

        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x90009E9C"));//将点火开关打开
        PleaseWait_xS_haveTTL(10000, g_GetTxtStringFormHtml("0x00000066"), g_GetTxtStringFormHtml("0x0000B8FE"));

        //step11
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000C225"), g_GetTxtStringFormHtml("0x0000B8EB"), DF_MB_NOBUTTON);
        Sleep(500);
        //链路：11位can500K
        iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\xD1\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x07D9);
        sendframe.SetSendFrame(CBinary("\x22\xf1\x03", 3));
        SendDataComm(sendframe);
        iRet = EnterSystem(PTL_CAN_11_500K, binEnterCmd2, enterPara);
        if (iRet)
        {
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_TIME_OVER;
        }

        rfRet = m_rfRet;
        binRecive = rfRet.GetFirst();
        if (binRecive.GetByteCount() < 5)
        {
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_TIME_OVER;
        }

        m_binRecive = CBinary(binRecive.GetBuffer() + 4, binRecive.GetByteCount() - 4);
        if (checkIs7f(m_binRecive))
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
            return CErrorCode::EC_ECU_REFUSE;
        }

        sendframe.SetSendFrame(CBinary("\x22\x58\x23", 3));
        rfRet = SendDataComm(sendframe);
        if (0 == rfRet.GetByteCount())
        {
            ecuInter.SendReceive(binQuitCmd);
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_TIME_OVER;
        }

        m_binRecive = rfRet.GetFirst();
        if (checkIs7f(m_binRecive))
        {
            ecuInter.SendReceive(binQuitCmd);
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
            return CErrorCode::EC_ECU_REFUSE;
        }

        if (m_binRecive.GetByteCount() < 4  // 07 D9 08 04 62 58 23 00 00 00 00
            || m_binRecive[0] != 0x62
            || m_binRecive[1] != 0x58
            || m_binRecive[2] != 0x23)
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关
            FxShowMessageBox(g_GetTxtStringFormHtml("0x0000C225"), g_GetTxtStringFormHtml("0x0000B21F"));//失败
            return CErrorCode::EC_DATA;
        }

        //step12    step12.1
        BYTE iSeed = 1;
        //if (1 == iKind)
        //    iSeed++;
        //if (1 == iCase)
        //    iSeed++;

        iSeed %= 2;
        iSeed++;
        if (m_binRecive[3] == iSeed)
            break;

        //step13
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x90009FF7"));//关闭点火开关

        //错误模块配置        模块的内部配置如下：    左侧        模块应该配置为：    右侧        应用程序将要把模块重置为需要的配置。
        iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x00000069"), g_GetTxtStringFormHtml("0x00000DF5") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BE0F")
            + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BD08") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002AF92") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BD07")
            + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002AF93"), DF_MB_OKCANCEL, DT_LEFT);
        if (DF_IDCANCEL == iKey)
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00000069"), g_GetTxtStringFormHtml("0x0000006A,0x0000B105"), DF_MB_OK, DT_LEFT);
            return iRet;
        }

        //step14
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x90009E9C"));//将点火开关打开
        PleaseWait_xS_haveTTL(10000, g_GetTxtStringFormHtml("0x00000066"), g_GetTxtStringFormHtml("0x0000B8FE"));

        //    右侧安全带预紧器    下列程序将删除选定模块自学习数据
        iKey = FxShowMessageBox(strPormot, g_GetTxtStringFormHtml("0x9002AF8C") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OKCANCEL, DT_LEFT);//下列程序将删除选定模块自学习数据
        if (DF_IDCANCEL == iKey)
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关
            return iRet;
        }

        //step15
        FxShowMessageBox(strPormot, g_GetTxtStringFormHtml("0x0000B09D"), DF_MB_NOBUTTON);
        Sleep(500);
        //链路：11位can500k
        iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\xD1\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x07D9);
        sendframe.SetSendFrame(CBinary("\x22\xf1\x03", 3));
        SendDataComm(sendframe);
        iRet = EnterSystem(PTL_CAN_11_500K, binEnterCmd, enterPara);
        if (iRet)
        {
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_TIME_OVER;
        }

        rfRet = m_rfRet;
        binRecive = rfRet.GetFirst();
        if (binRecive.GetByteCount() < 5)
        {
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_TIME_OVER;
        }

        m_binRecive = CBinary(binRecive.GetBuffer() + 4, binRecive.GetByteCount() - 4);
        if (checkIs7f(m_binRecive))
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
            return CErrorCode::EC_ECU_REFUSE;
        }

        //安全访问
        iRet = SafeLogin_Standard3(CBinary("\x27\x03", 2), 0x07FDA6); // 07 D1 08 05 27 04 07 FD A6 00 00
        if (CErrorCode::EC_TIME_OVER == iRet)
        {
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_TIME_OVER;
        }

        if (CErrorCode::EC_ECU_REFUSE == iRet)
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000B09F"));//安全访问失败
            return CErrorCode::EC_ECU_REFUSE;
        }
        //链路保持
        m_pNetLayer->KeepLink(1000, CSendFrame(CBinary("\x3E\x00", 2)));

        //step16
        sendframe.SetSendFrame(CBinary("\x31\x01\x04\x02", 4));
        rfRet = SendDataComm(sendframe);
        if (0 == rfRet.GetByteCount())
        {
            ecuInter.SendReceive(binQuitCmd);
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_TIME_OVER;
        }

        m_binRecive = rfRet.GetFirst();
        if (checkIs7f(m_binRecive))
        {
            ecuInter.SendReceive(binQuitCmd);
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
            return CErrorCode::EC_ECU_REFUSE;
        }

        if (m_binRecive.GetByteCount() < 4  // 07 D9 08 04 71 01 04 02 00 00 00
            || m_binRecive[0] != 0x71
            || m_binRecive[1] != 0x01
            || m_binRecive[2] != 0x04
            || m_binRecive[3] != 0x02)
        {
            ecuInter.SendReceive(binQuitCmd);
            FxShowMessageBox(strPormot, g_GetTxtStringFormHtml("0x0000B21F"));//失败
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关
            return CErrorCode::EC_DATA;
        }

        //step17
        PleaseWait_xS(5000);
        ecuInter.SendReceive(binQuitCmd);
        FxShowMessageBox(strPormot, g_GetTxtStringFormHtml("0x9002A16C ") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"));//完成
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x90009FF7"));//确保关闭点火开关
        m_pNetLayer->KeepLink(0);//链路断开
    }



    //step18
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关
    //下列程序将自动测试主动安全带的动态收回和释放操作
    //确保两个前安全带均已扣好.
    //检查：在程序执行过程中，安全带是否以最大力完全收回，然后在该位置保持 3 秒钟再释放.
    //请注意，您将需要起动发动机并让车辆在此测试过程中一直怠速.
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000069"), g_GetTxtStringFormHtml("0x0000BD10,0x0000BD11,0x0000BD14,0x0000BAF1"), DF_MB_OK, DT_LEFT);

    if ("module_special_L405_2013" == strOpenFile || "module_special_X250_2013" == strOpenFile)
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B93D"), g_GetTxtStringFormHtml("0x00000096"));//确保发动机在运转
    else
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"));//将点火开关打开

    //step19
    PleaseWait_xS_haveTTL(10000, g_GetTxtStringFormHtml("0x00000066"), g_GetTxtStringFormHtml("0x0000B8FE"));
    FxShowMessageBox(strPormot, g_GetTxtStringFormHtml("0x0000BD10"), DF_MB_OKCANCEL, DT_LEFT);//下列程序将自动测试主动安全带的动态收回和释放操作.
    if (DF_IDCANCEL == iKey)
        return iRet;

    //step20
    FxShowMessageBox(strPormot, g_GetTxtStringFormHtml("0x0000B09D"), DF_MB_NOBUTTON);
    CMessageBoxCtrl::SetBusyStatus(true);
    Sleep(500);
    //链路：11位can500K
    iRet = EnterSystem(PTL_CAN_11_500K, binEnterCmd, enterPara);
    if (iRet)
    {
        CMessageBoxCtrl::SetBusyStatus(false);
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    rfRet = m_rfRet;
    CBinary binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount() < 5)
    {
        CMessageBoxCtrl::SetBusyStatus(false);
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    m_binRecive = CBinary(binRecive.GetBuffer() + 4, binRecive.GetByteCount() - 4);
    if (checkIs7f(m_binRecive))
    {
        CMessageBoxCtrl::SetBusyStatus(false);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return CErrorCode::EC_ECU_REFUSE;
    }

    //安全访问
    iRet = SafeLogin_Standard3(CBinary("\x27\x03", 2), 0x07FDA6);
    if (CErrorCode::EC_TIME_OVER == iRet)
    {
        CMessageBoxCtrl::SetBusyStatus(false);
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    if (CErrorCode::EC_ECU_REFUSE == iRet)
    {
        CMessageBoxCtrl::SetBusyStatus(false);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000B09F"));//安全访问失败
        return CErrorCode::EC_ECU_REFUSE;
    }
    //链路保持
    m_pNetLayer->KeepLink(1000, CSendFrame(CBinary("\x3E\x00", 2)));

    //step21
    sendframe.SetSendFrame(CBinary("\x31\x01\x50\x05", 4));
    rfRet = SendDataComm(sendframe);
    if (0 == rfRet.GetByteCount())
    {
        CMessageBoxCtrl::SetBusyStatus(false);
        ecuInter.SendReceive(binQuitCmd);
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    m_binRecive = rfRet.GetFirst();
    if (checkIs7f(m_binRecive))
    {
        CMessageBoxCtrl::SetBusyStatus(false);
        ecuInter.SendReceive(binQuitCmd);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return CErrorCode::EC_ECU_REFUSE;
    }

    if (m_binRecive.GetByteCount() < 4
        || m_binRecive[0] != 0x71
        || m_binRecive[1] != 0x01
        || m_binRecive[2] != 0x50
        || m_binRecive[3] != 0x05)
    {
        CMessageBoxCtrl::SetBusyStatus(false);
        ecuInter.SendReceive(binQuitCmd);
        FxShowMessageBox(strPormot, g_GetTxtStringFormHtml("0x0000B21F"));//失败
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关
        return CErrorCode::EC_DATA;
    }

    //step22
    if ("module_special_X250_2013" == strOpenFile)
    {
        W_U32 uMsStart = GetTickCount();
        W_U32 uMsPass = 0;
        W_U32 uMsStop = 0;
        while (1)
        {
            uMsStop = GetTickCount();
            uMsPass = uMsStop - uMsStart;
            if (uMsPass > 9999)
            {
                CMessageBoxCtrl::SetBusyStatus(false);
                FxShowMessageBox(strPormot, g_GetTxtStringFormHtml("0x0000B918"));//因超时而失败
                ecuInter.SendReceive(binQuitCmd);
                return CErrorCode::EC_TIME_OVER;
            }

            sendframe.SetSendFrame(CBinary("\x31\x03\x50\x05", 4));
            rfRet = SendDataComm(sendframe);
            m_binRecive = rfRet.GetFirst();
            if (m_binRecive.GetByteCount() > 4
                && m_binRecive[0] == 0x71
                && m_binRecive[1] == 0x03
                && m_binRecive[2] == 0x50
                && m_binRecive[3] == 0x05
                && (m_binRecive[4] & 0x0F) == 0x02);
            else break;
        }

        if (0 == m_binRecive.GetByteCount())
        {
            CMessageBoxCtrl::SetBusyStatus(false);
            ecuInter.SendReceive(binQuitCmd);
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_TIME_OVER;
        }

        if (checkIs7f(m_binRecive))
        {
            CMessageBoxCtrl::SetBusyStatus(false);
            ecuInter.SendReceive(binQuitCmd);
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
            return CErrorCode::EC_ECU_REFUSE;
        }

        if (m_binRecive.GetByteCount() < 4
            || m_binRecive[0] != 0x71
            || m_binRecive[1] != 0x03
            || m_binRecive[2] != 0x50
            || m_binRecive[3] != 0x05
            || (m_binRecive.GetByteCount() > 4 && (m_binRecive[4] & 0x0F) == 0x01))
        {
            CMessageBoxCtrl::SetBusyStatus(false);
            ecuInter.SendReceive(binQuitCmd);
            FxShowMessageBox(strPormot, g_GetTxtStringFormHtml("0x0000B21F"));//失败
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关
            return CErrorCode::EC_DATA;
        }
    }

    //step23
    CMessageBoxCtrl::SetBusyStatus(false);
    PleaseWait_xS(10000);
    ecuInter.SendReceive(binQuitCmd);
    FxShowMessageBox(strPormot, g_GetTxtStringFormHtml("0x0000B0A3"));//完成
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关

    //step24~28

    iRet = CheckSysDTCNub_model1(PTL_CAN_11_500K, PTL_CAN_11_125K, CBinary("\x07\xD1\x08\x03\x19\x02\x0C\x00\x00\x00\x00", 11), CBinary("\x07\xDF\x08\x04\x14\xFF\xFF\xFF\x00\x00\x00", 11), 0x07D9);

    //step29
    PleaseWait_xS_haveTTL(10000, g_GetTxtStringFormHtml("0x00000066"), g_GetTxtStringFormHtml("0x0000B8FE"));
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000069"), g_GetTxtStringFormHtml("0x0000BD17"));//确定仪表盘显示屏上未出现与‘主动安全带’相关的错误消息.

    return iRet;


}





//左侧安全带预紧器
W_ErrorCode CSeviceFunctionNew::Safety_belt_left_NEW_lansheng_L494_2016()
{
    W_ErrorCode iRet = CErrorCode::EC_SUCCESS;
    CSendFrame sendframe;
    CReceiveFrame rfRet;
    W_I16 iKey = 0;
    CBinary binEnterCmd;//10 03进系统指令
    CBinary binEnterCmd2;//10 01进系统指令
    CBinary binQuitCmd;//10 01退出系统指令
    W_U32 enterPara;//进系统地址
    CVehicleComm ecuInter;
    string strPormot;//部分车型、选择不同，某些地方标题不同
    CJLRStringOperate strOpt;
    string strOpenFile = m_stropenfileConfigMenu;
    strOpt.Replace(strOpenFile, ".ctv", "");

    binEnterCmd = CBinary("\x07\xD4\x08\x02\x10\x03\x00\x00\x00\x00\x00", 11);
    binEnterCmd2 = CBinary("\x07\xD4\x08\x02\x10\x01\x00\x00\x00\x00\x00", 11);
    binQuitCmd = CBinary("\x40\x00\x07\xD4\x10\x01", 6);
    enterPara = 0x07DC;
    strPormot = g_GetTxtStringFormHtml("0x0000BD16"); // 左侧

    //step1
    //确保在继续执行该程序前，已给车辆装配了一个新的模块
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000C044") + "\n" + "\n" + g_GetTxtStringFormHtml("0x80001618"), DF_MB_OKCANCEL, DT_LEFT);
    if (DF_IDCANCEL == iKey)
        return iRet;

    //step2~6
    iRet = CheckEngineStop(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xF4\x0C\x00\x00\x00\x00", 11), 0x07E8, CBinary("\x01\x00", 2));
    if (iRet)
        return iRet;


    while (1)
    {
        //step7
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x90009E9C"));//确保点火开关打开

        PleaseWait_xS_haveTTL(10000, g_GetTxtStringFormHtml("0x00000066"), g_GetTxtStringFormHtml("0x0000B8FE"));

        //step8
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B916"), g_GetTxtStringFormHtml("0x0000B09D"), DF_MB_NOBUTTON);
        Sleep(500);
        m_pNetLayer->KeepLink(0);//断开链路保持

        //链路：11位can

        iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\xD4\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x07DC);
        sendframe.SetSendFrame(CBinary("\x22\xf1\x03", 3));
        SendDataComm(sendframe);
        iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\xD4\x08\x04\x14\xFF\xFF\xFF\x00\x00\x00", 11), 0x07DC);


        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x90009FF7"));// 确保关闭点火开关
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x90009E9C"));// 确保将点火开关打开
        PleaseWait_xS_haveTTL(10000, g_GetTxtStringFormHtml("0x00000066"), g_GetTxtStringFormHtml("0x0000B8FE"));

        //学习车辆标识，  如果以前记忆了车辆标识号，本程序将反馈指示未成功操作的状态.  使用该程序无法覆盖以前输入的车辆标识号.
        iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A61"), g_GetTxtStringFormHtml("0x90025FAD") + "\n" + "\n" +
            g_GetTxtStringFormHtml("0x0000BD33") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OKCANCEL, DT_LEFT);
        if (DF_IDCANCEL == iKey)
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B8D1"));//操作人员已中止了此应用程序
            return iRet;
        }

        //step9
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000C045"), g_GetTxtStringFormHtml("0x0000B09D"), DF_MB_NOBUTTON);
        Sleep(500);
        //链路：11位Can500K
        iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\xD4\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x07DC);
        sendframe.SetSendFrame(CBinary("\x22\xf1\x03", 3));
        SendDataComm(sendframe);
        iRet = EnterSystem(PTL_CAN_11_500K, binEnterCmd, enterPara);
        if (iRet)
        {
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_TIME_OVER;
        }

        rfRet = m_rfRet;
        CBinary binRecive = rfRet.GetFirst();
        if (binRecive.GetByteCount() < 5)
        {
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_TIME_OVER;
        }

        m_binRecive = CBinary(binRecive.GetBuffer() + 4, binRecive.GetByteCount() - 4);
        if (checkIs7f(m_binRecive))
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
            return CErrorCode::EC_ECU_REFUSE;
        }

        sendframe.SetSendFrame(CBinary("\x31\x01\x04\x04", 4));
        rfRet = SendDataComm(sendframe);
        if (0 == rfRet.GetByteCount())
        {
            ecuInter.SendReceive(binQuitCmd);
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_TIME_OVER;
        }

        m_binRecive = rfRet.GetFirst();
        if (checkIs7f(m_binRecive))
        {
            ecuInter.SendReceive(binQuitCmd);
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
            return CErrorCode::EC_ECU_REFUSE;
        }

        if (m_binRecive.GetByteCount() < 4  // 07 DC 08 04 71 01 04 04 00 00 00
            || m_binRecive[0] != 0x71
            || m_binRecive[1] != 0x01
            || m_binRecive[2] != 0x04
            || m_binRecive[3] != 0x04)
        {
            ecuInter.SendReceive(binQuitCmd);
            FxShowMessageBox(g_GetTxtStringFormHtml("0x0000C045"), g_GetTxtStringFormHtml("0x0000B21F"));//失败
            return CErrorCode::EC_DATA;
        }

        //step10
        PleaseWait_xS_haveTTL(10000, g_GetTxtStringFormHtml("0x0000B09D"), g_GetTxtStringFormHtml("0x0000C045"));
        ecuInter.SendReceive(binQuitCmd);  // 07 D4 08 02 10 01 00 00 00 00 00

        // 学习车辆标识完成
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000C045"), g_GetTxtStringFormHtml("0x0000C045") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OK, DT_LEFT);

        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x90009FF7"));// 确保关闭点火开关
        PleaseWait_xS_haveTTL(10000, g_GetTxtStringFormHtml("0x00000066"), g_GetTxtStringFormHtml("0x0000B8FE"));

        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x90009E9C"));//将点火开关打开
        PleaseWait_xS_haveTTL(10000, g_GetTxtStringFormHtml("0x00000066"), g_GetTxtStringFormHtml("0x0000B8FE"));

        //step11
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000C225"), g_GetTxtStringFormHtml("0x0000B8EB"), DF_MB_NOBUTTON);
        Sleep(500);
        //链路：11位can500K
        iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\xD4\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x07DC);
        sendframe.SetSendFrame(CBinary("\x22\xf1\x03", 3));
        SendDataComm(sendframe);
        iRet = EnterSystem(PTL_CAN_11_500K, binEnterCmd2, enterPara);
        if (iRet)
        {
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_TIME_OVER;
        }

        rfRet = m_rfRet;
        binRecive = rfRet.GetFirst();
        if (binRecive.GetByteCount() < 5)
        {
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_TIME_OVER;
        }

        m_binRecive = CBinary(binRecive.GetBuffer() + 4, binRecive.GetByteCount() - 4);
        if (checkIs7f(m_binRecive))
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
            return CErrorCode::EC_ECU_REFUSE;
        }

        sendframe.SetSendFrame(CBinary("\x22\x58\x23", 3));
        rfRet = SendDataComm(sendframe);
        if (0 == rfRet.GetByteCount())
        {
            ecuInter.SendReceive(binQuitCmd);
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_TIME_OVER;
        }

        m_binRecive = rfRet.GetFirst();
        if (checkIs7f(m_binRecive))
        {
            ecuInter.SendReceive(binQuitCmd);
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
            return CErrorCode::EC_ECU_REFUSE;
        }

        if (m_binRecive.GetByteCount() < 4  // 07 DC 08 04 62 58 23 00 00 00 00
            || m_binRecive[0] != 0x62
            || m_binRecive[1] != 0x58
            || m_binRecive[2] != 0x23)
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关
            FxShowMessageBox(g_GetTxtStringFormHtml("0x0000C225"), g_GetTxtStringFormHtml("0x0000B21F"));//失败
            return CErrorCode::EC_DATA;
        }

        //step12    step12.1
        BYTE iSeed = 1;
        //if (1 == iKind)
        //    iSeed++;
        //if (1 == iCase)
        //    iSeed++;

        iSeed %= 2;
        iSeed++;
        if (m_binRecive[3] == iSeed)
            break;

        //step13
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x90009FF7"));//关闭点火开关

        //错误模块配置        模块的内部配置如下：    右侧        模块应该配置为：    左侧        应用程序将要把模块重置为需要的配置。
        iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x00000069"), g_GetTxtStringFormHtml("0x00000DF5") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BE0F")
            + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BD07") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002AF92") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BD08")
            + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002AF93"), DF_MB_OKCANCEL, DT_LEFT);
        if (DF_IDCANCEL == iKey)
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00000069"), g_GetTxtStringFormHtml("0x0000006A,0x0000B105"), DF_MB_OK, DT_LEFT);
            return iRet;
        }

        //step14
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x90009E9C"));//将点火开关打开
        PleaseWait_xS_haveTTL(10000, g_GetTxtStringFormHtml("0x00000066"), g_GetTxtStringFormHtml("0x0000B8FE"));

        //    左侧安全带预紧器    下列程序将删除选定模块自学习数据
        iKey = FxShowMessageBox(strPormot, g_GetTxtStringFormHtml("0x9002AF8C") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OKCANCEL, DT_LEFT);//下列程序将删除选定模块自学习数据
        if (DF_IDCANCEL == iKey)
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关
            return iRet;
        }

        //step15
        FxShowMessageBox(strPormot, g_GetTxtStringFormHtml("0x0000B09D"), DF_MB_NOBUTTON);
        Sleep(500);
        //链路：11位can500k
        iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\xD4\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x07DC);
        sendframe.SetSendFrame(CBinary("\x22\xf1\x03", 3));
        SendDataComm(sendframe);
        iRet = EnterSystem(PTL_CAN_11_500K, binEnterCmd, enterPara);
        if (iRet)
        {
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_TIME_OVER;
        }

        rfRet = m_rfRet;
        binRecive = rfRet.GetFirst();
        if (binRecive.GetByteCount() < 5)
        {
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_TIME_OVER;
        }

        m_binRecive = CBinary(binRecive.GetBuffer() + 4, binRecive.GetByteCount() - 4);
        if (checkIs7f(m_binRecive))
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
            return CErrorCode::EC_ECU_REFUSE;
        }

        //安全访问
        iRet = SafeLogin_Standard3(CBinary("\x27\x03", 2), 0x07FDA6); // 07 D4 08 05 27 04 07 FD A6 00 00
        if (CErrorCode::EC_TIME_OVER == iRet)
        {
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_TIME_OVER;
        }

        if (CErrorCode::EC_ECU_REFUSE == iRet)
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000B09F"));//安全访问失败
            return CErrorCode::EC_ECU_REFUSE;
        }
        //链路保持
        m_pNetLayer->KeepLink(1000, CSendFrame(CBinary("\x3E\x00", 2)));

        //step16
        sendframe.SetSendFrame(CBinary("\x31\x01\x04\x02", 4));
        rfRet = SendDataComm(sendframe);
        if (0 == rfRet.GetByteCount())
        {
            ecuInter.SendReceive(binQuitCmd);
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_TIME_OVER;
        }

        m_binRecive = rfRet.GetFirst();
        if (checkIs7f(m_binRecive))
        {
            ecuInter.SendReceive(binQuitCmd);
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
            return CErrorCode::EC_ECU_REFUSE;
        }

        if (m_binRecive.GetByteCount() < 4  // 07 DC 08 04 71 01 04 02 00 00 00
            || m_binRecive[0] != 0x71
            || m_binRecive[1] != 0x01
            || m_binRecive[2] != 0x04
            || m_binRecive[3] != 0x02)
        {
            ecuInter.SendReceive(binQuitCmd);
            FxShowMessageBox(strPormot, g_GetTxtStringFormHtml("0x0000B21F"));//失败
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关
            return CErrorCode::EC_DATA;
        }

        //step17
        PleaseWait_xS(5000);
        ecuInter.SendReceive(binQuitCmd);
        FxShowMessageBox(strPormot, g_GetTxtStringFormHtml("0x9002A16C ") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"));//完成
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x90009FF7"));//确保关闭点火开关
        m_pNetLayer->KeepLink(0);//链路断开
    }



    //step18
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关
    //下列程序将自动测试主动安全带的动态收回和释放操作
    //确保两个前安全带均已扣好.
    //检查：在程序执行过程中，安全带是否以最大力完全收回，然后在该位置保持 3 秒钟再释放.
    //请注意，您将需要起动发动机并让车辆在此测试过程中一直怠速.
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000069"), g_GetTxtStringFormHtml("0x0000BD10,0x0000BD11,0x0000BD14,0x0000BAF1"), DF_MB_OK, DT_LEFT);

    if ("module_special_L405_2013" == strOpenFile || "module_special_X250_2013" == strOpenFile)
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B93D"), g_GetTxtStringFormHtml("0x00000096"));//确保发动机在运转
    else
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"));//将点火开关打开

    //step19
    PleaseWait_xS_haveTTL(10000, g_GetTxtStringFormHtml("0x00000066"), g_GetTxtStringFormHtml("0x0000B8FE"));
    FxShowMessageBox(strPormot, g_GetTxtStringFormHtml("0x0000BD10"), DF_MB_OKCANCEL, DT_LEFT);//下列程序将自动测试主动安全带的动态收回和释放操作.
    if (DF_IDCANCEL == iKey)
        return iRet;

    //step20
    FxShowMessageBox(strPormot, g_GetTxtStringFormHtml("0x0000B09D"), DF_MB_NOBUTTON);
    CMessageBoxCtrl::SetBusyStatus(true);
    Sleep(500);
    //链路：11位can500K
    iRet = EnterSystem(PTL_CAN_11_500K, binEnterCmd, enterPara);
    if (iRet)
    {
        CMessageBoxCtrl::SetBusyStatus(false);
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    rfRet = m_rfRet;
    CBinary binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount() < 5)
    {
        CMessageBoxCtrl::SetBusyStatus(false);
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    m_binRecive = CBinary(binRecive.GetBuffer() + 4, binRecive.GetByteCount() - 4);
    if (checkIs7f(m_binRecive))
    {
        CMessageBoxCtrl::SetBusyStatus(false);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return CErrorCode::EC_ECU_REFUSE;
    }

    //安全访问
    iRet = SafeLogin_Standard3(CBinary("\x27\x03", 2), 0x07FDA6);
    if (CErrorCode::EC_TIME_OVER == iRet)
    {
        CMessageBoxCtrl::SetBusyStatus(false);
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    if (CErrorCode::EC_ECU_REFUSE == iRet)
    {
        CMessageBoxCtrl::SetBusyStatus(false);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000B09F"));//安全访问失败
        return CErrorCode::EC_ECU_REFUSE;
    }
    //链路保持
    m_pNetLayer->KeepLink(1000, CSendFrame(CBinary("\x3E\x00", 2)));

    //step21
    sendframe.SetSendFrame(CBinary("\x31\x01\x50\x05", 4));
    rfRet = SendDataComm(sendframe);
    if (0 == rfRet.GetByteCount())
    {
        CMessageBoxCtrl::SetBusyStatus(false);
        ecuInter.SendReceive(binQuitCmd);
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    m_binRecive = rfRet.GetFirst();
    if (checkIs7f(m_binRecive))
    {
        CMessageBoxCtrl::SetBusyStatus(false);
        ecuInter.SendReceive(binQuitCmd);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return CErrorCode::EC_ECU_REFUSE;
    }

    if (m_binRecive.GetByteCount() < 4
        || m_binRecive[0] != 0x71
        || m_binRecive[1] != 0x01
        || m_binRecive[2] != 0x50
        || m_binRecive[3] != 0x05)
    {
        CMessageBoxCtrl::SetBusyStatus(false);
        ecuInter.SendReceive(binQuitCmd);
        FxShowMessageBox(strPormot, g_GetTxtStringFormHtml("0x0000B21F"));//失败
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关
        return CErrorCode::EC_DATA;
    }

    //step22
    if ("module_special_X250_2013" == strOpenFile)
    {
        W_U32 uMsStart = GetTickCount();
        W_U32 uMsPass = 0;
        W_U32 uMsStop = 0;
        while (1)
        {
            uMsStop = GetTickCount();
            uMsPass = uMsStop - uMsStart;
            if (uMsPass > 9999)
            {
                CMessageBoxCtrl::SetBusyStatus(false);
                FxShowMessageBox(strPormot, g_GetTxtStringFormHtml("0x0000B918"));//因超时而失败
                ecuInter.SendReceive(binQuitCmd);
                return CErrorCode::EC_TIME_OVER;
            }

            sendframe.SetSendFrame(CBinary("\x31\x03\x50\x05", 4));
            rfRet = SendDataComm(sendframe);
            m_binRecive = rfRet.GetFirst();
            if (m_binRecive.GetByteCount() > 4
                && m_binRecive[0] == 0x71
                && m_binRecive[1] == 0x03
                && m_binRecive[2] == 0x50
                && m_binRecive[3] == 0x05
                && (m_binRecive[4] & 0x0F) == 0x02);
            else break;
        }

        if (0 == m_binRecive.GetByteCount())
        {
            CMessageBoxCtrl::SetBusyStatus(false);
            ecuInter.SendReceive(binQuitCmd);
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_TIME_OVER;
        }

        if (checkIs7f(m_binRecive))
        {
            CMessageBoxCtrl::SetBusyStatus(false);
            ecuInter.SendReceive(binQuitCmd);
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
            return CErrorCode::EC_ECU_REFUSE;
        }

        if (m_binRecive.GetByteCount() < 4
            || m_binRecive[0] != 0x71
            || m_binRecive[1] != 0x03
            || m_binRecive[2] != 0x50
            || m_binRecive[3] != 0x05
            || (m_binRecive.GetByteCount() > 4 && (m_binRecive[4] & 0x0F) == 0x01))
        {
            CMessageBoxCtrl::SetBusyStatus(false);
            ecuInter.SendReceive(binQuitCmd);
            FxShowMessageBox(strPormot, g_GetTxtStringFormHtml("0x0000B21F"));//失败
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关
            return CErrorCode::EC_DATA;
        }
    }

    //step23
    CMessageBoxCtrl::SetBusyStatus(false);
    PleaseWait_xS(10000);
    ecuInter.SendReceive(binQuitCmd);
    FxShowMessageBox(strPormot, g_GetTxtStringFormHtml("0x0000B0A3"));//完成
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关

    //step24~28

    iRet = CheckSysDTCNub_model1(PTL_CAN_11_500K, PTL_CAN_11_500K, CBinary("\x07\xD4\x08\x03\x19\x02\x0C\x00\x00\x00\x00", 11), CBinary("\x07\xDF\x08\x04\x14\xFF\xFF\xFF\x00\x00\x00", 11), 0x07DC);
    //step29
    PleaseWait_xS_haveTTL(10000, g_GetTxtStringFormHtml("0x00000066"), g_GetTxtStringFormHtml("0x0000B8FE"));
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000069"), g_GetTxtStringFormHtml("0x0000BD17"));//确定仪表盘显示屏上未出现与‘主动安全带’相关的错误消息.

    return iRet;

}


// 侧面物体探测控制模块-左
W_ErrorCode CSeviceFunctionNew::Side_control_modules_NEW_lansheng_L494_2016()
{
    W_ErrorCode iRet = CErrorCode::EC_SUCCESS;
    W_I16 iKey = 0;
    W_U32 uStandValue2 = 0xC01B52;
    W_I32 P_table[3][8] = { {0x096100,0x57CDE7,0xEFA739,0x9B5084,0x72BFEF,0xA54239,0x0F9A85,0x5F09FD},
    {0xFF2E1C,0xBE70DE,0x38FE4B,0x30C071,0x258F04,0x0A23FF,0x504809,0xE0ACF4},
    {0x81751F,0x47F4C9,0xCAE664,0xD1D32E,0xE7B8AA,0x8F5CB3,0x5F9590,0xFA25C6} };

    CSendFrame sendframe;
    CReceiveFrame rfRet;
    CBinary binRecive;
    CVehicleComm ecuInter;

    // 确保在继续执行该程序前，已给车辆装配了一个新的模块
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000C044") + "\n" + "\n" + g_GetTxtStringFormHtml("0x80001618"), DF_MB_OKCANCEL);
    if (iKey == DF_IDCANCEL)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B8D1"), DF_MB_ANYKEYRETURN);    //操作人员已中止了此应用程序.
        return 0;
    }

    // 500K
    // 点火打开、发动机、电压、点火关闭
    iRet = CheckEngineStop(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xF4\x0C\x00\x00\x00\x00", 11), 0x07E8, CBinary("\x01\x00", 2));
    if (iRet)
        return iRet;


    // 125K
    // 点火打开
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"));

    // 模块初始化
    PleaseWait_xS_haveTTL(5000, g_GetTxtStringFormHtml("0x00000066"), g_GetTxtStringFormHtml("0x0000B8FE"));

    // 学习车辆标识号
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000C045"), g_GetTxtStringFormHtml("0x90025FAD") + "\n" + "\n" +
        g_GetTxtStringFormHtml("0x0000BD33") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OKCANCEL, DT_LEFT);
    if (iKey == DF_IDCANCEL)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B8D1"), DF_MB_ANYKEYRETURN);//操作人员已中止了此应用程序.
        return 0;
    }

    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//正在建立车辆通讯
    Sleep(800);

    //链路：11位can125K
    EnterSystem(PTL_CAN_11_125K, CBinary("\x07\xC4\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x07CC);
    SendDataComm(CBinary("\x22\xF1\x03", 3));
    iRet = EnterSystem(PTL_CAN_11_125K, CBinary("\x07\xC4\x08\x02\x10\x03\x00\x00\x00\x00\x00", 11), 0x07CC);

    if (iRet)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    rfRet = m_rfRet;
    binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount() < 2)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }
    if (checkIs7f(binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return CErrorCode::EC_ECU_REFUSE;
    }

    sendframe.SetSendFrame(CBinary("\x31\x01\x04\x04", 4));  // 07 C4 08 04 31 01 04 04 00 00 00
    rfRet = SendDataComm(sendframe);
    m_binRecive = rfRet.GetFirst();
    if (0 == rfRet.GetByteCount())
    {
        ecuInter.SendReceive(CBinary("\x40\x00\x07\xC4\x10\x01", 6));
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关
        return CErrorCode::EC_TIME_OVER;
    }
    if (checkIs7f(m_binRecive))
    {
        ecuInter.SendReceive(CBinary("\x40\x00\x07\xC4\x10\x01", 6));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关
        return CErrorCode::EC_ECU_REFUSE;
    }
    if (m_binRecive.GetByteCount() < 4
        || m_binRecive[0] != 0x71
        || m_binRecive[1] != 0x01
        || m_binRecive[2] != 0x04
        || m_binRecive[3] != 0x04)
    {
        ecuInter.SendReceive(CBinary("\x40\x00\x07\xC4\x10\x01", 6));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000C045"), g_GetTxtStringFormHtml("0x0000B21F"));//失败
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关
        return CErrorCode::EC_DATA;
    }

    m_pNetLayer->KeepLink(3000, CSendFrame(CBinary("\x3E\x80", 2)));    // 打开链路
    PleaseWait_xS_haveTTL(5000, g_GetTxtStringFormHtml("0x0000B09D"), g_GetTxtStringFormHtml("0x0000C045"));//学习车辆识别号-请等待
    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通信中
    Sleep(800);
    ecuInter.SendReceive(CBinary("\x40\x00\x07\xC4\x10\x01", 6));
    m_pNetLayer->KeepLink(0);//链路保持

    // 学习车辆识别号-完成
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000C045"), g_GetTxtStringFormHtml("0x0000C045") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002A16C")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OK, DT_LEFT);

    // 点火关闭
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));

    // 点火打开
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"));

    // 侧面物体探测控制模块 - 左
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000A0D8"), g_GetTxtStringFormHtml("0x0000C290") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OKCANCEL, DT_LEFT);
    if (DF_IDCANCEL == iKey)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关
        return iRet;
    }

    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通讯中
    Sleep(800);

    EnterSystem(PTL_CAN_11_125K, CBinary("\x07\xC4\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x07CC);
    SendDataComm(CBinary("\x22\xF1\x03", 3));
    sendframe.SetSendFrame(CBinary("\x10\x03", 2));
    rfRet = SendDataComm(sendframe);

    binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount() < 2)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }
    if (checkIs7f(binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return CErrorCode::EC_ECU_REFUSE;
    }

    //安全访问
    iRet = SafeLogin_L405_2014_Oil(CBinary("\x27\x03", 2), uStandValue2, P_table, CBinary("\x3E\x80", 2));

    if (CErrorCode::EC_ECU_REFUSE == iRet)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000B09F"));//安全访问失败
        return CErrorCode::EC_ECU_REFUSE;
    }
    if (iRet)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    m_pNetLayer->KeepLink(0);//断开链路

    sendframe.SetSendFrame(CBinary("\x31\x01\x04\x0E\x0C", 5));  // 07 C4 08 05 31 01 04 0E 0C 00 00
    rfRet = SendDataComm(sendframe);
    if (0 == rfRet.GetByteCount())
    {
        ecuInter.SendReceive(CBinary("\x40\x00\x07\xC4\x10\x01", 6));
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关
        return CErrorCode::EC_TIME_OVER;
    }

    m_binRecive = rfRet.GetFirst();
    if (checkIs7f(m_binRecive))
    {
        ecuInter.SendReceive(CBinary("\x40\x00\x07\xC4\x10\x01", 6));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关
        return CErrorCode::EC_ECU_REFUSE;
    }

    if (m_binRecive.GetByteCount() < 4
        || m_binRecive[0] != 0x71
        || m_binRecive[1] != 0x01
        || m_binRecive[2] != 0x04
        || m_binRecive[3] != 0x0E)
    {
        ecuInter.SendReceive(CBinary("\x40\x00\x07\xC4\x10\x01", 6));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000A0D8"), g_GetTxtStringFormHtml("0x0000B21F"));//失败
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关
        return CErrorCode::EC_DATA;
    }

    m_pNetLayer->KeepLink(3000, CSendFrame(CBinary("\x3E\x80", 2)));    // 打开链路
    PleaseWait_xS_haveTTL(5000, g_GetTxtStringFormHtml("0x0000B09D"), g_GetTxtStringFormHtml("0x0000A0D8"));//侧面物体探测控制模块 - 左，请等待
    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通信中
    Sleep(800);

    ecuInter.SendReceive(CBinary("\x40\x00\x07\xC4\x10\x01", 6));
    m_pNetLayer->KeepLink(0);//链路保持

    // 侧面物体探测控制模块 - 左 - 完成
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000A0D8"), g_GetTxtStringFormHtml("0x0000C290") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002A16C")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OK, DT_LEFT);

    // 点火关闭
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));

    // 故障码
    iRet = ClearSysDTC_Programme_538(PTL_CAN_11_125K, CBinary("\x07\xC4\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x07CC);

    return iRet;

}



// 电力变频转换器模块
W_ErrorCode CSeviceFunctionNew::Elec_change_modules_NEW_lansheng_L494_2016()
{
    W_ErrorCode iRet = CErrorCode::EC_SUCCESS;
    W_I16 iKey = 0;
    W_U32 uStandValue = 0xC91E77;
    W_I32 P_table[3][8] = { {0x006425,0x5EC8C2,0xE6A21C,0x9255A1,0x7BBACA,0xAC471C,0x069FA0,0x560CD8},
    {0xF62B39,0xB775FB,0x31FB6E,0x39C554,0x2C8A21,0x0326DA,0x594D2C,0xE9A9D1},
    {0x88703A,0x4EF1EC,0xC3E341,0xD8D60B,0xEEBD8F,0x865996,0x5690B5,0xF320E3} };

    CSendFrame sendframe;
    CReceiveFrame rfRet;
    CBinary binRecive;
    CVehicleComm ecuInter;


    //     确保在继续执行该程序前，已给车辆装配了一个新的模块
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x900120D2"), g_GetTxtStringFormHtml("0x0000C044") + "\n" + "\n" + g_GetTxtStringFormHtml("0x80001618")
        , DF_MB_OKCANCEL, DT_LEFT);
    if (iKey == DF_IDCANCEL)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B8D1"), DF_MB_ANYKEYRETURN);//操作人员已中止了此应用程序.
        return 0;
    }

    // 确保关闭
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000A7E"), g_GetTxtStringFormHtml("0x90009FF7"));

    // 下列应用程序将自动控制车辆点火。
    FxShowMessageBox(g_GetTxtStringFormHtml("0x900120D2"), g_GetTxtStringFormHtml("0x9001DCFF"), DF_MB_OK, DT_LEFT);

    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通讯中
    Sleep(800);

    EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x26\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x072E);
    sendframe.SetSendFrame(CBinary("\x10\x03", 2));
    rfRet = SendDataComm(sendframe);

    binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount() < 5)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }
    if (checkIs7f(binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return CErrorCode::EC_ECU_REFUSE;
    }


    //安全访问
    iRet = SafeLogin_L405_2014_Oil(CBinary("\x27\x21", 2), uStandValue, P_table, CBinary("\x3E\x80", 2));

    if (CErrorCode::EC_ECU_REFUSE == iRet)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000B09F"));//安全访问失败
        return CErrorCode::EC_ECU_REFUSE;
    }
    if (iRet)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }
    m_pNetLayer->KeepLink(0);//断开链路


    sendframe.SetSendFrame(CBinary("\x31\x01\x20\x38\x01", 5));  // 07 26 08 05 31 01 20 38 01 00 00
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    if (checkIs7f(binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关
        return CErrorCode::EC_ECU_REFUSE;
    }

    if (binRecive.GetByteCount() < 5
        || binRecive[0] != 0x71
        || binRecive[1] != 0x01
        || binRecive[2] != 0x20
        || binRecive[3] != 0x38
        || binRecive[4] != 0x01)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000A0D8"), g_GetTxtStringFormHtml("0x0000B21F"));//失败
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关
        return CErrorCode::EC_DATA;
    }


    // 07 26 08 10 14 31 01 70 11 00 05
    sendframe.SetSendFrame(CBinary("\x31\x01\x70\x11\x00\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00", 20));
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount() < 7 || checkIs7f(binRecive))
    {
        CMessageBoxCtrl::SetBusyStatus(false);
        if (!binRecive.GetByteCount())
        {
            FxShowMessageBox(FxGetStdString(STD_INFO_COMMUNICATION_STATUS), FxGetStdString(STD_INFO_NO_COMMUNICATION_SYS), DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_TIME_OVER;
        }
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B0FD"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000BC33"));
        return CErrorCode::EC_TIME_OVER;
    }



    EnterSystem(PTL_CAN_11_500K, CBinary("\x07\xE7\x08\x02\x10\x03\x00\x00\x00\x00\x00", 11), 0x07EF);
    m_rfRet = rfRet;
    binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount() < 2)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }
    if (checkIs7f(binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return CErrorCode::EC_ECU_REFUSE;
    }



    //安全访问
    iRet = SafeLogin_Standard3(CBinary("\x27\x03", 2), 0xA23158);
    if (iRet == CErrorCode::EC_ECU_REFUSE)//否定应答
    {
        FxShowMessageBox(FxGetStdString(STD_TTL_MSG_INFORMATION), g_GetTxtStringFormHtml("0x0000B09F"), DF_MB_BACK);//安全访问失败
        return CErrorCode::EC_ECU_REFUSE;
    }
    else if (iRet < 0)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }
    m_pNetLayer->KeepLink(0);//断开链路
    sendframe.SetSendFrame(CBinary("\x10\x01", 2));
    rfRet = SendDataComm(sendframe);


    EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x26\x08\x05\x31\x01\x20\x38\x01\x00\x00", 11), 0x072E);
    if (iRet)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    rfRet = m_rfRet;
    binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount() < 6)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    sendframe.SetSendFrame(CBinary("\x10\x01", 2));
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount() < 2)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }


    // 写入目标安全标识符成功完成
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000A283"), g_GetTxtStringFormHtml("0x0000BE34"), DF_MB_OK, DT_LEFT);

    // 点火打开
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"));

    // 模块初始化
    PleaseWait_xS_haveTTL(5000, g_GetTxtStringFormHtml("0x00000066"), g_GetTxtStringFormHtml("0x0000B8FE"));


    // 学习车辆标识号
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000A283"), g_GetTxtStringFormHtml("0x90025FAD") + "\n" + "\n" +
        g_GetTxtStringFormHtml("0x0000BD33") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OKCANCEL, DT_LEFT);
    if (iKey == DF_IDCANCEL)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B8D1"), DF_MB_ANYKEYRETURN);//操作人员已中止了此应用程序.
        return 0;
    }

    // 学习标识
    PleaseWait_xS_haveTTL(5000, g_GetTxtStringFormHtml("0x90025FAD"), g_GetTxtStringFormHtml("0x0000A283"));

    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通信中
    Sleep(800);



    EnterSystem(PTL_CAN_11_500K, CBinary("\x07\xE7\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x07EF);
    SendDataComm(CBinary("\x22\xF1\x03", 3));
    sendframe.SetSendFrame(CBinary("\x10\x03", 2));
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    if (checkIs7f(binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return CErrorCode::EC_ECU_REFUSE;
    }


    //安全访问
    iRet = SafeLogin_Standard3(CBinary("\x27\x03", 2), 0xA23158);
    if (iRet == CErrorCode::EC_ECU_REFUSE)//否定应答
    {
        FxShowMessageBox(FxGetStdString(STD_TTL_MSG_INFORMATION), g_GetTxtStringFormHtml("0x0000B09F"), DF_MB_BACK);//安全访问失败
        return CErrorCode::EC_ECU_REFUSE;
    }
    else if (iRet < 0)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }
    sendframe.SetSendFrame(CBinary("\x10\x01", 2));
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    if (checkIs7f(binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return CErrorCode::EC_ECU_REFUSE;
    }
    m_pNetLayer->KeepLink(0);//断开链路


    sendframe.SetSendFrame(CBinary("\x31\x01\x04\x04", 4));
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount() < 4 || binRecive[0] != 0x71 || binRecive[1] != 0x01 || binRecive[2] != 0x04 || binRecive[3] != 0x04)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }


    sendframe.SetSendFrame(CBinary("\x31\x01\x04\x04", 4));  // 07 E7 08 04 31 01 04 04 00 00 00
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount() < 4 || binRecive[0] != 0x71 || binRecive[1] != 0x01 || binRecive[2] != 0x04 || binRecive[3] != 0x04)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    sendframe.SetSendFrame(CBinary("\x31\x03\x04\x04", 4));  // 07 E7 08 04 31 03 04 04 00 00 00
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount() < 4 || binRecive[0] != 0x71 || binRecive[1] != 0x03 || binRecive[2] != 0x04 || binRecive[3] != 0x04)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }
    sendframe.SetSendFrame(CBinary("\x10\x01", 2));
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    if (checkIs7f(binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));
        return CErrorCode::EC_ECU_REFUSE;
    }



    // 确保运转
    FxShowMessageBox(g_GetTxtStringFormHtml("0x9000CD25"), g_GetTxtStringFormHtml("0x9001251C"), DF_MB_OK, DT_LEFT);

    //     以下例程可校准电动发电机。
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000A283"), g_GetTxtStringFormHtml("0x90026F72") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002CEAD")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OKCANCEL, DT_LEFT);
    if (iKey == DF_IDCANCEL)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000069"), g_GetTxtStringFormHtml("0x0000006A,0x0000B105"));
        return CErrorCode::EC_TIME_OVER;
    }


    // 电机发电机校准
    PleaseWait_xS_haveTTL(5000, g_GetTxtStringFormHtml("0x90026F72"), g_GetTxtStringFormHtml("0x0000A283"));

    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通信中
    Sleep(800);



    EnterSystem(PTL_CAN_11_500K, CBinary("\x07\xE7\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x07EF);
    SendDataComm(CBinary("\x22\xF1\x03", 3));
    sendframe.SetSendFrame(CBinary("\x10\x03", 2));
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    if (checkIs7f(binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return CErrorCode::EC_ECU_REFUSE;
    }


    //安全访问
    iRet = SafeLogin_Standard3(CBinary("\x27\x03", 2), 0xA23158);
    if (iRet == CErrorCode::EC_ECU_REFUSE)//否定应答
    {
        FxShowMessageBox(FxGetStdString(STD_TTL_MSG_INFORMATION), g_GetTxtStringFormHtml("0x0000B09F"), DF_MB_BACK);//安全访问失败
        return CErrorCode::EC_ECU_REFUSE;
    }
    else if (iRet < 0)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }
    m_pNetLayer->KeepLink(0);//断开链路

    sendframe.SetSendFrame(CBinary("\x31\x01\x40\x8C", 4));  // 07 E7 08 04 31 01 40 8C 00 00 00
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount() < 4 || binRecive[0] != 0x71 || binRecive[1] != 0x01 || binRecive[2] != 0x40 || binRecive[3] != 0x8C)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }


    sendframe.SetSendFrame(CBinary("\x31\x03\x40\x8C", 4));  // 07 E7 08 04 31 03 40 8C 00 00 00
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount() < 4 || binRecive[0] != 0x71 || binRecive[1] != 0x03 || binRecive[2] != 0x40 || binRecive[3] != 0x8C)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }
    sendframe.SetSendFrame(CBinary("\x10\x01", 2));
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    if (checkIs7f(binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));
        return CErrorCode::EC_ECU_REFUSE;
    }


    // 电机发电机  -  校准    完成
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000A283"), g_GetTxtStringFormHtml("0x90026F72") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002A16C")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OK, DT_LEFT);

    // 点火关闭
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));

    // 点火打开
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"));



    // 随需自检模式
    iRet = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B8FF"), g_GetTxtStringFormHtml("0x9001537C") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9001C263")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OKCANCEL, DT_LEFT);
    if (DF_IDCANCEL == iRet)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000BE88"));//操作人员已中止了此应用程序
        return iRet;
    }

    // 随需自检模式
    PleaseWait_xS_haveTTL(5000, g_GetTxtStringFormHtml("0x0000B8FF"), g_GetTxtStringFormHtml("0x0000A283"));

    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通信中
    Sleep(800);



    EnterSystem(PTL_CAN_11_500K, CBinary("\x07\xE7\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x07EF);
    SendDataComm(CBinary("\x22\xF1\x03", 3));
    sendframe.SetSendFrame(CBinary("\x10\x03", 2));
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    if (checkIs7f(binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return CErrorCode::EC_ECU_REFUSE;
    }


    sendframe.SetSendFrame(CBinary("\x31\x01\x02\x02", 4));  // 07 E7 08 04 31 01 02 02 00 00 00
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount() < 4 || binRecive[0] != 0x71 || binRecive[1] != 0x01 || binRecive[2] != 0x02 || binRecive[3] != 0x02)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    sendframe.SetSendFrame(CBinary("\x31\x03\x02\x02", 4));  // 07 E7 08 04 31 03 02 02 00 00 00
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount() < 4 || binRecive[0] != 0x71 || binRecive[1] != 0x03 || binRecive[2] != 0x02 || binRecive[3] != 0x02)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }
    sendframe.SetSendFrame(CBinary("\x10\x01", 2));
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    if (checkIs7f(binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));
        return CErrorCode::EC_ECU_REFUSE;
    }


    // 随需自检模式完成
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000A283"), g_GetTxtStringFormHtml("0x0000B8FF") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002A16C")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OK, DT_LEFT);


    // 点火关闭
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));

    // 点火打开
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"));



    // 故障码
    iRet = ClearSysDTC_Programme_538(PTL_CAN_11_500K, CBinary("\x07\xE7\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x07EF);

    return iRet;

}





// 传动系

// 电机更换
W_ErrorCode CSeviceFunctionNew::Motor_replacement_NEW_lansheng_L494_2016(W_I16 iValue)
{
    W_ErrorCode iRet = CErrorCode::EC_SUCCESS;
    CSendFrame sendframe;
    CReceiveFrame rfRet;
    BYTE ptlMode1, ptlMode2;
    CBinary binCheckCmd, binEnterCmd, binSafeCmd;
    W_U32 uAddPara = 0;
    W_I16 iKey = 0;

    W_U32 uStandValue = 0x4C1F84;
    W_I32 P_table[3][8] = { {0x8565D6,0xDBC931,0x63A3EF,0x175452,0xFEBB39,0x2946EF,0x839E53,0xD30D2B},
    {0x732ACA,0x327408,0xB4FA9D,0xBCC4A7,0xA98BD2,0x862729,0xDC4CDF,0x6CA822},
    {0x0D71C9,0xCBF01F,0x46E2B2,0x5DD7F8,0x6BBC7C,0x035865,0xD39146,0x762110} };

    string strOpenfileConfigMenu = m_stropenfileConfigMenu;

    if (1 == iValue)
    {
        ptlMode1 = PTL_CAN_29_500K;
        ptlMode2 = PTL_CAN_29_125K;
        uAddPara = 0;
        binSafeCmd = CBinary("\x27\x01", 2);
        //binCheckCmd = CBinary("\x18\xDA\x10\xF1\x08\x03\x22\x12\x8C\x00\x00\x00\x00",13);
        binEnterCmd = CBinary("\x18\xDA\x19\xF1\x08\x02\x10\x03\x00\x00\x00\x00\x00", 13);
    }
    else   // 电机更换（2）
    {
        binSafeCmd = CBinary("\x27\x03", 2);

        ptlMode1 = PTL_CAN_11_500K;
        ptlMode2 = PTL_CAN_11_125K;
        uAddPara = 0x0769;
        binCheckCmd = CBinary("\x07\xE0\x08\x03\x22\xF4\x0C\x00\x00\x00\x00", 11);
        binEnterCmd = CBinary("\x07\x61\x08\x02\x10\x03\x00\x00\x00\x00\x00", 11);

    }

    //step1~5
    iRet = CheckEngineStop(ptlMode1, binCheckCmd, 0x07E8, CBinary("\x01\x00", 2));
    if (iRet)
        return iRet;


    //step01 为配备自动变速器的车辆选择驻车档，为配备手动变速器的车辆选择空档.
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000BCFD") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900129E4"), DF_MB_ANYKEYRETURN, DT_LEFT);

    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000062"), DF_MB_ANYKEYRETURN, DT_LEFT);//确保打开了点火开关

    //step02 请执行下列步骤：//确保选择空档，且驻车制动器已拉上.     //确定点火开关打开，且发动机没有运转.
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B998"), g_GetTxtStringFormHtml("0x00000069") + "\n" + "\n" + g_GetTxtStringFormHtml("0x00000069")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000B257") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000B99B")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x900191DF") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_ANYKEYRETURN, DT_LEFT);


    EnterSystem(PTL_CAN_11_500K, CBinary("\x07\xDF\x08\x02\x01\x00\x00\x00\x00\x00\x00", 11), 0x07E7);
    //m_pNetLayer->KeepLink(2000,CSendFrame(CBinary("\x3E\x80",2)));


    CBinaryGroup binGroup;
    binGroup.Append(CBinary("\x31\x01\x40\x22", 4));
    binGroup.Append(CBinary("\x31\x03\x40\x22", 4));
    binGroup.Append(CBinary("\x31\x01\x40\x1F", 4));
    binGroup.Append(CBinary("\x31\x03\x40\x1F", 4));
    binGroup.Append(CBinary("\x31\x01\x40\x20\x02", 5));
    binGroup.Append(CBinary("\x31\x03\x40\x20", 4));
    binGroup.Append(CBinary("\x31\x01\x40\x1F", 4));
    binGroup.Append(CBinary("\x31\x03\x40\x1F", 4));
    binGroup.Append(CBinary("\x31\x01\x40\x20\x01", 5));
    binGroup.Append(CBinary("\x31\x03\x40\x20", 4));

    for (int i = 0; i < 5; i++)
    {
        if (!i)
        {
            //step03 这一常规程序将执行下列任务：标定范围更改.
            iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B998"), g_GetTxtStringFormHtml("0x0000B99D") + "\n" + "\n" + g_GetTxtStringFormHtml("0x90022509")
                + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000B99C") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OKCANCEL, DT_LEFT);
            if (DF_IDCANCEL == iKey)
                return iRet;

            FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);

            //链路：与参数有关
            iRet = EnterSystem(ptlMode1, binEnterCmd, uAddPara);  // ptlMode1=PTL_CAN_11_500K ； binEnterCmd=\x07\x61\x08\x02\x10\x03\x00\x00\x00\x00\x00
            // uAddPara=0x0769
            if (iRet)
            {
                FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
                return CErrorCode::EC_TIME_OVER;
            }

            rfRet = m_rfRet;
            CBinary binRecive = rfRet.GetFirst();
            if (binRecive.GetByteCount() < 5)
            {
                FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
                return CErrorCode::EC_TIME_OVER;
            }

            m_binRecive = CBinary(binRecive.GetBuffer() + 4, binRecive.GetByteCount() - 4);
            if (checkIs7f(m_binRecive))
            {
                FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"), DF_MB_ANYKEYRETURN, DT_LEFT);//ECU不支持
                return iRet;
            }

            //step8 安全访问
            iRet = SafeLogin_L405_2014_Oil(binSafeCmd, uStandValue, P_table);// 07 61 08 05 27 04 0D 71 C9 00 00
            if (CErrorCode::EC_ECU_REFUSE == iRet)
            {
                FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000B09F"), DF_MB_ANYKEYRETURN, DT_LEFT);//安全访问失败
                return iRet;
            }

            if (iRet < 0)
            {
                FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
                return CErrorCode::EC_TIME_OVER;
            }
            //链路保持
            //m_pNetLayer->KeepLink(1000,CSendFrame(CBinary("\x3E\x80",2)));

        }
        else if (1 == i)
        {
            //step11
            FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B998"), g_GetTxtStringFormHtml("0x0000B99D") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002A16C")
                + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_ANYKEYRETURN, DT_LEFT);//标定完成

//分动箱现在处于高档范围
            FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B998"), g_GetTxtStringFormHtml("0x90026912") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_ANYKEYRETURN, DT_LEFT);

            // 确保发动机运转
            FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B93D"), g_GetTxtStringFormHtml("0x9001251C"), DF_MB_OK, DT_LEFT);

            //这一常规程序将执行下列任务：    标定离合器.    
            iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B998"), g_GetTxtStringFormHtml("0x0000B99D") + "\n" + "\n" + g_GetTxtStringFormHtml("0x90022509")
                + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000B9A1") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OKCANCEL, DT_LEFT);
            if (DF_IDCANCEL == iKey)
                return iRet;
        }
        else if (2 == i)
        {
            //step14
            FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B998"), g_GetTxtStringFormHtml("0x0000B99D") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002A16C")
                + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_ANYKEYRETURN, DT_LEFT);//标定完成

            //这一常规程序将执行下列任务：    启动范围更改 - 过低    
            iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B998"), g_GetTxtStringFormHtml("0x0000B99D") + "\n" + "\n" + g_GetTxtStringFormHtml("0x90022509")
                + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000B9A2") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OK, DT_LEFT);
            if (DF_IDCANCEL == iKey)
                return iRet;
        }
        else if (3 == i)
        {
            //step17
            FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B998"), g_GetTxtStringFormHtml("0x0000B99D") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002A16C")
                + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_ANYKEYRETURN, DT_LEFT);//标定完成

            FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B998"), g_GetTxtStringFormHtml("0x0000B9A3")
                + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_ANYKEYRETURN, DT_LEFT);//分动箱目前处于低档范围

            // 确保发动机运转
            FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B93D"), g_GetTxtStringFormHtml("0x9001251C"), DF_MB_OK, DT_LEFT);

            //这一常规程序将执行下列任务：    标定离合器.    
            iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B998"), g_GetTxtStringFormHtml("0x0000B99D") + "\n" + "\n" + g_GetTxtStringFormHtml("0x90022509")
                + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000B9A1") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OKCANCEL, DT_LEFT);
            if (DF_IDCANCEL == iKey)
                return iRet;
        }
        else
        {
            //step20
            FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B998"), g_GetTxtStringFormHtml("0x0000B99D") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002A16C")
                + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_ANYKEYRETURN, DT_LEFT);//标定完成

            //这一常规程序将执行下列任务：    启动范围更改 - 过高    
            iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B998"), g_GetTxtStringFormHtml("0x0000B99D") + "\n" + "\n" + g_GetTxtStringFormHtml("0x90022509")
                + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000B9A4") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OK, DT_LEFT);
            if (DF_IDCANCEL == iKey)
                return iRet;
        }


        //step9        step12        step15        step18        step21
        FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);
        sendframe.SetSendFrame(binGroup.GetByteAt(2 * i));
        rfRet = SendDataComm(sendframe);
        m_binRecive = rfRet.GetFirst();

        W_U32 iCmd = 0;
        W_U32 iRes = 0;
        if (iValue != 3)
        {
            if (0 == m_binRecive.GetByteCount())
            {
                FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
                return CErrorCode::EC_TIME_OVER;
            }
            if (checkIs7f(m_binRecive))
            {
                FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"), DF_MB_ANYKEYRETURN, DT_LEFT);//ECU不支持
                return iRet;
            }

            iCmd = ((binGroup.GetByteAt(2 * i))[0] << 24) + ((binGroup.GetByteAt(2 * i))[1] << 16) + ((binGroup.GetByteAt(2 * i))[2] << 8) + (binGroup.GetByteAt(2 * i))[3];
            if (m_binRecive.GetByteCount() > 3)
                iRes = (m_binRecive[0] << 24) + (m_binRecive[1] << 16) + (m_binRecive[2] << 8) + m_binRecive[3];

            if (m_binRecive.GetByteCount() < 4 || iCmd + 0x40000000 != iRes)
            {
                FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B99D"), g_GetTxtStringFormHtml("0x0000B21F"), DF_MB_ANYKEYRETURN, DT_LEFT);//失败
                Motor_Replacement_00F0003E_L319_Step30(0);
                return iRet;
            }
            if (i == 2)
                Sleep(3000);
            else
                Sleep(2000);
        }
        else if (m_binRecive.GetByteCount() < 4 || checkIs7f(m_binRecive))
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B99D"), g_GetTxtStringFormHtml("0x0000B21F"), DF_MB_ANYKEYRETURN, DT_LEFT);//失败
            Motor_Replacement_00F0003E_L319_Step30(0);
            return iRet;
        }

        //step10    step13        step16        step19        step22
        W_U32 uMsStart = GetTickCount();
        W_U32 uMsStop = 0;
        W_U32 uPassMs = 0;
        string strPromot = g_GetTxtStringFormHtml("0x0000B09D");
        string strTTL = g_GetTxtStringFormHtml("0x0000B99D");//分动箱控制模块标定
        while (1)
        {
            uMsStop = GetTickCount();
            uPassMs = uMsStop - uMsStart;

            sendframe.SetSendFrame(binGroup.GetByteAt(2 * i + 1));
            rfRet = SendDataComm(sendframe);
            m_binRecive = rfRet.GetFirst();

            if (iValue != 3)
            {
                iCmd = ((binGroup.GetByteAt(2 * i + 1))[0] << 24) + ((binGroup.GetByteAt(2 * i + 1))[1] << 16) + ((binGroup.GetByteAt(2 * i + 1))[2] << 8) + (binGroup.GetByteAt(2 * i + 1))[3];
                iRes = 0;
                if (m_binRecive.GetByteCount() > 3)
                    iRes = (m_binRecive[0] << 24) + (m_binRecive[1] << 16) + (m_binRecive[2] << 8) + m_binRecive[3];
                if (m_binRecive.GetByteCount() > 4 && iRes == iCmd + 0x40000000 && 2 == (m_binRecive[4] & 0x0F));
                else break;
            }
            else
            {
                if (m_binRecive.GetByteCount() > 4 && !checkIs7f(m_binRecive) && 2 == (m_binRecive[4] & 0x0F));
                else break;
            }

            if (uPassMs > 29999)
            {
                FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B99D"), g_GetTxtStringFormHtml("0x0000B918"), DF_MB_ANYKEYRETURN, DT_LEFT);//因超时而失败
                Motor_Replacement_00F0003E_L319_Step30(0);
                return iRet;
            }
            FxProgressBar(strTTL, strPromot, uPassMs * 100 / 30000);
        }

        if (iValue != 3)
        {
            if (0 == m_binRecive.GetByteCount())
            {
                FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
                return CErrorCode::EC_TIME_OVER;
            }

            if (checkIs7f(m_binRecive))
            {
                FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"), DF_MB_ANYKEYRETURN, DT_LEFT);//ECU不支持
                return iRet;
            }

            if (m_binRecive.GetByteCount() < 4
                || iCmd + 0x40000000 != iRes
                || (m_binRecive.GetByteCount() > 4 && 1 == (m_binRecive[4] & 0x0F)))
            {
                FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B99D"), g_GetTxtStringFormHtml("0x0000B21F"), DF_MB_ANYKEYRETURN, DT_LEFT);//失败
                Motor_Replacement_00F0003E_L319_Step30(0);
                return iRet;
            }//i == 0 end

            if (1 == i || 3 == i)
            {
                if (4 == m_binRecive.GetByteCount() || 5 == m_binRecive.GetByteCount());
                else if (0 == (m_binRecive[4] & 0x0F));
                else if (5 == m_binRecive[m_binRecive.GetByteCount() - 1])
                {
                    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B99E"), g_GetTxtStringFormHtml("0x0000B9AB"), DF_MB_ANYKEYRETURN, DT_LEFT);//车速或车轮转速无效
                    Motor_Replacement_00F0003E_L319_Step30(0);
                    return iRet;
                }
                else if (6 == m_binRecive[m_binRecive.GetByteCount() - 1])
                {
                    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B99E"), g_GetTxtStringFormHtml("0x0000B9AC"), DF_MB_ANYKEYRETURN, DT_LEFT);//锁止力矩过大
                    Motor_Replacement_00F0003E_L319_Step30(0);
                    return iRet;
                }
                else if (7 == m_binRecive[m_binRecive.GetByteCount() - 1])
                {
                    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B99E"), g_GetTxtStringFormHtml("0x0000B9AD"), DF_MB_ANYKEYRETURN, DT_LEFT);//换档启动，或处于空档中
                    Motor_Replacement_00F0003E_L319_Step30(0);
                    return iRet;
                }
                else if (9 == m_binRecive[m_binRecive.GetByteCount() - 1])
                {
                    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B99E"), g_GetTxtStringFormHtml("0x0000B9AE"), DF_MB_ANYKEYRETURN, DT_LEFT);//代用功能激活
                    Motor_Replacement_00F0003E_L319_Step30(0);
                    return iRet;
                }
                else if (0x0B == m_binRecive[m_binRecive.GetByteCount() - 1])
                {
                    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B99E"), g_GetTxtStringFormHtml("0x00004BE4"), DF_MB_ANYKEYRETURN, DT_LEFT);//一般故障
                    Motor_Replacement_00F0003E_L319_Step30(0);
                    return iRet;
                }
                else
                {
                    Motor_Replacement_00F0003E_L319_Step30(0);
                    return iRet;
                }
            }
            else if (2 == i || 4 == i)
            {
                if (4 == m_binRecive.GetByteCount() || 5 == m_binRecive.GetByteCount());
                else if (0 == (m_binRecive[4] & 0x0F));
                else if (0x0B == m_binRecive[m_binRecive.GetByteCount() - 1])
                {
                    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B99E"), g_GetTxtStringFormHtml("0x00004BE4"), DF_MB_ANYKEYRETURN, DT_LEFT);//一般故障
                    Motor_Replacement_00F0003E_L319_Step30(0);
                    return iRet;
                }
                else if (0x10 == m_binRecive[m_binRecive.GetByteCount() - 1])
                {
                    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B99E"), g_GetTxtStringFormHtml("0x0000B9B4"), DF_MB_ANYKEYRETURN, DT_LEFT);//范围更改已取消.
                    Motor_Replacement_00F0003E_L319_Step30(0);
                    return iRet;
                }
                else
                {
                    Motor_Replacement_00F0003E_L319_Step30(0);
                    return iRet;
                }
            }
        }
        else
        {
            if (m_binRecive.GetByteCount() < 4
                || checkIs7f(m_binRecive)
                || (m_binRecive.GetByteCount() > 4 && 1 == (m_binRecive[4] & 0x0F)))
            {
                FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B99D"), g_GetTxtStringFormHtml("0x0000B21F"), DF_MB_ANYKEYRETURN, DT_LEFT);//失败
                Motor_Replacement_00F0003E_L319_Step30(0);
                return iRet;
            }

            if (!i)
            {
                if (m_binRecive.GetByteCount() > 4 && m_binRecive[4])
                {
                    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B99D"), g_GetTxtStringFormHtml("0x0000B0A3"), DF_MB_ANYKEYRETURN, DT_LEFT);//完成
                    Motor_Replacement_00F0003E_L319_Step30(0);
                    return iRet;
                }
            }
            else if (1 == i)
            {
                if (4 == m_binRecive.GetByteCount());
                else if (0 == m_binRecive[4]);
                else if (5 == m_binRecive[m_binRecive.GetByteCount() - 1])
                {
                    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B99D"), g_GetTxtStringFormHtml("0x0000B0A3"), DF_MB_ANYKEYRETURN, DT_LEFT);//完成
                    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B99E"), g_GetTxtStringFormHtml("0x0000B99F,0x0000B9AB"), DF_MB_ANYKEYRETURN, DT_LEFT);//错误消息.车速或车轮转速无效
                    Motor_Replacement_00F0003E_L319_Step30(3);
                    return iRet;
                }
                else if (6 == m_binRecive[m_binRecive.GetByteCount() - 1])
                {
                    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B99D"), g_GetTxtStringFormHtml("0x0000B0A3"), DF_MB_ANYKEYRETURN, DT_LEFT);//完成
                    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B99E"), g_GetTxtStringFormHtml("0x0000B99F,0x0000B9AC"), DF_MB_ANYKEYRETURN, DT_LEFT);//错误消息.锁止力矩过大
                    Motor_Replacement_00F0003E_L319_Step30(3);
                    return iRet;
                }
                else if (7 == m_binRecive[m_binRecive.GetByteCount() - 1])
                {
                    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B99D"), g_GetTxtStringFormHtml("0x0000B0A3"), DF_MB_ANYKEYRETURN, DT_LEFT);//完成
                    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B99E"), g_GetTxtStringFormHtml("0x0000B99F,0x0000B9AD"), DF_MB_ANYKEYRETURN, DT_LEFT);//错误消息.换档启动，或处于空档中
                    Motor_Replacement_00F0003E_L319_Step30(3);
                    return iRet;
                }
                else if (9 == m_binRecive[m_binRecive.GetByteCount() - 1])
                {
                    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B99D"), g_GetTxtStringFormHtml("0x0000B0A3"), DF_MB_ANYKEYRETURN, DT_LEFT);//完成
                    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B99E"), g_GetTxtStringFormHtml("0x0000B99F,0x0000B9AE"), DF_MB_ANYKEYRETURN, DT_LEFT);//错误消息.代用功能激活
                    Motor_Replacement_00F0003E_L319_Step30(3);
                    return iRet;
                }
                else if (0x0B == m_binRecive[m_binRecive.GetByteCount() - 1])
                {
                    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B99D"), g_GetTxtStringFormHtml("0x0000B0A3"), DF_MB_ANYKEYRETURN, DT_LEFT);//完成
                    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B99E"), g_GetTxtStringFormHtml("0x0000B99F,0x00004BE4"), DF_MB_ANYKEYRETURN, DT_LEFT);//错误消息.一般故障
                    Motor_Replacement_00F0003E_L319_Step30(3);
                    return iRet;
                }
                else
                {
                    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B99D"), g_GetTxtStringFormHtml("0x0000B0A3"), DF_MB_ANYKEYRETURN, DT_LEFT);//完成
                    Motor_Replacement_00F0003E_L319_Step30(0);
                    return iRet;
                }
            }
            else
            {
                if (4 == m_binRecive.GetByteCount());
                else if (0 == m_binRecive[4]);
                else if (0x0B == m_binRecive[m_binRecive.GetByteCount() - 1])
                {
                    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B99D"), g_GetTxtStringFormHtml("0x0000B0A3"), DF_MB_ANYKEYRETURN, DT_LEFT);//完成
                    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B99E"), g_GetTxtStringFormHtml("0x0000B99F,0x00004BE4"), DF_MB_ANYKEYRETURN, DT_LEFT);//错误消息.一般故障
                    Motor_Replacement_00F0003E_L319_Step30(3);
                    return iRet;
                }
                else if (0x10 == m_binRecive[m_binRecive.GetByteCount() - 1])
                {
                    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B99D"), g_GetTxtStringFormHtml("0x0000B0A3"), DF_MB_ANYKEYRETURN, DT_LEFT);//完成
                    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B99E"), g_GetTxtStringFormHtml("0x0000B99F,0x0000B9B4"), DF_MB_ANYKEYRETURN, DT_LEFT);//错误消息.范围更改已取消.
                    Motor_Replacement_00F0003E_L319_Step30(3);
                    return iRet;
                }
                else
                {
                    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B99D"), g_GetTxtStringFormHtml("0x0000B0A3"), DF_MB_ANYKEYRETURN, DT_LEFT);//完成
                    Motor_Replacement_00F0003E_L319_Step30(0);
                    return iRet;
                }
            }
            while (2)
            {
                uMsStop = GetTickCount();
                uPassMs = uMsStop - uMsStart;
                if (uPassMs > 29999)
                    break;
                FxProgressBar(strTTL, strPromot, uPassMs * 100 / 30000);
            }
        }
    }

    //step23
    if (3 == iValue)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B99D"), g_GetTxtStringFormHtml("0x0000B0A3"), DF_MB_ANYKEYRETURN, DT_LEFT);//完成
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
    }
    else
    {
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B99D"), g_GetTxtStringFormHtml("0x0000B99D") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002A16C")
            + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_ANYKEYRETURN, DT_LEFT);//完成
    }
    m_pNetLayer->KeepLink(0);//链路断开

    //分动箱现在处于高档范围
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B9A0") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_ANYKEYRETURN, DT_LEFT);
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B998"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_ANYKEYRETURN, DT_LEFT);//关闭点火开关

    //起动发动机并选择低档范围.     等待直至显示了低档范围.     一旦显示，即选择高档范围.     等待直至显示了高档范围.        一旦显示，即按下按钮.
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B998"), g_GetTxtStringFormHtml("0x00000069") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000B9A6")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000B9A7") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000B9A8")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000B9A9") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9000153E")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_ANYKEYRETURN, DT_LEFT);

    //为配备自动变速器的车辆选择驻车档，为配备手动变速器的车辆选择空档
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B998"), g_GetTxtStringFormHtml("0x0000BCFD") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900129E4"), DF_MB_ANYKEYRETURN, DT_LEFT);

    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000065"), DF_MB_ANYKEYRETURN, DT_LEFT);//确保关闭了点火开关


    EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x20\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x0728);

    //L322_2010     L494_2014        step24
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00009476"), g_GetTxtStringFormHtml("0x0000B9B0,0x0000B0A3"));//变速器控制模块信息-完成

    //是否安装了手动变速器? 如果配备了的话请选择确定键，否则选择取消键。
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B9B1") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002A1F5"), DF_MB_OKCANCEL, DT_LEFT);

    if (DF_IDOK == iKey)
    {
        //step25
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x90009E9C"));//确保打开了点火开关

        EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x61\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x0769);
        SendDataComm(CBinary("\x22\xf1\x03", 3));
        sendframe.SetSendFrame(CBinary("\x10\x03", 2));
        rfRet = SendDataComm(sendframe);
        if (0 == rfRet.GetByteCount())
        {
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
            return iRet;
        }

        m_binRecive = rfRet.GetFirst();
        if (checkIs7f(m_binRecive))
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"), DF_MB_ANYKEYRETURN, DT_LEFT);//ECU不支持    
            return iRet;
        }
        iRet = SafeLogin_L405_2014_Oil(CBinary("\x27\x01", 2), uStandValue, P_table); // 07 61 08 05 27 02 0D 71 C9 00 00
        if (CErrorCode::EC_ECU_REFUSE == iRet)
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000B09F"), DF_MB_ANYKEYRETURN, DT_LEFT);//安全访问失败
            return iRet;
        }
        m_pNetLayer->KeepLink(1000, CSendFrame(CBinary("\x3E\x00", 2)));//链路保持

        //step26
        for (int i = 0; i < 2; i++)
        {
            if (i == 0)
                sendframe.SetSendFrame(CBinary("\x2E\xD1\x29\x00", 4));
            else
                sendframe.SetSendFrame(CBinary("\x2E\xD1\x2A\x00", 4));
            SendDataComm(sendframe);
            m_binRecive = rfRet.GetFirst();
            if (m_binRecive.GetByteCount() == 3)
            {
                FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B0AC"), DF_MB_ANYKEYRETURN, DF_MB_ANYKEYRETURN);//测试失败
                FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_ANYKEYRETURN, DT_LEFT);//关闭点火开关
                //程序未能完成.        必须调查该问题.
                FxShowMessageBox(g_GetTxtStringFormHtml("0x00000069"), g_GetTxtStringFormHtml("0x0000006A,0x0000B105"), DF_MB_ANYKEYRETURN, DT_LEFT);
                return iRet;
            }
        }
        SendDataComm(CBinary("\x10\x01", 2));
        m_pNetLayer->KeepLink(0);//断开链路

        // 分动箱控制模块标定 下述操作将对XY传感器进行标定 完成
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B998"), g_GetTxtStringFormHtml("0x0000B99D,0x0000B9B2,0x0000B0A3"));

        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_ANYKEYRETURN, DT_LEFT);//关闭点火开关
    }

    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B99D") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002A16C")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_ANYKEYRETURN, DT_LEFT);//分动箱控制模块标定成功




    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B9A5"), DF_MB_ANYKEYRETURN, DT_LEFT);//分动箱控制模块标定成功


    if (1 == iValue)
    {
        //L319    step24~
        CheckSysDTCNub_model2(ptlMode1, ptlMode2, CBinary("\x18\xDA\x19\xF1\x08\x03\x19\x02\x0C\x00\x00\x00\x00", 13), CBinary("\x18\xDB\x33\xF1\x08\x04\x14\xFF\xFF\xFF\x00\x00\x00", 13), CBinary("\x18\xDA\x19\xF1\x08\x03\x19\x02\x0C\x00\x00\x00\x00", 13), 0x00);
    }
    else if (2 == iValue)
    {
        iRet = ClearAllFaultCodes1(PTL_CAN_11_500K, CBinary("\x07\x61\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x0768, g_GetTxtStringFormHtml("0x0000B998"), 0x07E8);
    }

    // 现在需要学习下述档位循环
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B998"), g_GetTxtStringFormHtml("0x90025FAA") + "\n" + "\n" + g_GetTxtStringFormHtml("0x90026079")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000B9BA") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000B9BB") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OK, DT_LEFT);

    return iRet;

}



// 分动箱-电磁阀更换
W_ErrorCode CSeviceFunctionNew::Solenoid_Replacement_NEW_lansheng_L494_2016()
{
    W_ErrorCode iRet = CErrorCode::EC_SUCCESS;
    CSendFrame sendframe;
    CReceiveFrame rfRet;
    W_I16 iKey = 0;
    W_U32 uStandValue = 0x4C1F84;
    W_I32 P_table[3][8] = { {0x8565D6,0xDBC931,0x63A3EF,0x175452,0xFEBB39,0x2946EF,0x839E53,0xD30D2B},
    {0x732ACA,0x327408,0xB4FA9D,0xBCC4A7,0xA98BD2,0x862729,0xDC4CDF,0x6CA822},
    {0x0D71C9,0xCBF01F,0x46E2B2,0x5DD7F8,0x6BBC7C,0x035865,0xD39146,0x762110} };
    BYTE ptlMode1, ptlMode2;
    CBinary binCheckCmd, binEnterCmd, binSafeCmd;
    W_U32 uAddPara = 0;


    binSafeCmd = CBinary("\x27\x03", 2);

    ptlMode1 = PTL_CAN_11_500K;
    ptlMode2 = PTL_CAN_11_125K;
    uAddPara = 0x0769;
    binCheckCmd = CBinary("\x07\xE0\x08\x03\x22\xF4\x0C\x00\x00\x00\x00", 11);
    binEnterCmd = CBinary("\x07\x61\x08\x02\x10\x03\x00\x00\x00\x00\x00", 11);

    //Step1~5
    iRet = CheckEngineStop(ptlMode1, binCheckCmd, 0x07E8, CBinary("\x01\x00", 2));
    if (iRet)
        return iRet;

    for (int i = 0; i < 2; i++)
    {
        if (!i)
        {
            // 为配备自动变速器的车辆选择驻车档，为配备手动变速器的车辆选择空档.
            FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000BCFD") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900129E4"), DF_MB_ANYKEYRETURN, DT_LEFT);
        }
        else
        {
            //step13
            //'断开接头并将新的电磁阀连接到接头上，但不要将电磁阀安装到分动箱上. '
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00000069"), g_GetTxtStringFormHtml("0x0000BA4B"), DF_MB_ANYKEYRETURN, DT_LEFT);
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_ANYKEYRETURN, DT_LEFT);//关闭点火开关
        }
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x90009E9C"), DF_MB_ANYKEYRETURN, DT_LEFT);//确保打开了点火开关
        EnterSystem(PTL_CAN_11_500K, CBinary("\x07\xDF\x08\x02\x01\x00\x00\x00\x00\x00\x00", 11), 0x07E7);
        iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B99D"), g_GetTxtStringFormHtml("0x0000BA46"), DF_MB_OKCANCEL, DT_LEFT);//安全诊断状态
        if (DF_IDCANCEL == iKey)
            return iRet;

        //step7        step14
        FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);
        //链路：29位can500k
        iRet = EnterSystem(ptlMode1, binEnterCmd, uAddPara);
        if (iRet)
        {
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TTL_MSG_INFORMATION, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_TIME_OVER;
        }

        rfRet = m_rfRet;
        CBinary binRecive = rfRet.GetFirst();
        if (binRecive.GetByteCount() < 5)
        {
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TTL_MSG_INFORMATION, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_TIME_OVER;
        }

        m_binRecive = CBinary(binRecive.GetBuffer() + 4, binRecive.GetByteCount() - 4);
        if (checkIs7f(m_binRecive))
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"), DF_MB_ANYKEYRETURN, DT_LEFT);//ECU不支持
            return iRet;
        }

        //安全访问
        iRet = SafeLogin_L405_2014_Oil(CBinary("\x27\x03", 2), uStandValue, P_table);
        if (CErrorCode::EC_ECU_REFUSE == iRet)
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000B09F"), DF_MB_ANYKEYRETURN, DT_LEFT);//安全访问失败
            return iRet;
        }

        if (iRet < 0)
        {
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_TIME_OVER;
        }
        //链路保持
        m_pNetLayer->KeepLink(1000, CSendFrame(CBinary("\x3E\x00", 2)));

        //step8
        sendframe.SetSendFrame(CBinary("\x22\xD1\x00", 3));
        rfRet = SendDataComm(sendframe);
        if (!i)
        {
            //'松开电磁阀，但不要从分动箱上取下电磁阀. '
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00000069"), g_GetTxtStringFormHtml("0x00000069") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BA47")
                + "\n" + "\n" + g_GetTxtStringFormHtml("0x90022F9A") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_ANYKEYRETURN, DT_LEFT);
        }
        //这一常规程序将执行下列任务：    接通分动箱转换电磁阀            
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BA45"), g_GetTxtStringFormHtml("0x90022509") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BA48")
            + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_ANYKEYRETURN, DT_LEFT);

        //step9        step16
        FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);
        sendframe.SetSendFrame(CBinary("\x31\x01\x40\x23", 4));
        rfRet = SendDataComm(sendframe);
        if (0 == rfRet.GetByteCount())
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A66"), g_GetTxtStringFormHtml("0x0000B91B"), DF_MB_ANYKEYRETURN, DT_LEFT);//通讯故障
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_ANYKEYRETURN, DT_LEFT);//关闭点火开关
            return iRet;
        }

        PleaseWait_xS(2000);//延时2s
        //step10        step17
        sendframe.SetSendFrame(CBinary("\x31\x03\x40\x23", 4));
        rfRet = SendDataComm(sendframe);
        if (0 == rfRet.GetByteCount())
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A66"), g_GetTxtStringFormHtml("0x0000B91B"), DF_MB_ANYKEYRETURN, DT_LEFT);//通讯故障
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_ANYKEYRETURN, DT_LEFT);//关闭点火开关
            return iRet;
        }

        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BA45"), g_GetTxtStringFormHtml("0x9002A16C ") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OK, DT_LEFT);

        if (!i)
        {
            //'电磁阀现在可以从分动箱上取下，但不要断开接头. '
            FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BA45"), g_GetTxtStringFormHtml("0x00000069") + g_GetTxtStringFormHtml("0x00000069")
                + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BA49") + "\n" + "\n" + g_GetTxtStringFormHtml("0x90022F9A")
                + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_ANYKEYRETURN, DT_LEFT);
        }
        else
        {
            //选择可将新电磁阀安装到分动箱
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00000069"), g_GetTxtStringFormHtml("0x0000BA4C"), DF_MB_ANYKEYRETURN, DT_LEFT);
        }

        while (1)
        {
            //step11        step18
            iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BA45"), g_GetTxtStringFormHtml("0x0000BA4A"), DF_MB_OKCANCEL, DT_LEFT);//断开分动箱转换电磁阀
            if (DF_IDCANCEL == iKey)
                return iRet;

            //step12        step19
            FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);
            sendframe.SetSendFrame(CBinary("\x31\x02\x40\x23", 4));
            rfRet = SendDataComm(sendframe);
            m_binRecive = rfRet.GetFirst();
            if (0 == m_binRecive.GetByteCount()
                || (m_binRecive.GetByteCount() > 4 && m_binRecive[4] != 0x30))
            {
                //程序未能完成.    @PROCEDURE_COMPLETED_FAILED
                //如果第二次发生故障，则必须调查该问题.    @SecondFailMustInvestigate$I
                //请准确执行屏幕上的说明    @JPleaseFollowInstructnsExact$H
                //您想再试一次吗？
                iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x00000069"), g_GetTxtStringFormHtml("0x0000006A,0x0000006B,0x0000006C,0x0000B116"), DF_MB_YESNO, DT_LEFT);
                if (DF_IDCANCEL == iKey)
                    return iRet;
            }
            else
                break;
        }
    }




    //step20
    PleaseWait_xS_haveTTL(10000, g_GetTxtStringFormHtml("0x00000066"), g_GetTxtStringFormHtml("0x0000B8FE"));//延时10s
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_ANYKEYRETURN, DT_LEFT);//关闭点火开关




    CBinaryGroup binGroup;
    binGroup.Append(CBinary("\x31\x01\x40\x22", 4));
    binGroup.Append(CBinary("\x31\x03\x40\x22", 4));
    binGroup.Append(CBinary("\x31\x01\x40\x1F", 4));
    binGroup.Append(CBinary("\x31\x03\x40\x1F", 4));
    binGroup.Append(CBinary("\x31\x01\x40\x20\x02", 5));
    binGroup.Append(CBinary("\x31\x03\x40\x20", 4));
    binGroup.Append(CBinary("\x31\x01\x40\x1F", 4));
    binGroup.Append(CBinary("\x31\x03\x40\x1F", 4));
    binGroup.Append(CBinary("\x31\x01\x40\x20\x01", 5));
    binGroup.Append(CBinary("\x31\x03\x40\x20", 4));

    for (int i = 0; i < 5; i++)
    {
        if (!i)
        {
            //step03 这一常规程序将执行下列任务：标定范围更改.
            iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B998"), g_GetTxtStringFormHtml("0x0000B99D") + "\n" + "\n" + g_GetTxtStringFormHtml("0x90022509")
                + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000B99C") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OKCANCEL, DT_LEFT);
            if (DF_IDCANCEL == iKey)
                return iRet;

            FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);

            //链路：与参数有关
            iRet = EnterSystem(ptlMode1, binEnterCmd, uAddPara);  // ptlMode1=PTL_CAN_11_500K ； binEnterCmd=\x07\x61\x08\x02\x10\x03\x00\x00\x00\x00\x00
            // uAddPara=0x0769
            if (iRet)
            {
                FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
                return CErrorCode::EC_TIME_OVER;
            }

            rfRet = m_rfRet;
            CBinary binRecive = rfRet.GetFirst();
            if (binRecive.GetByteCount() < 5)
            {
                FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
                return CErrorCode::EC_TIME_OVER;
            }

            m_binRecive = CBinary(binRecive.GetBuffer() + 4, binRecive.GetByteCount() - 4);
            if (checkIs7f(m_binRecive))
            {
                FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"), DF_MB_ANYKEYRETURN, DT_LEFT);//ECU不支持
                return iRet;
            }

            //step8 安全访问
            iRet = SafeLogin_L405_2014_Oil(binSafeCmd, uStandValue, P_table);// 07 61 08 05 27 04 0D 71 C9 00 00
            if (CErrorCode::EC_ECU_REFUSE == iRet)
            {
                FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000B09F"), DF_MB_ANYKEYRETURN, DT_LEFT);//安全访问失败
                return iRet;
            }

            if (iRet < 0)
            {
                FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
                return CErrorCode::EC_TIME_OVER;
            }
            //链路保持
            //m_pNetLayer->KeepLink(1000,CSendFrame(CBinary("\x3E\x80",2)));

        }
        else if (1 == i)
        {
            //step11
            FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B998"), g_GetTxtStringFormHtml("0x0000B99D") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002A16C")
                + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_ANYKEYRETURN, DT_LEFT);//标定完成

            //分动箱现在处于高档范围
            FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B998"), g_GetTxtStringFormHtml("0x90026912") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_ANYKEYRETURN, DT_LEFT);

            // 确保发动机运转
            FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B93D"), g_GetTxtStringFormHtml("0x9001251C"), DF_MB_OK, DT_LEFT);

            //这一常规程序将执行下列任务：    标定离合器.    
            iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B998"), g_GetTxtStringFormHtml("0x0000B99D") + "\n" + "\n" + g_GetTxtStringFormHtml("0x90022509")
                + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000B9A1") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OKCANCEL, DT_LEFT);
            if (DF_IDCANCEL == iKey)
                return iRet;
        }
        else if (2 == i)
        {
            //step14
            FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B998"), g_GetTxtStringFormHtml("0x0000B99D") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002A16C")
                + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_ANYKEYRETURN, DT_LEFT);//标定完成

            //这一常规程序将执行下列任务：    启动范围更改 - 过低    
            iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B998"), g_GetTxtStringFormHtml("0x0000B99D") + "\n" + "\n" + g_GetTxtStringFormHtml("0x90022509")
                + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000B9A2") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OK, DT_LEFT);
            if (DF_IDCANCEL == iKey)
                return iRet;
        }
        else if (3 == i)
        {
            //step17
            FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B998"), g_GetTxtStringFormHtml("0x0000B99D") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002A16C")
                + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_ANYKEYRETURN, DT_LEFT);//标定完成

            FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B998"), g_GetTxtStringFormHtml("0x0000B9A3")
                + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_ANYKEYRETURN, DT_LEFT);//分动箱目前处于低档范围

            // 确保发动机运转
            FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B93D"), g_GetTxtStringFormHtml("0x9001251C"), DF_MB_OK, DT_LEFT);

            //这一常规程序将执行下列任务：    标定离合器.    
            iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B998"), g_GetTxtStringFormHtml("0x0000B99D") + "\n" + "\n" + g_GetTxtStringFormHtml("0x90022509")
                + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000B9A1") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OKCANCEL, DT_LEFT);
            if (DF_IDCANCEL == iKey)
                return iRet;
        }
        else
        {
            //step20
            FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B998"), g_GetTxtStringFormHtml("0x0000B99D") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002A16C")
                + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_ANYKEYRETURN, DT_LEFT);//标定完成

            //这一常规程序将执行下列任务：    启动范围更改 - 过高    
            iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B998"), g_GetTxtStringFormHtml("0x0000B99D") + "\n" + "\n" + g_GetTxtStringFormHtml("0x90022509")
                + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000B9A4") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OK, DT_LEFT);
            if (DF_IDCANCEL == iKey)
                return iRet;
        }


        //step9        step12        step15        step18        step21
        FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);
        sendframe.SetSendFrame(binGroup.GetByteAt(2 * i));
        rfRet = SendDataComm(sendframe);
        m_binRecive = rfRet.GetFirst();

        W_U32 iCmd = 0;
        W_U32 iRes = 0;

        if (0 == m_binRecive.GetByteCount())
        {
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_TIME_OVER;
        }
        if (checkIs7f(m_binRecive))
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"), DF_MB_ANYKEYRETURN, DT_LEFT);//ECU不支持
            return iRet;
        }

        iCmd = ((binGroup.GetByteAt(2 * i))[0] << 24) + ((binGroup.GetByteAt(2 * i))[1] << 16) + ((binGroup.GetByteAt(2 * i))[2] << 8) + (binGroup.GetByteAt(2 * i))[3];
        if (m_binRecive.GetByteCount() > 3)
            iRes = (m_binRecive[0] << 24) + (m_binRecive[1] << 16) + (m_binRecive[2] << 8) + m_binRecive[3];

        if (m_binRecive.GetByteCount() < 4 || iCmd + 0x40000000 != iRes)
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B99D"), g_GetTxtStringFormHtml("0x0000B21F"), DF_MB_ANYKEYRETURN, DT_LEFT);//失败
            Motor_Replacement_00F0003E_L319_Step30(0);
            return iRet;
        }
        if (i == 2)
            Sleep(3000);
        else
            Sleep(2000);


        //step10    step13        step16        step19        step22
        W_U32 uMsStart = GetTickCount();
        W_U32 uMsStop = 0;
        W_U32 uPassMs = 0;
        string strPromot = g_GetTxtStringFormHtml("0x0000B09D");
        string strTTL = g_GetTxtStringFormHtml("0x0000B99D");//分动箱控制模块标定
        while (1)
        {
            uMsStop = GetTickCount();
            uPassMs = uMsStop - uMsStart;

            sendframe.SetSendFrame(binGroup.GetByteAt(2 * i + 1));
            rfRet = SendDataComm(sendframe);
            m_binRecive = rfRet.GetFirst();


            iCmd = ((binGroup.GetByteAt(2 * i + 1))[0] << 24) + ((binGroup.GetByteAt(2 * i + 1))[1] << 16) + ((binGroup.GetByteAt(2 * i + 1))[2] << 8) + (binGroup.GetByteAt(2 * i + 1))[3];
            iRes = 0;
            if (m_binRecive.GetByteCount() > 3)
                iRes = (m_binRecive[0] << 24) + (m_binRecive[1] << 16) + (m_binRecive[2] << 8) + m_binRecive[3];
            if (m_binRecive.GetByteCount() > 4 && iRes == iCmd + 0x40000000 && 2 == (m_binRecive[4] & 0x0F));
            else break;


            if (m_binRecive.GetByteCount() > 4 && !checkIs7f(m_binRecive) && 2 == (m_binRecive[4] & 0x0F));
            else break;


            if (uPassMs > 29999)
            {
                FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B99D"), g_GetTxtStringFormHtml("0x0000B918"), DF_MB_ANYKEYRETURN, DT_LEFT);//因超时而失败
                Motor_Replacement_00F0003E_L319_Step30(0);
                return iRet;
            }
            FxProgressBar(strTTL, strPromot, uPassMs * 100 / 30000);
        }


        if (0 == m_binRecive.GetByteCount())
        {
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_TIME_OVER;
        }

        if (checkIs7f(m_binRecive))
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"), DF_MB_ANYKEYRETURN, DT_LEFT);//ECU不支持
            return iRet;
        }

        if (m_binRecive.GetByteCount() < 4
            || iCmd + 0x40000000 != iRes
            || (m_binRecive.GetByteCount() > 4 && 1 == (m_binRecive[4] & 0x0F)))
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B99D"), g_GetTxtStringFormHtml("0x0000B21F"), DF_MB_ANYKEYRETURN, DT_LEFT);//失败
            Motor_Replacement_00F0003E_L319_Step30(0);
            return iRet;
        }//i == 0 end

        if (1 == i || 3 == i)
        {
            if (4 == m_binRecive.GetByteCount() || 5 == m_binRecive.GetByteCount());
            else if (0 == (m_binRecive[4] & 0x0F));
            else if (5 == m_binRecive[m_binRecive.GetByteCount() - 1])
            {
                FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B99E"), g_GetTxtStringFormHtml("0x0000B9AB"), DF_MB_ANYKEYRETURN, DT_LEFT);//车速或车轮转速无效
                Motor_Replacement_00F0003E_L319_Step30(0);
                return iRet;
            }
            else if (6 == m_binRecive[m_binRecive.GetByteCount() - 1])
            {
                FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B99E"), g_GetTxtStringFormHtml("0x0000B9AC"), DF_MB_ANYKEYRETURN, DT_LEFT);//锁止力矩过大
                Motor_Replacement_00F0003E_L319_Step30(0);
                return iRet;
            }
            else if (7 == m_binRecive[m_binRecive.GetByteCount() - 1])
            {
                FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B99E"), g_GetTxtStringFormHtml("0x0000B9AD"), DF_MB_ANYKEYRETURN, DT_LEFT);//换档启动，或处于空档中
                Motor_Replacement_00F0003E_L319_Step30(0);
                return iRet;
            }
            else if (9 == m_binRecive[m_binRecive.GetByteCount() - 1])
            {
                FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B99E"), g_GetTxtStringFormHtml("0x0000B9AE"), DF_MB_ANYKEYRETURN, DT_LEFT);//代用功能激活
                Motor_Replacement_00F0003E_L319_Step30(0);
                return iRet;
            }
            else if (0x0B == m_binRecive[m_binRecive.GetByteCount() - 1])
            {
                FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B99E"), g_GetTxtStringFormHtml("0x00004BE4"), DF_MB_ANYKEYRETURN, DT_LEFT);//一般故障
                Motor_Replacement_00F0003E_L319_Step30(0);
                return iRet;
            }
            else
            {
                Motor_Replacement_00F0003E_L319_Step30(0);
                return iRet;
            }
        }
        else if (2 == i || 4 == i)
        {
            if (4 == m_binRecive.GetByteCount() || 5 == m_binRecive.GetByteCount());
            else if (0 == (m_binRecive[4] & 0x0F));
            else if (0x0B == m_binRecive[m_binRecive.GetByteCount() - 1])
            {
                FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B99E"), g_GetTxtStringFormHtml("0x00004BE4"), DF_MB_ANYKEYRETURN, DT_LEFT);//一般故障
                Motor_Replacement_00F0003E_L319_Step30(0);
                return iRet;
            }
            else if (0x10 == m_binRecive[m_binRecive.GetByteCount() - 1])
            {
                FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B99E"), g_GetTxtStringFormHtml("0x0000B9B4"), DF_MB_ANYKEYRETURN, DT_LEFT);//范围更改已取消.
                Motor_Replacement_00F0003E_L319_Step30(0);
                return iRet;
            }
            else
            {
                Motor_Replacement_00F0003E_L319_Step30(0);
                return iRet;
            }
        }

        else
        {
            if (m_binRecive.GetByteCount() < 4
                || checkIs7f(m_binRecive)
                || (m_binRecive.GetByteCount() > 4 && 1 == (m_binRecive[4] & 0x0F)))
            {
                FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B99D"), g_GetTxtStringFormHtml("0x0000B21F"), DF_MB_ANYKEYRETURN, DT_LEFT);//失败
                Motor_Replacement_00F0003E_L319_Step30(0);
                return iRet;
            }

            if (!i)
            {
                if (m_binRecive.GetByteCount() > 4 && m_binRecive[4])
                {
                    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B99D"), g_GetTxtStringFormHtml("0x0000B0A3"), DF_MB_ANYKEYRETURN, DT_LEFT);//完成
                    Motor_Replacement_00F0003E_L319_Step30(0);
                    return iRet;
                }
            }
            else if (1 == i)
            {
                if (4 == m_binRecive.GetByteCount());
                else if (0 == m_binRecive[4]);
                else if (5 == m_binRecive[m_binRecive.GetByteCount() - 1])
                {
                    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B99D"), g_GetTxtStringFormHtml("0x0000B0A3"), DF_MB_ANYKEYRETURN, DT_LEFT);//完成
                    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B99E"), g_GetTxtStringFormHtml("0x0000B99F,0x0000B9AB"), DF_MB_ANYKEYRETURN, DT_LEFT);//错误消息.车速或车轮转速无效
                    Motor_Replacement_00F0003E_L319_Step30(3);
                    return iRet;
                }
                else if (6 == m_binRecive[m_binRecive.GetByteCount() - 1])
                {
                    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B99D"), g_GetTxtStringFormHtml("0x0000B0A3"), DF_MB_ANYKEYRETURN, DT_LEFT);//完成
                    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B99E"), g_GetTxtStringFormHtml("0x0000B99F,0x0000B9AC"), DF_MB_ANYKEYRETURN, DT_LEFT);//错误消息.锁止力矩过大
                    Motor_Replacement_00F0003E_L319_Step30(3);
                    return iRet;
                }
                else if (7 == m_binRecive[m_binRecive.GetByteCount() - 1])
                {
                    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B99D"), g_GetTxtStringFormHtml("0x0000B0A3"), DF_MB_ANYKEYRETURN, DT_LEFT);//完成
                    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B99E"), g_GetTxtStringFormHtml("0x0000B99F,0x0000B9AD"), DF_MB_ANYKEYRETURN, DT_LEFT);//错误消息.换档启动，或处于空档中
                    Motor_Replacement_00F0003E_L319_Step30(3);
                    return iRet;
                }
                else if (9 == m_binRecive[m_binRecive.GetByteCount() - 1])
                {
                    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B99D"), g_GetTxtStringFormHtml("0x0000B0A3"), DF_MB_ANYKEYRETURN, DT_LEFT);//完成
                    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B99E"), g_GetTxtStringFormHtml("0x0000B99F,0x0000B9AE"), DF_MB_ANYKEYRETURN, DT_LEFT);//错误消息.代用功能激活
                    Motor_Replacement_00F0003E_L319_Step30(3);
                    return iRet;
                }
                else if (0x0B == m_binRecive[m_binRecive.GetByteCount() - 1])
                {
                    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B99D"), g_GetTxtStringFormHtml("0x0000B0A3"), DF_MB_ANYKEYRETURN, DT_LEFT);//完成
                    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B99E"), g_GetTxtStringFormHtml("0x0000B99F,0x00004BE4"), DF_MB_ANYKEYRETURN, DT_LEFT);//错误消息.一般故障
                    Motor_Replacement_00F0003E_L319_Step30(3);
                    return iRet;
                }
                else
                {
                    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B99D"), g_GetTxtStringFormHtml("0x0000B0A3"), DF_MB_ANYKEYRETURN, DT_LEFT);//完成
                    Motor_Replacement_00F0003E_L319_Step30(0);
                    return iRet;
                }
            }
            else
            {
                if (4 == m_binRecive.GetByteCount());
                else if (0 == m_binRecive[4]);
                else if (0x0B == m_binRecive[m_binRecive.GetByteCount() - 1])
                {
                    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B99D"), g_GetTxtStringFormHtml("0x0000B0A3"), DF_MB_ANYKEYRETURN, DT_LEFT);//完成
                    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B99E"), g_GetTxtStringFormHtml("0x0000B99F,0x00004BE4"), DF_MB_ANYKEYRETURN, DT_LEFT);//错误消息.一般故障
                    Motor_Replacement_00F0003E_L319_Step30(3);
                    return iRet;
                }
                else if (0x10 == m_binRecive[m_binRecive.GetByteCount() - 1])
                {
                    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B99D"), g_GetTxtStringFormHtml("0x0000B0A3"), DF_MB_ANYKEYRETURN, DT_LEFT);//完成
                    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B99E"), g_GetTxtStringFormHtml("0x0000B99F,0x0000B9B4"), DF_MB_ANYKEYRETURN, DT_LEFT);//错误消息.范围更改已取消.
                    Motor_Replacement_00F0003E_L319_Step30(3);
                    return iRet;
                }
                else
                {
                    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B99D"), g_GetTxtStringFormHtml("0x0000B0A3"), DF_MB_ANYKEYRETURN, DT_LEFT);//完成
                    Motor_Replacement_00F0003E_L319_Step30(0);
                    return iRet;
                }
            }
            while (2)
            {
                uMsStop = GetTickCount();
                uPassMs = uMsStop - uMsStart;
                if (uPassMs > 29999)
                    break;
                FxProgressBar(strTTL, strPromot, uPassMs * 100 / 30000);
            }
        }
    }

    //step23

    sendframe.SetSendFrame(CBinary("\x10\x01", 2));
    rfRet = SendDataComm(sendframe);
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B99D"), g_GetTxtStringFormHtml("0x0000B99D") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002A16C")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_ANYKEYRETURN, DT_LEFT);//完成

    m_pNetLayer->KeepLink(0);//链路断开

    //分动箱现在处于高档范围
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B9A0") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_ANYKEYRETURN, DT_LEFT);
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B998"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_ANYKEYRETURN, DT_LEFT);//关闭点火开关

    //起动发动机并选择低档范围.     等待直至显示了低档范围.     一旦显示，即选择高档范围.     等待直至显示了高档范围.        一旦显示，即按下按钮.
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B998"), g_GetTxtStringFormHtml("0x00000069") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000B9A6")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000B9A7") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000B9A8")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000B9A9") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9000153E")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_ANYKEYRETURN, DT_LEFT);

    //为配备自动变速器的车辆选择驻车档，为配备手动变速器的车辆选择空档
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B998"), g_GetTxtStringFormHtml("0x0000BCFD") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900129E4"), DF_MB_ANYKEYRETURN, DT_LEFT);

    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000065"), DF_MB_ANYKEYRETURN, DT_LEFT);//确保关闭了点火开关


    EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x20\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x0728);

    //L322_2010     L494_2014        step24
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00009476"), g_GetTxtStringFormHtml("0x0000B9B0,0x0000B0A3"));//变速器控制模块信息-完成

    //是否安装了手动变速器? 如果配备了的话请选择确定键，否则选择取消键。
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B9B1") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002A1F5"), DF_MB_OKCANCEL, DT_LEFT);

    if (DF_IDOK == iKey)
    {
        //step25
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x90009E9C"));//确保打开了点火开关

        EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x61\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x0769);
        SendDataComm(CBinary("\x22\xf1\x03", 3));
        sendframe.SetSendFrame(CBinary("\x10\x03", 2));
        rfRet = SendDataComm(sendframe);
        if (0 == rfRet.GetByteCount())
        {
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
            return iRet;
        }

        m_binRecive = rfRet.GetFirst();
        if (checkIs7f(m_binRecive))
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"), DF_MB_ANYKEYRETURN, DT_LEFT);//ECU不支持    
            return iRet;
        }
        iRet = SafeLogin_L405_2014_Oil(CBinary("\x27\x01", 2), uStandValue, P_table); // 07 61 08 05 27 02 0D 71 C9 00 00
        if (CErrorCode::EC_ECU_REFUSE == iRet)
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000B09F"), DF_MB_ANYKEYRETURN, DT_LEFT);//安全访问失败
            return iRet;
        }
        m_pNetLayer->KeepLink(1000, CSendFrame(CBinary("\x3E\x00", 2)));//链路保持

        //step26
        for (int i = 0; i < 2; i++)
        {
            if (i == 0)
                sendframe.SetSendFrame(CBinary("\x2E\xD1\x29\x00", 4));
            else
                sendframe.SetSendFrame(CBinary("\x2E\xD1\x2A\x00", 4));
            SendDataComm(sendframe);
            m_binRecive = rfRet.GetFirst();
            if (m_binRecive.GetByteCount() == 3)
            {
                FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B0AC"), DF_MB_ANYKEYRETURN, DF_MB_ANYKEYRETURN);//测试失败
                FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_ANYKEYRETURN, DT_LEFT);//关闭点火开关
                //程序未能完成.        必须调查该问题.
                FxShowMessageBox(g_GetTxtStringFormHtml("0x00000069"), g_GetTxtStringFormHtml("0x0000006A,0x0000B105"), DF_MB_ANYKEYRETURN, DT_LEFT);
                return iRet;
            }
        }
        SendDataComm(CBinary("\x10\x01", 2));
        m_pNetLayer->KeepLink(0);//断开链路

        // 分动箱控制模块标定 下述操作将对XY传感器进行标定 完成
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B998"), g_GetTxtStringFormHtml("0x0000B99D,0x0000B9B2,0x0000B0A3"));

        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_ANYKEYRETURN, DT_LEFT);//关闭点火开关
    }

    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B99D") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002A16C")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_ANYKEYRETURN, DT_LEFT);//分动箱控制模块标定成功




    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B9A5"), DF_MB_ANYKEYRETURN, DT_LEFT);//分动箱控制模块标定成功



    iRet = ClearAllFaultCodes1(PTL_CAN_11_500K, CBinary("\x07\x61\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x0768, g_GetTxtStringFormHtml("0x0000B998"), 0x07E8);


    // 现在需要学习下述档位循环
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B998"), g_GetTxtStringFormHtml("0x90025FAA") + "\n" + "\n" + g_GetTxtStringFormHtml("0x90026079")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000B9BA") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000B9BB") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OK, DT_LEFT);


    return iRet;

}



// 绝对位置传感器更换
W_ErrorCode CSeviceFunctionNew::APS_Replacement_NEW_lansheng_L494_2016()
{
    W_ErrorCode iRet = CErrorCode::EC_SUCCESS;
    CSendFrame sendframe;
    CReceiveFrame rfRet;
    W_I16 iKey = 0;
    W_U32 uStandValue = 0x4C1F84;
    W_I32 P_table[3][8] = { {0x8565D6,0xDBC931,0x63A3EF,0x175452,0xFEBB39,0x2946EF,0x839E53,0xD30D2B},
    {0x732ACA,0x327408,0xB4FA9D,0xBCC4A7,0xA98BD2,0x862729,0xDC4CDF,0x6CA822},
    {0x0D71C9,0xCBF01F,0x46E2B2,0x5DD7F8,0x6BBC7C,0x035865,0xD39146,0x762110} };

    //Step1~5
    iRet = CheckEngineStop(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xF4\x0C\x00\x00\x00\x00", 11), 0x07E8, CBinary("\x01\x00", 2));
    if (iRet)
        return iRet;

    // 为配备自动变速器的车辆选择驻车档，为配备手动变速器的车辆选择空档.
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000BCFD") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900129E4"), DF_MB_OK, DT_LEFT);
    if (DF_IDCANCEL == iKey)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B8D1"), DF_MB_ANYKEYRETURN, DT_LEFT);//操作人员已中止了此应用程序
        return iRet;
    }

    //step7
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x90009E9C"), DF_MB_ANYKEYRETURN, DT_LEFT);//将点火开关打开

    //请执行下列步骤：    确保选择空档，且驻车制动器已拉上.    确定点火开关打开，且发动机没有运转.
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B998"), g_GetTxtStringFormHtml("0x00000069") + "\n" + "\n" + g_GetTxtStringFormHtml("0x00000069")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000B257") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000B99B")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x900191DF") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_ANYKEYRETURN, DT_LEFT);

    EnterSystem(PTL_CAN_11_500K, CBinary("\x07\xDF\x08\x02\x01\x00\x00\x00\x00\x00\x00", 11), 0x07E7);


    //这一常规程序将执行下列任务：    标定范围更改.
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B998"), g_GetTxtStringFormHtml("0x0000B99D") + "\n" + "\n" + g_GetTxtStringFormHtml("0x90022509")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000B99C") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OKCANCEL, DT_LEFT);
    if (DF_IDCANCEL == iKey)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B8D1"), DF_MB_ANYKEYRETURN, DT_LEFT);//操作人员已中止了此应用程序
        return iRet;
    }

    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);
    Sleep(500);

    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x61\x08\x02\x10\x03\x00\x00\x00\x00\x00", 11), 0x0769);
    if (iRet)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    rfRet = m_rfRet;
    CBinary binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount() < 5)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    m_binRecive = CBinary(binRecive.GetBuffer() + 4, binRecive.GetByteCount() - 4);
    if (checkIs7f(m_binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"), DF_MB_ANYKEYRETURN, DT_LEFT);//ECU不支持
        return iRet;
    }

    //step9 安全访问
    string strOpenFile = m_stropenfileConfigMenu;
    CJLRStringOperate strOpt;
    strOpt.Replace(strOpenFile, ".ctv", "");
    CBinary binSafe = CBinary("\x27\x03", 2);

    iRet = SafeLogin_L405_2014_Oil(binSafe, uStandValue, P_table);
    if (CErrorCode::EC_ECU_REFUSE == iRet)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000B09F"), DF_MB_ANYKEYRETURN, DT_LEFT);//ECU不支持
        return iRet;
    }
    if (iRet < 0)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }
    //链路保持
    if (m_stropenfileConfigMenu == "module_special_L494_2016.ctv")
        m_pNetLayer->KeepLink(1000, CSendFrame(CBinary("\x3E\x80", 2)));
    else
        m_pNetLayer->KeepLink(1000, CSendFrame(CBinary("\x3E\x00", 2)));

    //step9
    sendframe.SetSendFrame(CBinary("\x31\x01\x40\x22", 4));
    rfRet = SendDataComm(sendframe);
    if (0 == rfRet.GetByteCount())
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    m_binRecive = rfRet.GetFirst();
    if (checkIs7f(m_binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"), DF_MB_ANYKEYRETURN, DT_LEFT);//ECU不支持
        return iRet;
    }

    if (m_binRecive.GetByteCount() < 4 || m_binRecive[0] != 0x71 || m_binRecive[1] != 1 || m_binRecive[2] != 0x40 || m_binRecive[3] != 0x22)
    {
        Motor_Replacement_00F0003E_L319_Step30(0);
        return iRet;
    }
    PleaseWait_xS(3000);

    //step10
    W_U32 uMsStart = GetTickCount();
    W_U32 uMsStop = 0;
    W_U32 uPassMs = 0;
    string strTTL = g_GetTxtStringFormHtml("0x0000B99D");
    string strPromot = g_GetTxtStringFormHtml("0x0000B09D");
    while (1)
    {
        sendframe.SetSendFrame(CBinary("\x31\x03\x40\x22", 4));
        rfRet = SendDataComm(sendframe);
        m_binRecive = rfRet.GetFirst();

        if (m_binRecive.GetByteCount() > 4
            && 0x71 == m_binRecive[0]
            && 0x03 == m_binRecive[1]
            && 0x40 == m_binRecive[2]
            && 0x22 == m_binRecive[3]
            && 2 == (m_binRecive[4] & 0x0F))
            ;
        else
            break;
        uMsStop = GetTickCount();
        uPassMs = uMsStop - uMsStart;
        if (uPassMs > 29999)
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B918"), DF_MB_ANYKEYRETURN, DT_LEFT);//因超时而失败.
            Motor_Replacement_00F0003E_L319_Step30(0);
            return iRet;
        }
        FxProgressBar(strTTL, strPromot, uPassMs * 100 / 30000);
    }

    if (0 == m_binRecive.GetByteCount())
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }
    else if (checkIs7f(m_binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"), DF_MB_ANYKEYRETURN, DT_LEFT);//ECU不支持
        return iRet;
    }
    else if (m_binRecive.GetByteCount() < 4
        || m_binRecive[0] != 0x71
        || m_binRecive[1] != 0x03
        || m_binRecive[2] != 0x40
        || m_binRecive[3] != 0x22
        || (m_binRecive.GetByteCount() > 4 && (m_binRecive[4] & 0x0F)))
    {
        Motor_Replacement_00F0003E_L319_Step30(0);
        return iRet;
    }
    FxProgressBar(strTTL, strPromot, 100);
    Sleep(200);
    m_pNetLayer->KeepLink(0); // 断开链路

    //step11
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B99D") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002A16C")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_ANYKEYRETURN, DT_LEFT);//标定完成

//分动箱现在处于高档范围
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90026912") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_ANYKEYRETURN, DT_LEFT);

    //这一常规程序将执行下列任务：    启动范围更改 - 过低
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B99D"), g_GetTxtStringFormHtml("0x0000B99D") + "\n" + "\n" + g_GetTxtStringFormHtml("0x90022509")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000B9A2") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330 "), DF_MB_OKCANCEL, DT_LEFT);
    if (DF_IDCANCEL == iKey)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B8D1"), DF_MB_ANYKEYRETURN, DT_LEFT);//操作人员已中止了此应用程序
        return iRet;
    }

    //step12
    sendframe.SetSendFrame(CBinary("\x31\x01\x40\x20\x02", 5));
    rfRet = SendDataComm(sendframe);
    if (0 == rfRet.GetByteCount())
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    m_binRecive = rfRet.GetFirst();
    if (checkIs7f(m_binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"), DF_MB_ANYKEYRETURN, DT_LEFT);//ECU不支持
        return iRet;
    }

    if (m_binRecive.GetByteCount() < 4 || m_binRecive[0] != 0x71 || m_binRecive[1] != 1 || m_binRecive[2] != 0x40 || m_binRecive[3] != 0x20)
    {
        Motor_Replacement_00F0003E_L319_Step30(0);
        return iRet;
    }
    PleaseWait_xS(3000);

    //step13
    sendframe.SetSendFrame(CBinary("\x31\x03\x40\x20", 4));
    rfRet = SendDataComm(sendframe);
    if (0 == rfRet.GetByteCount())
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    m_binRecive = rfRet.GetFirst();
    if (checkIs7f(m_binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"), DF_MB_ANYKEYRETURN, DT_LEFT);//ECU不支持
        return iRet;
    }
    else if (m_binRecive.GetByteCount() < 4 || m_binRecive[0] != 0x71 || m_binRecive[1] != 3 || m_binRecive[2] != 0x40 || m_binRecive[3] != 0x20)
    {
        Motor_Replacement_00F0003E_L319_Step30(0);
        return iRet;
    }
    else if (m_binRecive.GetByteCount() < 6 || 0 == (m_binRecive[4] & 0x0F))
        ;
    else if (0x0B == m_binRecive[m_binRecive.GetByteCount() - 1])
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B99E"), g_GetTxtStringFormHtml("0x00004BE4"), DF_MB_ANYKEYRETURN, DT_LEFT);//一般故障
        Motor_Replacement_00F0003E_L319_Step30(0);
        return iRet;
    }
    else if (0x10 == m_binRecive[m_binRecive.GetByteCount() - 1])
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B99E"), g_GetTxtStringFormHtml("0x0000B9B4"), DF_MB_ANYKEYRETURN, DT_LEFT);//范围更改已取消
        Motor_Replacement_00F0003E_L319_Step30(0);
        return iRet;
    }
    else
    {
        Motor_Replacement_00F0003E_L319_Step30(0);
        return iRet;
    }

    //step14
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B99D") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002A16C")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_ANYKEYRETURN, DT_LEFT);//标定完成

    //分动箱目前处于低档范围
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B9A3") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_ANYKEYRETURN, DT_LEFT);

    //这一常规程序将执行下列任务：    启动范围更改 - 过高.
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B99D"), g_GetTxtStringFormHtml("0x0000B99D") + "\n" + "\n" + g_GetTxtStringFormHtml("0x90022509")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000B9A4") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OKCANCEL, DT_LEFT);
    if (DF_IDCANCEL == iKey)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B8D1"), DF_MB_ANYKEYRETURN, DT_LEFT);//操作人员已中止了此应用程序
        return iRet;
    }

    //step15
    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);
    sendframe.SetSendFrame(CBinary("\x31\x01\x40\x20\x01", 5));
    rfRet = SendDataComm(sendframe);
    if (0 == rfRet.GetByteCount())
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    m_binRecive = rfRet.GetFirst();
    if (checkIs7f(m_binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"), DF_MB_ANYKEYRETURN, DT_LEFT);//ECU不支持
        return iRet;
    }

    if (m_binRecive.GetByteCount() < 4 || m_binRecive[0] != 0x71 || m_binRecive[1] != 1 || m_binRecive[2] != 0x40 || m_binRecive[3] != 0x20)
    {
        Motor_Replacement_00F0003E_L319_Step30(0);
        return iRet;
    }
    PleaseWait_xS(3000);

    //step16
    sendframe.SetSendFrame(CBinary("\x31\x03\x40\x20", 4));
    rfRet = SendDataComm(sendframe);
    if (0 == rfRet.GetByteCount())
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    m_binRecive = rfRet.GetFirst();
    if (checkIs7f(m_binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"), DF_MB_ANYKEYRETURN, DT_LEFT);//ECU不支持
        return iRet;
    }
    else if (m_binRecive.GetByteCount() < 4
        || m_binRecive[0] != 0x71
        || m_binRecive[1] != 0x03
        || m_binRecive[2] != 0x40
        || m_binRecive[3] != 0x20
        || (m_binRecive.GetByteCount() > 4 && 1 == (m_binRecive[4] & 0x0F)))
    {
        Motor_Replacement_00F0003E_L319_Step30(0);
        return iRet;
    }
    else if (4 == m_binRecive.GetByteCount() || 0 == (m_binRecive[4] & 0x0F))
        ;
    else if (0x0B == m_binRecive[m_binRecive.GetByteCount() - 1])
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B99E"), g_GetTxtStringFormHtml("0x00004BE4"), DF_MB_ANYKEYRETURN, DT_LEFT);//一般故障
        Motor_Replacement_00F0003E_L319_Step30(0);
        return iRet;
    }
    else if (0x10 == m_binRecive[m_binRecive.GetByteCount() - 1])
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B99E"), g_GetTxtStringFormHtml("0x0000B9B4"), DF_MB_ANYKEYRETURN, DT_LEFT);//范围更改已取消
        Motor_Replacement_00F0003E_L319_Step30(0);
        return iRet;
    }
    else
    {
        Motor_Replacement_00F0003E_L319_Step30(0);
        return iRet;
    }

    //step17
    sendframe.SetSendFrame(CBinary("\x10\x01", 2));
    rfRet = SendDataComm(sendframe);
    m_pNetLayer->KeepLink(0); // 断开链路

    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B99D") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002A16C")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_ANYKEYRETURN, DT_LEFT);//标定完成

    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90026912") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_ANYKEYRETURN, DT_LEFT);

    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_ANYKEYRETURN, DT_LEFT);//关闭点火开关

    //为配备自动变速器的车辆选择驻车档，为配备手动变速器的车辆选择空档
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000BCFD") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900129E4"), DF_MB_ANYKEYRETURN, DT_LEFT);

    //step11~
    iRet = ClearAllFaultCodes1(PTL_CAN_11_500K, CBinary("\x07\x61\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x0768, g_GetTxtStringFormHtml("0x9000032B"), 0x07E8);

    //绝对位置传感器更换。 电磁阀更换设置完成，故障诊断码已记录。
    FxShowMessageBox(g_GetTxtStringFormHtml("0x9000032B"), g_GetTxtStringFormHtml("0x90026779"), DF_MB_ANYKEYRETURN, DT_LEFT);

    return iRet;



}



// 分动箱更换
W_ErrorCode CSeviceFunctionNew::Box_Replacement_NEW_lansheng_L494_2016()
{
    W_ErrorCode iRet = CErrorCode::EC_SUCCESS;

    Motor_replacement_NEW_lansheng_L494_2016(2);
    return iRet;
}


// 燃油含水检测复位
W_ErrorCode CSeviceFunctionNew::Reset_water_NEW_lansheng_L494_2016()
{
    W_ErrorCode iRet = 0;
    W_I16 iKey = 0;

    CSendFrame sendframe;
    CReceiveFrame rfRet;
    CBinary binRecive;

    //step01 需要执行本程序以重置里程和距离值，这与监控燃油中的水份有关
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B927"), g_GetTxtStringFormHtml("0x0000B928") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000B929")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BBAB"), DF_MB_OKCANCEL, DT_LEFT);
    if (iKey == DF_IDCANCEL)
        return iRet;

    //step02 点火打开、发动机、电压、点火关闭
    iRet = CheckEngineStop(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xF4\x0C\x00\x00\x00\x00", 11), 0x07E8, CBinary("\x01\x00", 2));
    if (iRet != 0)
        return 0;

    //step03 点火打开
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"));

    //step04 燃油含水检测复位
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B927"), g_GetTxtStringFormHtml("0x0000B927")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OKCANCEL, DT_LEFT);
    if (iKey == DF_IDCANCEL)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B8D1"));
        return iRet;
    }

    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通信中
    Sleep(800);

    EnterSystem(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x07E8);
    SendDataComm(CBinary("\x22\xF1\x03", 3));
    sendframe.SetSendFrame(CBinary("\x10\x01", 2));
    rfRet = SendDataComm(sendframe);

    binRecive = rfRet.GetFirst();
    if (checkIs7f(binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));
        return CErrorCode::EC_ECU_REFUSE;
    }

    sendframe.SetSendFrame(CBinary("\x31\x01\x40\x64", 4));  // 07 E0 08 04 31 01 40 64 00 00 00
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount() < 4 || binRecive[0] != 0x71 || binRecive[1] != 0x01 || binRecive[2] != 0x40 || binRecive[3] != 0x64)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00007C34"), g_GetTxtStringFormHtml("0x0000B21F"));
        return CErrorCode::EC_TIME_OVER;
    }

    PleaseWait_xS_haveTTL(8000, g_GetTxtStringFormHtml("0x0000B09D"), g_GetTxtStringFormHtml("0x0000B927"));//燃油含水检测复位-请等待
    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通信中
    Sleep(800);

    //step05 燃油含水检测复位 - 完成
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B927"), g_GetTxtStringFormHtml("0x9002A16C") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OK, DT_LEFT);

    //step06 点火关闭
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));

    //step07 故障码
    iRet = ClearSysDTC_Programme_538(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x07E8);

    return iRet;
}


// 节气门执行机构
W_ErrorCode CSeviceFunctionNew::ThrottleValueActuator_NEW_lansheng_L494_2016()
{
    W_ErrorCode iRet = 0;
    W_I16 iKey = 0;
    string strTemp = "";
    CSendFrame sendframe;
    CReceiveFrame rfRet;
    CBinary bReceiveData;

    // 节流阀致动器更换
    iRet = FxShowMessageBox(g_GetTxtStringFormHtml("0x00000048"), g_GetTxtStringFormHtml("0x0000008A") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000B1E4")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BBAB"), DF_MB_OKCANCEL, DT_LEFT);
    if (iRet == DF_IDCANCEL)
    {
        return CErrorCode::EC_TIME_OVER;
    }

    // 判断电压
    iRet = CheckEngineStop(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xF4\x0C\x00\x00\x00\x00", 11), 0x07E8, CBinary("\x01\x00", 2));
    if (iRet != 0)
    {
        return 0;
    }

    // 启动发动机并怠速运转
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000048"), g_GetTxtStringFormHtml("0x00000056"), DF_MB_OK, DT_LEFT);

    // 本程序将重新初始化节气门执行机构的适应值
    iRet = FxShowMessageBox(g_GetTxtStringFormHtml("0x00000048"), g_GetTxtStringFormHtml("0x0000B2FB") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4")
        , DF_MB_OKCANCEL, DT_LEFT);
    if (iRet == DF_IDCANCEL)
    {
        return CErrorCode::EC_TIME_OVER;
    }


    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通信中
    Sleep(800);
    EnterSystem(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x07E8);
    SendDataComm(CBinary("\x22\xf1\x03", 3));
    sendframe.SetSendFrame(CBinary("\x10\x01", 2));
    rfRet = SendDataComm(sendframe);

    sendframe.SetSendFrame(CBinary("\x31\x01\x40\x30", 4));//31 01 40 30
    rfRet = SendDataComm(sendframe);
    bReceiveData = rfRet.GetFirst();
    if (bReceiveData.GetByteCount() == 0)
    {
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        FxShowMessageBox(FxGetStdString(STD_INFO_COMMUNICATION_STATUS), FxGetStdString(STD_INFO_NO_COMMUNICATION_SYS), DF_MB_BACK, DT_LEFT);//测试仪与控制单元之间无法通信
        return CErrorCode::EC_TIME_OVER;
    }
    else if (bReceiveData.GetByteCount() < 0x04 || bReceiveData.GetByteAt(1) != 0x01 || bReceiveData.GetByteAt(2) != 0x40 || bReceiveData.GetByteAt(3) != 0x30)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000048"), g_GetTxtStringFormHtml("0x0000B21F"), DF_MB_OK, DT_LEFT);//节气门执行机构// 0x00000048
        return CErrorCode::EC_TIME_OVER;
    }

    // 请等待
    PleaseWait_xS_haveTTL(5000, g_GetTxtStringFormHtml("0x0000B11C"), g_GetTxtStringFormHtml("0x00000048"));
    // 完成
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000048"), g_GetTxtStringFormHtml("0x0000B0A1") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4")
        , DF_MB_OK, DT_LEFT);

    // 故障码
    if (m_stropenfileConfigMenu == "module_special_X351_2016.ctv")
    {
        //step 7
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_ANYKEYRETURN, DT_LEFT);//关闭点火开关（位置 0）
        //step 8
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"));//将点火开关打开（位置 2）.
        EnterSystem(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x07E8);
        m_pNetLayer->KeepLink(1000, CSendFrame(CBinary("\x3E\x80", 2)));//链路保持
        //step 11
        sendframe.SetSendFrame(CBinary("\x19\x02\x0c", 3));
        rfRet = SendDataComm(sendframe);
        m_pNetLayer->KeepLink(0);//断开链路
        PleaseWait_xS(5000);
        iRet = ClearAllFaultCodes(PTL_CAN_11_500K, PTL_CAN_11_125K, g_GetTxtStringFormHtml("0x00000048"), 0x07E8);
    }
    else
        iRet = CheckSysDTCNub(PTL_CAN_11_500K, PTL_CAN_11_125K, CBinary("\x07\xE0\x08\x03\x19\x02\x0C\x00\x00\x00\x00", 11), CBinary("\x07\xDF\x08\x04\x14\xFF\xFF\xFF\x00\x00\x00", 11), 0x07E8);
    return iRet;

}

// 涡轮切断阀
W_ErrorCode CSeviceFunctionNew::Boost_pres_NEW_lansheng_L494_2016()
{
    W_ErrorCode IRet;
    W_I16 ikey = 0;

    CSendFrame sendframe;
    CReceiveFrame RFet;
    CBinary bin;

    // 当更换辅助涡轮增压器后，需要执行此常规程序
    ikey = FxShowMessageBox(g_GetTxtStringFormHtml("0x90001806"), g_GetTxtStringFormHtml("0x90027F9E") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BBAB"), DF_MB_OKCANCEL, DT_LEFT);
    if (ikey == DF_IDCANCEL)
    {
        return IRet;
    }

    IRet = CheckEngineStop(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xF4\x0C\x00\x00\x00\x00", 11), 0x07E8, CBinary("\x01\x00", 2));
    if (IRet != 0)
    {
        return 0;
    }

    // 启动发动机并怠速运转。
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B93D"), g_GetTxtStringFormHtml("0x90008651"), DF_MB_OK, DT_LEFT);

    // 本常规程序将为涡轮切断阀获取补偿值。
    ikey = FxShowMessageBox(g_GetTxtStringFormHtml("0x90001806"), g_GetTxtStringFormHtml("0x90027F9D") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330")
        , DF_MB_OKCANCEL, DT_LEFT);
    if (ikey == DF_IDCANCEL)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B8D1"));
        return IRet;
    }

    // 请等待
    PleaseWait_xS_haveTTL(5000, g_GetTxtStringFormHtml("0x900234AE"), g_GetTxtStringFormHtml("0x90001806"));

    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通信中
    Sleep(800);

    EnterSystem(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x07E8);
    SendDataComm(CBinary("\x22\xF1\x03", 3));
    sendframe.SetSendFrame(CBinary("\x10\x01", 2));
    RFet = SendDataComm(sendframe);

    bin = RFet.GetFirst();
    if (checkIs7f(bin))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));
        return CErrorCode::EC_ECU_REFUSE;
    }

    sendframe.SetSendFrame(CBinary("\x31\x01\x40\x50\x02", 5));
    RFet = SendDataComm(sendframe);
    bin = RFet.GetFirst();
    if (bin.GetByteCount() < 5 || bin[0] != 0x71 || bin[1] != 0x01 || bin[2] != 0x40 || bin[3] != 0x50 || bin[4] != 0x02)  // 07 E8 08 05 71 01 40 50 02 00 00
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00007C34"), g_GetTxtStringFormHtml("0x0000B21F"));
        return CErrorCode::EC_TIME_OVER;
    }

    // 完成
    FxShowMessageBox(g_GetTxtStringFormHtml("0x9002B07D"), g_GetTxtStringFormHtml("0x9002A16C") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330")
        , DF_MB_OK, DT_LEFT);

    // 关闭发动机
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B93D"), g_GetTxtStringFormHtml("0x90018928"), DF_MB_OK, DT_LEFT);

    IRet = ClearSysDTC_Programme_538(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x07E8);
    return IRet;

}



// 废气再循环阀
W_ErrorCode CSeviceFunctionNew::EGR_NEW_lansheng_L494_2016()
{
    W_ErrorCode iRet = CErrorCode::EC_SUCCESS;
    W_I16 iKey = 0;
    W_I16 Mykey = 0;
    CSendFrame sendframe;
    CReceiveFrame rfRet;
    CMenuCtrl  menu;
    CBinary bin;
    CBinary binRecive;
    string strs, strf;

    // 如要更换废气再循环阀，则需要此例行程序
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x90002159"), g_GetTxtStringFormHtml("0x90027125") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BBAB"), DF_MB_OKCANCEL, DT_LEFT);
    if (DF_IDCANCEL == iKey)
        return iRet;

    // 判断电压
    iRet = CheckEngineStop(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xF4\x0C\x00\x00\x00\x00", 11), 0x07E8, CBinary("\xFF\x10", 2));
    if (iRet)
        return iRet;

    menu.InitCtrl(g_GetTxtStringFormHtml("0x90022864")); // 选择下列选项
    menu.AddOneItem(g_GetTxtStringFormHtml("0x9002D163")); // 废气再循环阀执行器（第 1 列气缸组）
    menu.AddOneItem(g_GetTxtStringFormHtml("0x9002D164")); // 废气再循环阀执行器（第 2 列气缸组）
    menu.AddOneItem(g_GetTxtStringFormHtml("0x9001DEBF"));  // 所有两个

    class EGROne
    {
    public:
        CBinary bincmd;
        string strstart, strfinish;
    };

    class EGRTwo :public EGROne
    {
    public:

    };

    class EGRAll :public EGROne
    {
    public:

    };
    EGROne one;
    EGRTwo two;
    EGRAll all;

    while (1)
    {
        Mykey = menu.ShowCtrl();
        if (Mykey == -1)
        {
            return iRet;
        }

        if (Mykey == 0)  // 废气再循环阀执行器（第 1 列气缸组）
        {
            bin = CBinary("\x31\x01\x40\x51\x01", 5);
            strs = g_GetTxtStringFormHtml("0x90027F8C") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"); //本程序将重新初始化废气再循环阀的适应值  -  气缸组 1  ，按下确定继续
            strf = g_GetTxtStringFormHtml("0x9000128B") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4");  //完成
            break;
        }
        else if (Mykey == 1)  // 废气再循环阀执行器（第 2 列气缸组）
        {
            bin = CBinary("\x31\x01\x04\x06\x0C", 5);
            strs = g_GetTxtStringFormHtml("0x90027126") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4");  // 此例行程序将清除所有的自适应值
            strf = g_GetTxtStringFormHtml("0x90027126") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9000128B") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4");  // 完成
            break;
        }
        else
        {
            one.bincmd = CBinary("\x31\x01\x40\x51\x01", 5);
            two.bincmd = CBinary("\x31\x01\x04\x06\x0C", 5);
            one.strstart = g_GetTxtStringFormHtml("0x90027F8C") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4");
            two.strstart = g_GetTxtStringFormHtml("0x90027126") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4");
            one.strfinish = g_GetTxtStringFormHtml("0x9000128B") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4");
            two.strfinish = g_GetTxtStringFormHtml("0x90027126") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9000128B") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4");
            break;
        }
    }



    //step 7
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"));//打开了点火开关。


    if (Mykey == 2)
    {
        iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x90002159"), one.strstart, DF_MB_OKCANCEL, DT_LEFT);
        if (DF_IDCANCEL == iKey)
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B8D1"), DF_MB_ANYKEYRETURN, DT_LEFT);//操作人员已中止了此应用程序
            return iRet;
        }
    }
    else
    {
        iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x90002159"), strs, DF_MB_OKCANCEL, DT_LEFT);
        if (DF_IDCANCEL == iKey)
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B8D1"), DF_MB_ANYKEYRETURN, DT_LEFT);//操作人员已中止了此应用程序
            return iRet;
        }
    }



    //链路：11位can500k
    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通信中
    Sleep(500);

    EnterSystem(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x07E8);
    SendDataComm(CBinary("\x22\xF1\x03", 3));
    sendframe.SetSendFrame(CBinary("\x10\x01", 2));
    rfRet = SendDataComm(sendframe);
    if (iRet < 0)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount() < 2)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_DATA;
    }
    m_binRecive = CBinary(binRecive.GetBuffer() + 4, binRecive.GetByteCount() - 4);
    if (checkIs7f(m_binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"), DF_MB_ANYKEYRETURN, DT_LEFT);//ECU不支持    
        return CErrorCode::EC_ECU_REFUSE;
    }


    if (Mykey == 2)
    {
        sendframe.SetSendFrame(one.bincmd);
        rfRet = SendDataComm(sendframe);
        if (0 == rfRet.GetByteCount())
        {
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_TIME_OVER;
        }

        binRecive = rfRet.GetFirst();
        if (binRecive.GetByteCount() != 5 || binRecive[0] != 0x71 || binRecive[1] != 0x01)
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00000049"), g_GetTxtStringFormHtml("0x0000B0AC"), DF_MB_ANYKEYRETURN, DT_LEFT);//测试失败
            return CErrorCode::EC_DATA;
        }

        // one完成
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000049"), one.strfinish, DF_MB_OK, DT_LEFT);//完成

        iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x90002159"), two.strstart, DF_MB_OKCANCEL, DT_LEFT); // 此例行程序将清除EGR自适应值
        if (DF_IDCANCEL == iKey)
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B8D1"), DF_MB_ANYKEYRETURN, DT_LEFT);//操作人员已中止了此应用程序
            return iRet;
        }

        FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通信中
        Sleep(500);

        EnterSystem(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x07E8);
        SendDataComm(CBinary("\x22\xF1\x03", 3));
        sendframe.SetSendFrame(CBinary("\x10\x03", 2));
        rfRet = SendDataComm(sendframe);
        if (iRet < 0)
        {
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_TIME_OVER;
        }

        rfRet = m_rfRet;
        CBinary binRecive = rfRet.GetFirst();
        if (binRecive.GetByteCount() < 5)
        {
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_DATA;
        }

        if (checkIs7f(binRecive))
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"), DF_MB_ANYKEYRETURN, DT_LEFT);//ECU不支持    
            return CErrorCode::EC_ECU_REFUSE;
        }
    }



    //安全访问
    if (Mykey == 1 || Mykey == 2)
    {
        //安全访问
        iRet = SafeLogin_Standard3(CBinary("\x27\x03", 2), 0xA1F45E);
        if (iRet == CErrorCode::EC_ECU_REFUSE)//否定应答
        {
            FxShowMessageBox(FxGetStdString(STD_TTL_MSG_INFORMATION), g_GetTxtStringFormHtml("0x0000B09F"), DF_MB_BACK);//安全访问失败
            return CErrorCode::EC_ECU_REFUSE;
        }
        else if (iRet < 0)
        {
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_TIME_OVER;
        }
        m_pNetLayer->KeepLink(0);//断开链路
    }

    if (Mykey == 2)
    {
        sendframe.SetSendFrame(two.bincmd);    // 07 E0 08 05 31 01 04 06 0C 00 00
        rfRet = SendDataComm(sendframe);
        if (0 == rfRet.GetByteCount())
        {
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_TIME_OVER;
        }

        binRecive = rfRet.GetFirst();
        if (binRecive.GetByteCount() != 5 || binRecive[0] != 0x71 || binRecive[1] != 0x01)
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00000049"), g_GetTxtStringFormHtml("0x0000B0AC"), DF_MB_ANYKEYRETURN, DT_LEFT);//测试失败
            return CErrorCode::EC_DATA;
        }
    }


    if (Mykey != 2)
    {
        sendframe.SetSendFrame(bin);
        rfRet = SendDataComm(sendframe);
        if (0 == rfRet.GetByteCount())
        {
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_TIME_OVER;
        }

        binRecive = rfRet.GetFirst();
        if (binRecive.GetByteCount() != 5 || binRecive[0] != 0x71 || binRecive[1] != 0x01)
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00000049"), g_GetTxtStringFormHtml("0x0000B0AC"), DF_MB_ANYKEYRETURN, DT_LEFT);//测试失败
            return CErrorCode::EC_DATA;
        }
    }


    PleaseWait_xS_haveTTL(5000, g_GetTxtStringFormHtml("0x0000B09D"), g_GetTxtStringFormHtml("0x00000049"));//请等待

    if (Mykey == 2)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000049"), two.strfinish, DF_MB_OK, DT_LEFT);//完成
    }
    else
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000049"), strf, DF_MB_OK, DT_LEFT);//完成
    }

    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x90008087"), DF_MB_ANYKEYRETURN, DT_LEFT);//关闭点火开关


    iRet = ClearSysDTC_Programme_538(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x07E8);
    return iRet;

}



// 氧传感器
W_ErrorCode CSeviceFunctionNew::HO2_NEW_lansheng_L494_2016()
{
    W_ErrorCode iRet = 0;
    W_I16 iKey = 0;

    CSendFrame sendframe;
    CReceiveFrame rfRet;
    CBinary binRecive;

    //step01 本程序将为备换的氧传感器获取补偿值
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B945"), g_GetTxtStringFormHtml("0x0000BBF4") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BBAB"), DF_MB_OKCANCEL, DT_LEFT);
    if (iKey == DF_IDCANCEL)
    {
        return iRet;
    }

    //step02 点火打开、发动机、电压、点火关闭
    iRet = CheckEngineStop(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xF4\x0C\x00\x00\x00\x00", 11), 0x07E8, CBinary("\x01\x00", 2));
    if (iRet != 0)
        return 0;

    //step03 点火打开
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"));

    //step04 本程序将为氧传感器获取补偿值
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B945"), g_GetTxtStringFormHtml("0x0000BBF5") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OKCANCEL, DT_LEFT);
    if (iKey == DF_IDCANCEL)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B8D1"));//操作人员已中止了此应用程序
        return iRet;
    }
    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通信中
    Sleep(800);

    EnterSystem(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x07E8);
    SendDataComm(CBinary("\x22\xF1\x03", 3));
    sendframe.SetSendFrame(CBinary("\x10\x01", 2));
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    if (checkIs7f(binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return CErrorCode::EC_ECU_REFUSE;
    }

    sendframe.SetSendFrame(CBinary("\x31\x01\x40\x35", 4));
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    if (!binRecive.GetByteCount())
    {
        FxShowMessageBox(FxGetStdString(STD_INFO_COMMUNICATION_STATUS), FxGetStdString(STD_INFO_NO_COMMUNICATION_SYS), DF_MB_OK, DT_LEFT);//测试仪与控制单元之间无法通信
        return CErrorCode::EC_TIME_OVER;
    }
    if (binRecive.GetByteCount() < 4 || binRecive[0] != 0x71 || binRecive[1] != 0x01 || binRecive[2] != 0x40 || binRecive[3] != 0x35)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B945"), g_GetTxtStringFormHtml("0x0000B21F"));
        return CErrorCode::EC_TIME_OVER;
    }

    m_pNetLayer->KeepLink(3000, CSendFrame(CBinary("\x3E\x80", 2)));    // 打开链路保持
    PleaseWait_xS_haveTTL(8000, g_GetTxtStringFormHtml("0x0000B09D"), g_GetTxtStringFormHtml("0x0000B945"));//氧传感器-请等待
    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通信中
    Sleep(800);
    SendDataComm(CBinary("\x10\x01", 2));
    m_pNetLayer->KeepLink(0); // 断开链路保持

    //step05 氧传感器 - 完成
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B945"), g_GetTxtStringFormHtml("0x9002A16C") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OK, DT_LEFT);

    //step06 点火关闭
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));

    //step07 故障码
    iRet = ClearSysDTC_Programme_538(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x07E8);

    return iRet;

}



//氧化催化剂
W_ErrorCode CSeviceFunctionNew::DPF_NEW_lansheng_L494_2016()
{
    W_ErrorCode iRet = 0;
    W_I16 iKey = 0;

    CSendFrame sendframe;
    CReceiveFrame rfRet;
    CBinary binRecive;

    int P_table[3][8] = { {0x29E041,0x774CA6,0xCF2678,0xBBD1C5,0x523EAE,0x85C378,0x2F1BC4,0x7F88BC},
    {0x6B29D4,0x2A7716,0xACF983,0xA4C7B9,0xB188CC,0x9E2437,0xC44FC1,0x74AB3C},
    {0xA1F45E,0x677588,0xEA6725,0xF1526F,0xC739EB,0xAFDDF2,0x7F14D1,0xDAA487} };

    //step01 本程序将为备换的氧化催化剂获取补偿值
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x90027F99"), g_GetTxtStringFormHtml("0x90027F9A") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BBAB"), DF_MB_OKCANCEL, DT_LEFT);
    if (iKey == DF_IDCANCEL)
    {
        return iRet;
    }

    //step02 点火打开、发动机、电压、点火关闭
    iRet = CheckEngineStop(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xF4\x0C\x00\x00\x00\x00", 11), 0x07E8, CBinary("\x01\x00", 2));
    if (iRet != 0)
        return 0;

    //step03 点火打开
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"));

    //step04 本程序将为氧化催化剂获取补偿值
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x90027F99"), g_GetTxtStringFormHtml("0x90027F9F") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000B8F1")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OKCANCEL, DT_LEFT);
    if (iKey == DF_IDCANCEL)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B8D1"));//操作人员已中止了此应用程序
        return iRet;
    }

    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通信中
    Sleep(800);

    EnterSystem(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x07E8);
    SendDataComm(CBinary("\x22\xf1\x03", 3));
    sendframe.SetSendFrame(CBinary("\x10\x03", 2));
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    if (checkIs7f(binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return CErrorCode::EC_ECU_REFUSE;
    }

    //安全访问    
    iRet = SafeLogin_L405_2014_Oil(CBinary("\x27\x03", 2), 0xE09A13, P_table, CBinary("\x3E\x80", 2));//A1 F4 5E

    if (iRet == CErrorCode::EC_ECU_REFUSE)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000B09F"), DF_MB_BACK);//安全访问失败
        return CErrorCode::EC_ECU_REFUSE;
    }
    else if (iRet < 0)
    {
        FxShowMessageBox(FxGetStdString(STD_INFO_COMMUNICATION_STATUS), FxGetStdString(STD_INFO_NO_COMMUNICATION_SYS), DF_MB_OK, DT_LEFT);//测试仪与控制单元之间无法通信
        return CErrorCode::EC_TIME_OVER;
    }

    sendframe.SetSendFrame(CBinary("\x31\x01\x40\x5B\x0A", 5));
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount() < 5 || binRecive[0] != 0x71 || binRecive[1] != 0x01 || binRecive[2] != 0x40 || binRecive[3] != 0x5B || binRecive[4] != 0x0A)
    {
        if (!binRecive.GetByteCount())
        {
            FxShowMessageBox(FxGetStdString(STD_INFO_COMMUNICATION_STATUS), FxGetStdString(STD_INFO_NO_COMMUNICATION_SYS), DF_MB_OK, DT_LEFT);//测试仪与控制单元之间无法通信
            return CErrorCode::EC_TIME_OVER;
        }
        if (checkIs7f(binRecive))
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
            return CErrorCode::EC_ECU_REFUSE;
        }
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B8F0"), g_GetTxtStringFormHtml("0x0000B21F"));
        return CErrorCode::EC_TIME_OVER;
    }
    m_pNetLayer->KeepLink(3000, CSendFrame(CBinary("\x3E\x80", 2)));    // 打开链路
    PleaseWait_xS_haveTTL(8000, g_GetTxtStringFormHtml("0x0000B09D"), g_GetTxtStringFormHtml("0x0000B8F0"));//启动柴油机维修功能-请等待
    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通信中
    Sleep(800);
    SendDataComm(CBinary("\x10\x01", 2));
    m_pNetLayer->KeepLink(0); // 断开链路

    //step05 启动柴油机维修功能 - 完成
    FxShowMessageBox(g_GetTxtStringFormHtml("0x90027F99"), g_GetTxtStringFormHtml("0x90027F9F") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002A16C")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OK, DT_LEFT);

    //step06 点火关闭
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml(TXT_HTML_STATE_VALUE_IGNITION_OFF));

    //step07 故障码
    iRet = ClearSysDTC_Programme_538(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x07E8);

    return iRet;

}




// 蒸发系统诊断测试
W_ErrorCode CSeviceFunctionNew::Evaporation_system_test_NEW_lansheng_L494_2016(W_U32 iSafeType, W_U32 iSafeBaseValue)
{
    W_ErrorCode iRet = 0;
    W_I16 iKey = 0;
    CSendFrame sendframe;
    CReceiveFrame rfRet;
    char charTemp[500] = "";
    int FuelLiquidLevel = 0;
    float BatteryVoltage = 0.0;
    string strall = "";
    bool IsSuccess = false;

    // 形成一个正压力
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BEE4"), g_GetTxtStringFormHtml("0x0000BEE6") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BEE7")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BEE8") + "\n" + "\n" + g_GetTxtStringFormHtml("0x90022F8D")
        , DF_MB_OKCANCEL, DT_LEFT);
    if (iKey == DF_IDCANCEL)
        return iRet;


    // 判断电压
    iRet = CheckEngineStop(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xF4\x0C\x00\x00\x00\x00", 11), 0x07E8, CBinary("\x01\x00", 2));
    if (iRet != 0)
        return 0;

    //step6
    CMessageBoxCtrl::SetOkBtnText(g_GetTxtStringFormHtml("0x0000BEE5"));//启动
    CMessageBoxCtrl::SetCancelBtnText(g_GetTxtStringFormHtml("0x0000BA5C"));//退出
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BEE4"), g_GetTxtStringFormHtml("0x0000B28D"), DF_MB_OKCANCEL, DT_LEFT);
    CMessageBoxCtrl::ResetOkBtnText();
    CMessageBoxCtrl::ResetCancelBtnText();
    if (iKey == DF_IDCANCEL)
    {
        //step14-21
        iRet = CheckSysDTCNubCBCEC(PTL_CAN_11_500K, PTL_CAN_11_125K, CBinary("\x07\x26\x08\x03\x19\x02\x0C\x00\x00\x00\x00", 11), CBinary("\x07\xDF\x08\x04\x14\xFF\xFF\xFF\x00\x00\x00", 11), CBinary("\x07\xDF\x08\x03\x19\x02\x0C\x00\x00\x00\x00", 11), 0x072E, 0x07E7, 0x07E7);
        return iRet;
    }

    // 确保关闭
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x00000065") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000B0C8"), DF_MB_OK, DT_LEFT);


    //step8
    FxShowMessageBox(FxGetStdString(STD_INFO_COMMUNICATION_STATUS), g_GetTxtStringFormHtml("0x0000B09D"), DF_MB_NOBUTTON, DT_LEFT);//通讯状态,请等待.
    string strOpenfileConfigMenu = m_stropenfileConfigMenu;
    CJLRStringOperate strOpt;
    strOpt.Replace(strOpenfileConfigMenu, ".ctv", "");
    EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x26\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x072E);
    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x26\x08\x02\x10\x03\x00\x00\x00\x00\x00", 11), 0x072E);
    rfRet = m_rfRet;
    m_binRecive = rfRet.GetFirst();
    if (m_binRecive.GetByteCount())
    {
        m_binRecive = CBinary(m_binRecive.GetBuffer() + 4, m_binRecive.GetByteCount() - 4);
        if (!checkIs7f(m_binRecive))
        {
            //安全访问
            iRet = SafeLogin_Standard3(CBinary("\x27\x21", 2), 0x88703A);

            if (!(iRet == CErrorCode::EC_ECU_REFUSE || iRet < 0))
            {
                sendframe.SetSendFrame(CBinary("\x31\x01\x20\x38\x01", 5));
                rfRet = SendDataComm(sendframe);
            }

        }
    }


    EnterSystem(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x07E8);
    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xF1\x90\x00\x00\x00\x00", 11), 0x07E8);
    int count = 1;
    do
    {
        sendframe.SetSendFrame(CBinary("\x22\xDD\x02", 3));
        rfRet = SendDataComm(sendframe);
        sendframe.SetSendFrame(CBinary("\x22\xF4\x2F", 3));
        rfRet = SendDataComm(sendframe);
        m_binRecive = rfRet.GetFirst();
        if (m_binRecive.GetByteCount() > 3)
        {
            FuelLiquidLevel = m_binRecive[3] * 100 / 255;
            if (m_binRecive[3] <= 0x28)
            {
                strall = g_GetTxtStringFormHtml("0x00001A06") + " = %d%%";
                sprintf(charTemp, strall.c_str(), FuelLiquidLevel);
                FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), charTemp);
                FxShowMessageBox(FxGetStdString(STD_INFO_COMMUNICATION_STATUS), g_GetTxtStringFormHtml("0x0000B09D"), DF_MB_NOBUTTON, DT_LEFT);//通讯状态,请等待.
            }
        }
        if (m_binRecive.GetByteCount() < 4 || checkIs7f(m_binRecive) || m_binRecive[3] <= 0x28)
        {
            strall = g_GetTxtStringFormHtml("0x0000BE44") + "\n\n"
                + g_GetTxtStringFormHtml("0x0000BE45") + "\n\n"
                + g_GetTxtStringFormHtml("0x0000BE46") + "\n\n"
                + g_GetTxtStringFormHtml("0x0000BE47");
            FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), strall, DF_MB_OK, DT_LEFT);
            FxShowMessageBox(FxGetStdString(STD_INFO_COMMUNICATION_STATUS), g_GetTxtStringFormHtml("0x0000B09D"), DF_MB_NOBUTTON, DT_LEFT);//通讯状态,请等待.
            iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x26\x08\x05\x31\x01\x20\x38\x01\x00\x00", 11), 0x072E);
            sendframe.SetSendFrame(CBinary("\x10\x01", 2));
            rfRet = SendDataComm(sendframe);
            if (IsSuccess)
            {
                FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x00000013"));
            }
            //step14-21
            iRet = CheckSysDTCNubCBCEC(PTL_CAN_11_500K, PTL_CAN_11_125K, CBinary("\x07\x26\x08\x03\x19\x02\x0C\x00\x00\x00\x00", 11), CBinary("\x07\xDF\x08\x04\x14\xFF\xFF\xFF\x00\x00\x00", 11), CBinary("\x07\xDF\x08\x03\x19\x02\x0C\x00\x00\x00\x00", 11), 0x072E, 0x07E7, 0x07E7);
            return iRet;
        }
        sendframe.SetSendFrame(CBinary("\x22\xF4\x42", 3));
        rfRet = SendDataComm(sendframe);
        m_binRecive = rfRet.GetFirst();
        if (m_binRecive.GetByteCount() > 3)
        {
            BatteryVoltage = m_binRecive[3] * 0.256;
            if (m_binRecive[3] <= 0x30)
            {
                strall = g_GetTxtStringFormHtml("0x00001A76") + "=%0.2fV";
                sprintf(charTemp, strall.c_str(), BatteryVoltage);
                FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), charTemp);
                FxShowMessageBox(FxGetStdString(STD_INFO_COMMUNICATION_STATUS), g_GetTxtStringFormHtml("0x0000B09D"), DF_MB_NOBUTTON, DT_LEFT);//通讯状态,请等待.
            }
        }
        if (m_binRecive.GetByteCount() < 4 || checkIs7f(m_binRecive) || m_binRecive[3] <= 0x30)
        {
            strall = g_GetTxtStringFormHtml("0x0000BE44") + "\n\n"
                + g_GetTxtStringFormHtml("0x0000BE45") + "\n\n"
                + g_GetTxtStringFormHtml("0x0000BE46") + "\n\n"
                + g_GetTxtStringFormHtml("0x0000BE47");
            FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), strall, DF_MB_OK, DT_LEFT);
            FxShowMessageBox(FxGetStdString(STD_INFO_COMMUNICATION_STATUS), g_GetTxtStringFormHtml("0x0000B09D"), DF_MB_NOBUTTON, DT_LEFT);//通讯状态,请等待.
            iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x26\x08\x05\x31\x01\x20\x38\x01\x00\x00", 11), 0x072E);
            sendframe.SetSendFrame(CBinary("\x10\x01", 2));
            rfRet = SendDataComm(sendframe);
            if (IsSuccess)
            {
                FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x00000013"));  // 成功完成
            }
            //step14-21
            iRet = CheckSysDTCNubCBCEC(PTL_CAN_11_500K, PTL_CAN_11_125K, CBinary("\x07\x26\x08\x03\x19\x02\x0C\x00\x00\x00\x00", 11), CBinary("\x07\xDF\x08\x04\x14\xFF\xFF\xFF\x00\x00\x00", 11), CBinary("\x07\xDF\x08\x03\x19\x02\x0C\x00\x00\x00\x00", 11), 0x072E, 0x07E7, 0x07E7);
            return iRet;
        }

    } while (count--);

    //step10
    sendframe.SetSendFrame(CBinary("\x10\x03", 2));
    rfRet = SendDataComm(sendframe);
    m_binRecive = rfRet.GetFirst();
    if (m_binRecive.GetByteCount() > 1 && !checkIs7f(m_binRecive))
    {
        if (iSafeType == 0)
        {
            //安全访问
            iRet = SafeLogin_Standard3(CBinary("\x27\x03", 2), iSafeBaseValue);
        }
        if (iSafeType == 1)
        {
            //安全访问
            iRet = SafeLogin_Standard3(CBinary("\x27\x03", 2), 0x215DDA);
        }
        if (iSafeType == 3)
        {
            //安全访问
            iRet = SafeLogin_Standard3(CBinary("\x27\x03", 2), 0xA03416);  // A03416
        }
        if (iSafeType == 4)
        {
            if (strOpenfileConfigMenu == "module_special_L319_2014")
            {
                //安全访问
                iRet = SafeLogin_Standard3(CBinary("\x27\x03", 2), 0x1572D7);
            }
            else if (strOpenfileConfigMenu == "module_special_L405_2013" || strOpenfileConfigMenu == "module_special_X152_2014")
            {
                //安全访问
                iRet = SafeLogin_Standard3(CBinary("\x27\x03", 2), 0x215DDA);
            }
        }
        if (iSafeType == 5)
        {
            if (strOpenfileConfigMenu == "module_special_X250_2013" || strOpenfileConfigMenu == "module_special_X351_2013")
            {
                //安全访问
                iRet = SafeLogin_Standard3(CBinary("\x27\x21", 2), 0x097ED0);//已验证
            }
            else if (strOpenfileConfigMenu == "module_special_L359_2011")
            {
                //安全访问
                iRet = SafeLogin_Standard3(CBinary("\x27\x31", 2), 0xC2CA7D);
            }
            else
            {
                //安全访问
                iRet = SafeLogin_Standard3(CBinary("\x27\x03", 2), 0xA03416);
            }
        }
    }
    if (iSafeType < 2 || iSafeType == 4)
    {
        sendframe.SetSendFrame(CBinary("\x31\x01\x40\x08\x02", 5));
        rfRet = SendDataComm(sendframe);
        m_binRecive = rfRet.GetFirst();
    }
    else if (iSafeType == 3)
    {
        sendframe.SetSendFrame(CBinary("\x31\x01\x40\x7F\x02", 5));
        rfRet = SendDataComm(sendframe);
        m_binRecive = rfRet.GetFirst();
    }
    else
    {
        if (iSafeType == 5)
        {
            sendframe.SetSendFrame(CBinary("\x31\x01\x40\x08\x02", 5));
            rfRet = SendDataComm(sendframe);
            m_binRecive = rfRet.GetFirst();
        }
    }
    //step11
    if (m_binRecive.GetByteCount() < 5 || checkIs7f(m_binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000BE48"));
        FxShowMessageBox(FxGetStdString(STD_INFO_COMMUNICATION_STATUS), g_GetTxtStringFormHtml("0x0000B09D"), DF_MB_NOBUTTON, DT_LEFT);//通讯状态,请等待.
        iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x26\x08\x05\x31\x01\x20\x38\x01\x00\x00", 11), 0x072E);
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        if (IsSuccess)
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x00000013"));
        }
        //step14-21
        iRet = CheckSysDTCNubCBCEC(PTL_CAN_11_500K, PTL_CAN_11_125K, CBinary("\x07\x26\x08\x03\x19\x02\x0C\x00\x00\x00\x00", 11), CBinary("\x07\xDF\x08\x04\x14\xFF\xFF\xFF\x00\x00\x00", 11), CBinary("\x07\xDF\x08\x03\x19\x02\x0C\x00\x00\x00\x00", 11), 0x072E, 0x07E7, 0x07E7);
        return iRet;
    }
    if (iSafeType < 2 || iSafeType == 4)
    {
        sendframe.SetSendFrame(CBinary("\x31\x03\x40\x08", 4));
        rfRet = SendDataComm(sendframe);
        m_binRecive = rfRet.GetFirst();
    }
    else if (iSafeType == 3)
    {
        sendframe.SetSendFrame(CBinary("\x31\x03\x40\x7F", 4));
        rfRet = SendDataComm(sendframe);
        m_binRecive = rfRet.GetFirst();
    }
    else
    {
        if (iSafeType == 5)
        {
            sendframe.SetSendFrame(CBinary("\x31\x03\x40\x08", 4));
            rfRet = SendDataComm(sendframe);
            m_binRecive = rfRet.GetFirst();
        }
    }
    if (m_binRecive.GetByteCount() < 4 || checkIs7f(m_binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000BE49"));
        FxShowMessageBox(FxGetStdString(STD_INFO_COMMUNICATION_STATUS), g_GetTxtStringFormHtml("0x0000B09D"), DF_MB_NOBUTTON, DT_LEFT);//通讯状态,请等待.
        iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x26\x08\x05\x31\x01\x20\x38\x01\x00\x00", 11), 0x072E);
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        if (IsSuccess)
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x00000013"));
        }
        //step14-21
        iRet = CheckSysDTCNubCBCEC(PTL_CAN_11_500K, PTL_CAN_11_125K, CBinary("\x07\x26\x08\x03\x19\x02\x0C\x00\x00\x00\x00", 11), CBinary("\x07\xDF\x08\x04\x14\xFF\xFF\xFF\x00\x00\x00", 11), CBinary("\x07\xDF\x08\x03\x19\x02\x0C\x00\x00\x00\x00", 11), 0x072E, 0x07E7, 0x07E7);
        return iRet;
    }

    //step12
    sendframe.SetSendFrame(CBinary("\x22\xD9\x16", 3));
    rfRet = SendDataComm(sendframe);
    if (m_stropenfileConfigMenu == "module_special_X260_2016.ctv" || m_stropenfileConfigMenu == "module_special_X152_2016.ctv")
        m_pNetLayer->KeepLink(1000, CSendFrame(CBinary("\x3E\x80", 2)));//链路保持
    m_binRecive = rfRet.GetFirst();
    strall = g_GetTxtStringFormHtml("0x0000BE4A") + "\n\n"
        + g_GetTxtStringFormHtml("0x0000BE4D") + "1\n\n"
        + g_GetTxtStringFormHtml("0x00001A06") + "=%d%%\n\n"
        + g_GetTxtStringFormHtml("0x00001A76") + "= %0.2fV\n\n"
        + g_GetTxtStringFormHtml("0x0000BE4E")
        + g_GetTxtStringFormHtml("0x0000B989");
    sprintf(charTemp, strall.c_str(), FuelLiquidLevel, BatteryVoltage);
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B98B"), charTemp, DF_MB_OK, DT_LEFT);
    //step13
    m_pNetLayer->KeepLink(0);//打断链路
    sendframe.SetSendFrame(CBinary("\x10\x01", 2));
    m_pNetLayer->KeepLink(0);//链路断开
    rfRet = SendDataComm(sendframe);
    IsSuccess = true;

    FxShowMessageBox(FxGetStdString(STD_INFO_COMMUNICATION_STATUS), g_GetTxtStringFormHtml("0x0000B09D"), DF_MB_NOBUTTON, DT_LEFT);//通讯状态,请等待.

    EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x26\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x072E);
    sendframe.SetSendFrame(CBinary("\x10\x03", 2));
    rfRet = SendDataComm(sendframe);
    //安全访问
    iRet = SafeLogin_Standard3(CBinary("\x27\x21", 2), 0x88703A);
    if (!(iRet == CErrorCode::EC_ECU_REFUSE || iRet < 0))
    {
        sendframe.SetSendFrame(CBinary("\x31\x01\x20\x38\x01", 5));
        rfRet = SendDataComm(sendframe);
    }


    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x26\x08\x05\x31\x01\x20\x38\x01\x00\x00", 11), 0x072E);
    sendframe.SetSendFrame(CBinary("\x10\x01", 2));
    rfRet = SendDataComm(sendframe);
    m_pNetLayer->KeepLink(0);//断开链路    

    if (IsSuccess)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x00000013"));
    }


    // 故障码
    iRet = ClearAllFaultCodes1(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x07E8, g_GetTxtStringFormHtml("0x0000BCF5"), 0x07E8);

    return iRet;

}



// 燃油预备常规程序
W_ErrorCode CSeviceFunctionNew::Fuel_ready_NEW_lansheng_L494_2016()
{
    W_ErrorCode iRet = 0;
    W_I16 iKey = 0;
    CSendFrame sendframe;
    CReceiveFrame rfRet;
    CVehicleComm ecuInter;

    // 给系统提供启动燃油
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B9D9"), g_GetTxtStringFormHtml("0x9001DB6D") + "\n" + "\n" + g_GetTxtStringFormHtml("0x90020F32")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x90022F8D"), DF_MB_OKCANCEL, DT_LEFT);
    if (iKey == DF_IDCANCEL)
    {
        return iRet;
    }

    // 判断电压
    iRet = CheckEngineStop(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xF4\x0C\x00\x00\x00\x00", 11), 0x07E8, CBinary("\x01\x00", 2));
    if (iRet != 0)
        return 0;

    //将点火开关打开（位置 2）.
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"));

    // 给系统提供启动燃油
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B9D9"), g_GetTxtStringFormHtml("0x9001DB6D") + "\n" + "\n" + g_GetTxtStringFormHtml("0x90020F32")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OKCANCEL, DT_LEFT);
    if (iKey == DF_IDCANCEL)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B917"));//因用户终止导致故障-重新操作程序
        return iRet;
    }


    FxShowMessageBox(FxGetStdString(STD_INFO_COMMUNICATION_STATUS), g_GetTxtStringFormHtml("0x0000B09D"), DF_MB_NOBUTTON, DT_LEFT);//通讯状态,请等待.
    Sleep(500);

    EnterSystem(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x07E8);
    SendDataComm(CBinary("\x22\xf1\x03", 3));
    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x02\x10\x03\x00\x00\x00\x00\x00", 11), 0x07E8);
    rfRet = m_rfRet;
    m_binRecive = rfRet.GetFirst();
    if (m_binRecive.GetByteCount())
    {
        m_binRecive = CBinary(m_binRecive.GetBuffer() + 4, m_binRecive.GetByteCount() - 4);
        if (checkIs7f(m_binRecive))
        {
            sendframe.SetSendFrame(CBinary("\x10\x01", 2));
            rfRet = SendDataComm(sendframe);
            FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B9D9"), g_GetTxtStringFormHtml("0x0000B0AC"));
            return CErrorCode::EC_ECU_REFUSE;
        }
    }

    //安全访问
    iRet = SafeLogin_Standard3(CBinary("\x27\x03", 2), 0x19F2D9);
    if (iRet == CErrorCode::EC_ECU_REFUSE)//否定应答
    {
        FxShowMessageBox(FxGetStdString(STD_TTL_MSG_INFORMATION), g_GetTxtStringFormHtml("0x0000B09F"), DF_MB_BACK);//安全访问失败
        return CErrorCode::EC_ECU_REFUSE;
    }
    else if (iRet < 0)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }
    m_pNetLayer->KeepLink(0);//断开链路


    sendframe.SetSendFrame(CBinary("\x31\x01\x04\x07\x00", 5));  // 07 E0 08 05 31 01 04 07 0A 00 00
    rfRet = SendDataComm(sendframe);
    m_binRecive = rfRet.GetFirst();
    if (m_binRecive.GetByteCount() < 4 || checkIs7f(m_binRecive))
    {
        SendDataComm(CBinary("\x10\x01", 2));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B9D9"), g_GetTxtStringFormHtml("0x0000B0AC"));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B90E"));//一般故障 - 请勿重新操作程序
        return CErrorCode::EC_TIME_OVER;
    }

    sendframe.SetSendFrame(CBinary("\x31\x03\x04\x07", 4));  // 07 E0 08 04 31 03 04 07 00 00 00
    rfRet = SendDataComm(sendframe);
    m_binRecive = rfRet.GetFirst();
    if (m_binRecive.GetByteCount() < 4 || m_binRecive[0] != 0x71 || m_binRecive[1] != 0x03 || m_binRecive[2] != 0x04 || m_binRecive[3] != 0x07)
    {
        SendDataComm(CBinary("\x10\x01", 2));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B9D9"), g_GetTxtStringFormHtml("0x0000B0AC"));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B90E"));//一般故障 - 请勿重新操作程序
        return CErrorCode::EC_TIME_OVER;
    }


    // 请等待
    PleaseWait_xS_haveTTL(5000, g_GetTxtStringFormHtml("0x0000B09D"), g_GetTxtStringFormHtml("0x0000B9D9"));
    sendframe.SetSendFrame(CBinary("\x10\x01", 2));
    rfRet = SendDataComm(sendframe);
    m_pNetLayer->KeepLink(0); // 断开链路

    // 完成
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B9D9"), g_GetTxtStringFormHtml("0x0000B0A1") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4")
        , DF_MB_OK, DT_LEFT);

    //关闭点火开关（位置 0）.
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml(TXT_HTML_STATE_VALUE_IGNITION_OFF));

    // 读故障码
    iRet = ClearSysDTC_Programme_538(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x07E8);

    return iRet;

}









// 燃油举升泵
W_ErrorCode CSeviceFunctionNew::FuelLiftPump_NEW_lansheng_L494_2016()
{
    W_ErrorCode iRet = 0;
    W_I16 iKey = 0;

    CSendFrame sendframe;
    CReceiveFrame rfRet;
    CBinary binRecive;

    //step01 燃油提升泵复位
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B9F3"), g_GetTxtStringFormHtml("0x90001C25") + "\n" + "\n" + g_GetTxtStringFormHtml("0x90022F8D"), DF_MB_OKCANCEL, DT_LEFT);
    if (iKey == DF_IDCANCEL)
        return iRet;

    //step02 点火打开、发动机、电压、点火关闭
    iRet = CheckEngineStop(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xF4\x0C\x00\x00\x00\x00", 11), 0x07E8, CBinary("\x01\x00", 2));
    if (iRet != 0)
        return 0;

    while (1)
    {
        //step03 点火打开
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"));

        //step04 燃油举升泵  -  重置保护模式
        iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B9F3"), g_GetTxtStringFormHtml("0x0000B9FA") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OKCANCEL, DT_LEFT);
        if (iKey == DF_IDCANCEL)
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));
            //您想再试一次吗？
            iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x00000069"), g_GetTxtStringFormHtml("0x0000006A,0x0000006B,0x0000006C,0x0000B104"), DF_MB_YESNO, DT_LEFT);
            if (iKey == DF_IDNO)
            {
                FxShowMessageBox(g_GetTxtStringFormHtml("0x00000069"), g_GetTxtStringFormHtml("0x0000006A,0x0000B105"));
                return CErrorCode::EC_TIME_OVER;
            }
        }
        else
        {
            EnterSystem(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x07e8);
            SendDataComm(CBinary("\x22\xf1\x03", 3));
            sendframe.SetSendFrame(CBinary("\x10\x01", 2));
            rfRet = SendDataComm(sendframe);
            if (rfRet.GetByteCount() == 0)
            {
                FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
                return CErrorCode::EC_TIME_OVER;
            }

            sendframe.SetSendFrame(CBinary("\x31\x01\x40\x27\x00", 5));
            rfRet = SendDataComm(sendframe);
            binRecive = rfRet.GetFirst();
            if (binRecive.GetByteCount() < 5 || binRecive[0] != 0x71 || binRecive[1] != 0x01 || binRecive[2] != 0x40 || binRecive[3] != 0x27 || binRecive[4] != 0x00)
            {
                FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B9F3"), g_GetTxtStringFormHtml("0x0000B21F"));//失败
                FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));
                //您想再试一次吗？
                iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x00000069"), g_GetTxtStringFormHtml("0x0000006A,0x0000006B,0x0000006C,0x0000B104"), DF_MB_YESNO, DT_LEFT);
                if (iKey == DF_IDNO)
                {
                    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000069"), g_GetTxtStringFormHtml("0x0000006A,0x0000B105"));
                    return CErrorCode::EC_TIME_OVER;
                }
            }
            else
                break;
        }
    }
    m_pNetLayer->KeepLink(3000, CSendFrame(CBinary("\x3E\x80", 2)));    // 打开链路保持
    PleaseWait_xS_haveTTL(8000, g_GetTxtStringFormHtml("0x0000B09D"), g_GetTxtStringFormHtml("0x0000C045"));//学习车辆标识号-请等待
    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通信中
    Sleep(800);
    SendDataComm(CBinary("\x10\x01", 2));
    m_pNetLayer->KeepLink(0); // 断开链路保持

    //step05 燃油举升泵  -  重置保护模式 - 完成
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B9F3"), g_GetTxtStringFormHtml("0x9002A16C") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OK, DT_LEFT);

    //step06 点火关闭
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));

    //step07 故障码
    iRet = ClearSysDTC_Programme_538(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x07E8);

    return iRet;
}


// 清除所有自适应值来重置
W_ErrorCode CSeviceFunctionNew::Clear_all_value_NEW_lansheng_SPORT()
{
    W_ErrorCode iRet = 0;
    W_I16 iKey = 0;

    CSendFrame sendframe;
    CReceiveFrame rfRet;
    CBinary binRecive;

    int P_table[3][8] = { {0x29E041,0x774CA6,0xCF2678,0xBBD1C5,0x523EAE,0x85C378,0x2F1BC4,0x7F88BC},
    {0x6B29D4,0x2A7716,0xACF983,0xA4C7B9,0xB188CC,0x9E2437,0xC44FC1,0x74AB3C},
    {0xA1F45E,0x677588,0xEA6725,0xF1526F,0xC739EB,0xAFDDF2,0x7F14D1,0xDAA487} };

    // 点火打开
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"));

    // 此例行程序将清除所有的自适应值
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BA07"), g_GetTxtStringFormHtml("0x90027126") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OKCANCEL, DT_LEFT);
    if (iKey == DF_IDCANCEL)
    {
        return iRet;
    }

    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通信中
    Sleep(800);

    EnterSystem(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x07E8);
    SendDataComm(CBinary("\x22\xf1\x03", 3));
    sendframe.SetSendFrame(CBinary("\x10\x03", 2));
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    if (checkIs7f(binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return CErrorCode::EC_ECU_REFUSE;
    }

    //安全访问    
    iRet = SafeLogin_L405_2014_Oil(CBinary("\x27\x03", 2), 0xE09A13, P_table, CBinary("\x3E\x80", 2));//A1 F4 5E

    if (iRet == CErrorCode::EC_ECU_REFUSE)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000B09F"), DF_MB_BACK);//安全访问失败
        return CErrorCode::EC_ECU_REFUSE;
    }
    else if (iRet < 0)
    {
        FxShowMessageBox(FxGetStdString(STD_INFO_COMMUNICATION_STATUS), FxGetStdString(STD_INFO_NO_COMMUNICATION_SYS), DF_MB_OK, DT_LEFT);//测试仪与控制单元之间无法通信
        return CErrorCode::EC_TIME_OVER;
    }

    sendframe.SetSendFrame(CBinary("\x31\x01\x04\x06\x00", 5));
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount() < 5 || binRecive[0] != 0x71 || binRecive[1] != 0x01 || binRecive[2] != 0x04 || binRecive[3] != 0x06 || binRecive[4] != 0x00)
    {
        if (!binRecive.GetByteCount())
        {
            FxShowMessageBox(FxGetStdString(STD_INFO_COMMUNICATION_STATUS), FxGetStdString(STD_INFO_NO_COMMUNICATION_SYS), DF_MB_OK, DT_LEFT);//测试仪与控制单元之间无法通信
            return CErrorCode::EC_TIME_OVER;
        }
        if (checkIs7f(binRecive))
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
            return CErrorCode::EC_ECU_REFUSE;
        }
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B8F0"), g_GetTxtStringFormHtml("0x0000B21F"));
        return CErrorCode::EC_TIME_OVER;
    }

    m_pNetLayer->KeepLink(3000, CSendFrame(CBinary("\x3E\x80", 2)));    // 打开链路
    PleaseWait_xS_haveTTL(5000, g_GetTxtStringFormHtml("0x90027126"), g_GetTxtStringFormHtml("0x0000BA07"));
    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通信中
    Sleep(800);
    SendDataComm(CBinary("\x10\x01", 2));
    m_pNetLayer->KeepLink(0); // 断开链路


    // 完成
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BA07"), g_GetTxtStringFormHtml("0x90027126") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002A16C")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OK, DT_LEFT);

    //step06 点火关闭
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml(TXT_HTML_STATE_VALUE_IGNITION_OFF));

    //step07 故障码
    iRet = ClearSysDTC_Programme_538(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x07E8);

    return iRet;

}



// 飞行记录器
W_ErrorCode CSeviceFunctionNew::Flyrecord_NEW_lansheng_L494_2016()
{
    W_ErrorCode iRet = 0;
    W_I16 iKey = 0;

    CSendFrame sendframe;
    CReceiveFrame rfRet;
    CBinary binReceive;

    //step01 此应用程序可以读取并将行车记录仪数据存储到本地
    iRet = FxShowMessageBox(g_GetTxtStringFormHtml("0x9001F91B"), g_GetTxtStringFormHtml("0x9002D046") + "\n" + "\n" + g_GetTxtStringFormHtml("0x90022F8D"), DF_MB_OKCANCEL, DT_LEFT);
    if (iRet == DF_IDCANCEL)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x900019A5"), g_GetTxtStringFormHtml("0x9002C122"), DF_MB_OK);//因用户中止而失败 - 重试程序
        return CErrorCode::EC_TIME_OVER;
    }

    //step02 点火打开
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"));
    PleaseWait_xS_haveTTL(10000, g_GetTxtStringFormHtml("0x0000B09D"), g_GetTxtStringFormHtml("0x0000BC64"));//飞行器记录-请等待

    EnterSystem(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x07E8);
    sendframe.SetSendFrame(CBinary("\x22\x05\x95", 3));
    rfRet = SendDataComm(sendframe);
    binReceive = rfRet.GetFirst();
    if (checkIs7f(binReceive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));
        return CErrorCode::EC_ECU_REFUSE;
    }
    else if (binReceive.GetByteCount() < 4 || binReceive[0] != 0x62 || binReceive[1] != 0x05 || binReceive[2] != 0x95)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x9000220B"), g_GetTxtStringFormHtml("0x00009A6B"), DF_MB_OK, DT_LEFT);
        return CErrorCode::EC_DATA;
    }
    sendframe.SetSendFrame(CBinary("\x22\x05\x96", 3));
    rfRet = SendDataComm(sendframe);
    binReceive = rfRet.GetFirst();
    if (checkIs7f(binReceive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));
        return CErrorCode::EC_ECU_REFUSE;
    }
    else if (binReceive.GetByteCount() < 4 || binReceive[0] != 0x62 || binReceive[1] != 0x05 || binReceive[2] != 0x96)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x9000220B"), g_GetTxtStringFormHtml("0x00009A6B"), DF_MB_OK, DT_LEFT);
        return CErrorCode::EC_DATA;
    }


    //step03 文件路径
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BC64"), g_GetTxtStringFormHtml("0x00000011"), DF_MB_OK, DT_LEFT);

    //step03 模块初始化
    PleaseWait_xS_haveTTL(10000, g_GetTxtStringFormHtml("0x00000066"), g_GetTxtStringFormHtml("0x0000B8FE"));

    //step03 飞行器 - 完成
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BC64"), g_GetTxtStringFormHtml("0x0000B0A3"), DF_MB_NOBUTTON);
    CMessageBoxCtrl::SetBusyStatus(true); //漏斗打开
    Sleep(2000);
    CMessageBoxCtrl::SetBusyStatus(false);//漏斗关闭

    //step04 点火关闭
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));

    //step05 故障码
    iRet = ClearSysDTC_Programme_538(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x07E8);

    return iRet;
}



// 高压燃油泵测试
W_ErrorCode CSeviceFunctionNew::High_press_fuel_NEW_lansheng_L405_2016()
{
    W_ErrorCode iRet = 0;
    W_I16 iKey = 0;

    CSendFrame sendframe;
    CReceiveFrame rfRet;
    CBinary binReceive;

    // 此应用程序将测试高压燃油泵是否正常工作
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000BAF0") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BAF1")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BAF2") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BAF3")
        , DF_MB_OKCANCEL, DT_LEFT);
    if (iKey == DF_IDCANCEL)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B8D1"));//应用程序被用户中止
        return 0;
    }


    // 判断电压
    iRet = CheckEngineStop(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xF4\x0C\x00\x00\x00\x00", 11), 0x07E8);


    // 点火打开
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"));

    // 确保车辆所有可开关的电器功能均已关闭
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000BAF2") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BAF3")
        , DF_MB_OK, DT_LEFT);


    // 确保运转
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B93D"), g_GetTxtStringFormHtml("0x9001251C"), DF_MB_OK, DT_LEFT);

    // 模块初始化
    PleaseWait_xS_haveTTL(10000, g_GetTxtStringFormHtml("0x900126DD"), g_GetTxtStringFormHtml("0x0000005F"));


    // 下列程序可能需要1分钟
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000BAF4") + "\n" + "\n" + g_GetTxtStringFormHtml("0x90008693"), DF_MB_OK, DT_LEFT);

    // 燃油泵状态
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x90008809"), g_GetTxtStringFormHtml("0x90010539"), DF_MB_OKCANCEL, DT_LEFT);
    if (iKey == DF_IDCANCEL)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B8D1"));//应用程序被用户中止
        return 0;
    }

    // 请等待
    //PleaseWait_xS_haveTTL(g_GetTxtStringFormHtml("0x0000B09B"),g_GetTxtStringFormHtml(""))





    return iRet;

}




// 变速器控制模块自适应清除
W_ErrorCode CSeviceFunctionNew::TCM_NEW_lansheng_L494_2016()
{
    W_ErrorCode iRet = 0;
    W_I16 iKey = 0;

    CSendFrame sendframe;
    CReceiveFrame rfRet;
    CBinary binAns, binRecive;


    //step01 变速器控制模块自适应清除
    iRet = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BB8A"), g_GetTxtStringFormHtml("0x90009F6C") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OKCANCEL, DT_LEFT);
    if (iRet == DF_IDCANCEL)
        return 0;


    //step02 点火打开
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"));

    //step03 本例行程序用于清除变速箱控制单元中的自适应值.    在更换变速箱、下载软件或进行任何其它变速箱相关的活动时，可能有此要求.
    CMessageBoxCtrl::SetOkBtnText(g_GetTxtStringFormHtml("0x0000BC0D"));
    iRet = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BB8A"), g_GetTxtStringFormHtml("0x9002B285") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B286")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OKCANCEL, DT_LEFT);
    CMessageBoxCtrl::ResetOkBtnText();
    if (iRet == DF_IDCANCEL)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B8D1"));//应用程序被用户中止
        return 0;
    }
    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通信中
    Sleep(800);

    EnterSystem(PTL_CAN_11_500K, CBinary("\x07\xE1\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x07E9);
    SendDataComm(CBinary("\x22\xF1\x03", 3));
    sendframe.SetSendFrame(CBinary("\x10\x03", 2));
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount() < 2 || binRecive[0] != 0x50 || binRecive[1] != 0x03)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x900019A5"), g_GetTxtStringFormHtml("0x9000D1CE"), DF_MB_OK);//测试失败
        return CErrorCode::EC_TIME_OVER;
    }
    if (checkIs7f(m_binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"), DF_MB_ANYKEYRETURN);                //ECU不支持
        return CErrorCode::EC_ECU_REFUSE;
    }

    binAns = SendDataComm(CBinary("\x31\x01\x40\x13", 4));
    if (binAns.GetByteCount() < 4 || (binAns[0] != 0x71 || binAns[1] != 0x01 || binAns[2] != 0x40 || binAns[3] != 0x13))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B21F"));    //失败
        return iRet;
    }
    PleaseWait_xS_haveTTL(8000, g_GetTxtStringFormHtml("0x0000B09D"), g_GetTxtStringFormHtml("0x0000C045"));//学习车辆标识号-请等待
    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通信中
    Sleep(800);

    //step04 清除调适值-完成
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BB8A"), g_GetTxtStringFormHtml("0x9002B285") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002A16C")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OKCANCEL, DT_LEFT);

    //step05 点火关闭
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));

    //step06 故障码
    iRet = ClearSysDTC_Programme_538(PTL_CAN_11_500K, CBinary("\x07\xE1\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x07E9);

    return iRet;

}



// 变速器控制模块调适
W_ErrorCode CSeviceFunctionNew::TCMadjustment_NEW_lansheng_2016()
{
    W_ErrorCode iRet = 0;
    W_I16 iKey = 0;

    CSendFrame sendframe;
    CReceiveFrame rfRet;
    CBinary binRecive;
    char charTemp[500] = "";
    string strall = "";
    string strVin = "";
    string strsoftware = "";
    string strserial = "";
    int ivalue = 0;

    bool is7f;
    W_I32 iback = -1;
    string strTemp, data[6], units_mBar[6];

    //step01 说明1
    FxShowMessageBox(g_GetTxtStringFormHtml("0x9002B283"), g_GetTxtStringFormHtml("0x9002B283") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BA42")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BF1D") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002D4D3")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002D4D9") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002D473")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002D474") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002D475")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OK, DT_LEFT);
    //step01 说明2
    FxShowMessageBox(g_GetTxtStringFormHtml("0x9002B283"), g_GetTxtStringFormHtml("0x9002B283") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9000EA16")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x900124F2") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BA41")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x90025D5A") + "\n" + "\n" + g_GetTxtStringFormHtml("0x90029FE9")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OK, DT_LEFT);
    //step01 说明2
    FxShowMessageBox(g_GetTxtStringFormHtml("0x9002B283"), g_GetTxtStringFormHtml("0x9002B283") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000B257")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BA43") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BA44")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BF21") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B072")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OK, DT_LEFT);


    //step05 确保发动机在运转
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B93D"), g_GetTxtStringFormHtml("0x9001251C"));

    //step06 变速器液温度说明
    iRet = FxShowMessageBox(g_GetTxtStringFormHtml("0x9002CDB5"), g_GetTxtStringFormHtml("0x90027265") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OKCANCEL, DT_LEFT);
    if (iRet == DF_IDCANCEL)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x900019A5"), g_GetTxtStringFormHtml("0x9002C122"), DF_MB_OK);//因用户中止而失败 - 重试程序
        return CErrorCode::EC_TIME_OVER;
    }
    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通信中
    Sleep(800);

    CActTestCtrl uiAct;
    string strCal = "";
    W_I16 iValue = 0;
    char EngTmp[20] = { 0 };

    uiAct.InitCtrl(g_GetTxtStringFormHtml("0x90002446"));//变速器液温度
    uiAct.SetColumnWid(75, 15, 10);
    uiAct.AddOneItem(g_GetTxtStringFormHtml("0x90002446,0x90027266"));//这个程序将持续读取变速器油液温度，直到满足正确的运行条件 (50°C)。
    uiAct.AddOneItem(g_GetTxtStringFormHtml("0x90002446"), FxGetStdString(CBinary("\x4A\xAA\x00\x00\x00\x05", 6)));
    uiAct.AddOneBtn(g_GetTxtStringFormHtml("0x0001D595"), true);//确定

    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\xE1\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x07E9);
    SendDataComm(CBinary("\x22\xF1\x03", 3));
    while (1)
    {
        sendframe.SetSendFrame(CBinary("\x22\x1E\x69", 3));
        rfRet = SendDataComm(sendframe);
        binRecive = rfRet.GetFirst();
        if (binRecive.GetByteCount() == 0)
        {
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_OK, DT_LEFT);
            return CErrorCode::EC_TIME_OVER;
        }
        else if (checkIs7f(binRecive))
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"), DF_MB_OK);//ECU不支持
            return CErrorCode::EC_ECU_REFUSE;
        }
        if (binRecive.GetByteCount() < 4 || binRecive[3] < 0x5A || binRecive[3] > 0xFF)  // 第4个字节为控制位，>5A
        {
            uiAct.SetBtnStatus(0, false);
            strCal = "Data out of range";
        }
        else
        {
            iValue = binRecive[3] - 0x28;  // -40+byte[3]
            sprintf(EngTmp, "%d", iValue);
            strCal = EngTmp;
            uiAct.SetBtnStatus(0, true);
        }
        uiAct.SetItemValue(1, strCal);  // 显示温度
        iRet = uiAct.ShowCtrl();
        if (iRet == -1)
            return iRet;
        else if (iRet == 0)
            break;
    }

    //step06 满足正确的运行条件 (50°C)。 完成
    FxShowMessageBox(g_GetTxtStringFormHtml("0x9002CDB5"), g_GetTxtStringFormHtml("0x90002446,0x90027266,0x0000B0A3"), DF_MB_OK, DT_LEFT);
    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通信中
    Sleep(800);


    SendDataComm(CBinary("\x22\xF1\x03", 3));
    sendframe.SetSendFrame(CBinary("\x22\xF1\x8C", 3));
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    if (checkIs7f(binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));
        return CErrorCode::EC_ECU_REFUSE;
    }
    else if (binRecive.GetByteCount() < 3 || binRecive[0] != 0x62 || binRecive[1] != 0xF1 || binRecive[2] != 0x8C)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x9000220B"), g_GetTxtStringFormHtml("0x00009A6B"), DF_MB_OK, DT_LEFT);
        return CErrorCode::EC_DATA;
    }

    //step07 变速器控制模块调适  -  静态接合
    FxShowMessageBox(g_GetTxtStringFormHtml("0x9002CDB5"), g_GetTxtStringFormHtml("0x00000069") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002720B") + "\n" + "\n" +
        g_GetTxtStringFormHtml("0x9002720C") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002720D") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4") + "\n" + "\n" + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OK, DT_LEFT);

    SendDataComm(CBinary("\x22\xF1\x03", 3));
    sendframe.SetSendFrame(CBinary("\x22\xF1\x8C", 3));
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    if (!binRecive.GetByteCount() || checkIs7f(binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml(TXT_HTML_STATE_VALUE_IGNITION_OFF));//点火关闭
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B0AC"));//测试失败
        return CErrorCode::EC_TIME_OVER;
    }

    int count = 0;
    do
    {
        ivalue = 0;
        if (binRecive.GetByteCount() > (count + 3) && binRecive[count + 3])   // 22 f1 8c 软件版本   TEST3-TEST20
        {
            ivalue = binRecive[count + 3];
            if (ivalue == 0)
                break;
            if (ivalue > 9)
                sprintf(charTemp, "%c", ivalue);
            else
                sprintf(charTemp, "%d", ivalue);
            strVin += charTemp;
        }
        count++;
    } while (count < 17);

    sendframe.SetSendFrame(CBinary("\x22\xF1\x8C", 3));   // VIN   TEST3-TEST19
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    for (count = 0; count < binRecive.GetByteCount() - 3; count++)
    {
        ivalue = 0;
        if (binRecive[count + 3])
        {
            ivalue = binRecive[count + 3];
            sprintf(charTemp, "%d", ivalue);
            strsoftware += charTemp;
        }
    }
    sendframe.SetSendFrame(CBinary("\x22\xF1\x88", 3));  // 序列号   TEST3-TEST29
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    for (count = 0; count < binRecive.GetByteCount() - 3; count++)
    {
        ivalue = 0;
        if (binRecive[count + 3])
        {
            ivalue = binRecive[count + 3];
            sprintf(charTemp, "%d", ivalue);
            strserial += charTemp;
        }
    }

    strall = g_GetTxtStringFormHtml("0x9002B616") + ":%s\n"        //软件版本
        + g_GetTxtStringFormHtml("0x9002CE9B") + ":%s\n"        //序列号
        + g_GetTxtStringFormHtml("0x900254CE") + ":%s\n";        //VIN

    sprintf(charTemp, strall.c_str(), strsoftware.c_str(), strserial.c_str(), strVin.c_str());

    //step08 软件版本/序列号/VIN
    FxShowMessageBox(g_GetTxtStringFormHtml("0x9002CDB5"), charTemp, DF_MB_OK, DT_LEFT);


    while (1)
    {
        CBinary binRecieve1;

        Sleep(250);
        vector<W_U8>    vctInt;
        CEcuInfoCtrl    list;

        // 分栏占屏比例
        vctInt.push_back(10);
        vctInt.push_back(20);
        vctInt.push_back(10);
        vctInt.push_back(10);
        vctInt.push_back(5);
        vctInt.push_back(5);
        vctInt.push_back(5);
        vctInt.push_back(35);

        list.InitCtrl(g_GetTxtStringFormHtml("0x0000BA2D"), vctInt);
        list.AddOneBtn(g_GetTxtStringFormHtml("0x0001D595"));
        list.AddItem(g_GetTxtStringFormHtml("0x9001E80B"));
        list.AddItem("C");
        list.AddItem("B");
        list.AddItem("E");
        list.AddItem("A");
        list.AddItem("D");
        list.AddItem("");
        list.AddItem(g_GetTxtStringFormHtml("0x9002D132"));
        list.AddItem(g_GetTxtStringFormHtml("0x9001EC8A"));
        list.AddItem(g_GetTxtStringFormHtml("0x90027A8D"));



        sendframe.SetSendFrame(CBinary("\x22\x1E\x86", 3));   // Req: 07 E1 08 03 22 1E 86 00 00 00 00
        rfRet = SendDataComm(sendframe);
        binRecieve1 = rfRet.GetFirst();
        is7f = checkIs7f(binRecieve1);
        if (binRecieve1.GetByteCount() == 0)
        {
            FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ENTERSYSFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_PACKET_TIME_OVER;
        }
        else if (is7f)
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x90027265"), g_GetTxtStringFormHtml("0x0000BE50"));
            return CErrorCode::EC_ECU_REFUSE;
        }
        else if (binRecieve1.GetByteCount() < 3 || (binRecieve1[0] != 0x62 || binRecieve1[1] != 0x1E || binRecieve1[2] != 0x86))
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x90027265"), g_GetTxtStringFormHtml("0x0000B21F"), DF_MB_CANCEL, DT_LEFT);
            return CErrorCode::EC_DATA;
        }
        // 总共：4_2
        int value_4_2;
        string str_4_2;
        char buf[20];
        value_4_2 = binRecieve1[3] * 256 + binRecieve1[4];  // 16进制拼接2个字节   binRecieve1[3]<<8+binRecieve[4]
        sprintf(buf, "%d", value_4_2);
        str_4_2 = buf;

        // 总共：5_2
        int value_5_2;
        string str_5_2;
        value_5_2 = binRecieve1[5] * 256 + binRecieve1[6];
        sprintf(buf, "%d", value_5_2);
        str_5_2 = buf;

        // 总共：2_2
        int value_2_2;
        string str_2_2;
        value_2_2 = binRecieve1[7] * 256 + binRecieve1[8];
        sprintf(buf, "%d", value_2_2);
        str_2_2 = buf;

        // 总共: 3_2
        int value_3_2;
        string str_3_2;
        value_3_2 = binRecieve1[9] * 256 + binRecieve1[10];
        sprintf(buf, "%d", value_3_2);
        str_3_2 = buf;

        // 总共: 1_2
        int value_1_2;
        string str_1_2;
        value_1_2 = binRecieve1[11] * 256 + binRecieve1[12];
        sprintf(buf, "%d", value_1_2);
        str_1_2 = buf;


        // mBar
        sendframe.SetSendFrame(CBinary("\x22\x1E\x85", 3));  // 07 E1 08 03 22 1E 85 00 00 00 00
        rfRet = SendDataComm(sendframe);
        binRecieve1 = rfRet.GetFirst();
        is7f = checkIs7f(binRecieve1);
        if (binRecieve1.GetByteCount() == 0)
        {
            FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ENTERSYSFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_PACKET_TIME_OVER;
        }
        else if (is7f)
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x90027265"), g_GetTxtStringFormHtml("0x0000BE50"));
            return CErrorCode::EC_ECU_REFUSE;
        }
        else if (binRecieve1.GetByteCount() < 3 || (binRecieve1[0] != 0x62 || binRecieve1[1] != 0x1E || binRecieve1[2] != 0x85))
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x90027265"), g_GetTxtStringFormHtml("0x0000B21F"), DF_MB_CANCEL, DT_LEFT);
            return CErrorCode::EC_DATA;
        }
        // mBar：4_3
        int value_4_3;
        string str_4_3;
        value_4_3 = binRecieve1[3] * 256 + binRecieve1[4];  // 16进制拼接2个字节
        sprintf(buf, "%d", value_4_3);
        str_4_3 = buf;

        // mBar: 5_3
        int value_5_3;
        string str_5_3;
        value_5_3 = binRecieve1[5] * 256 + binRecieve1[6];
        sprintf(buf, "%d", value_5_3);
        str_5_3 = buf;

        // mBar: 2_3
        int value_2_3;
        string str_2_3;
        value_2_3 = binRecieve1[7] * 256 + binRecieve1[8];
        sprintf(buf, "%d", value_2_3);
        str_2_3 = buf;

        // mBar: 3_3
        int value_3_3;
        string str_3_3;
        value_3_3 = binRecieve1[9] * 256 + binRecieve1[10];
        sprintf(buf, "%d", value_3_3);
        str_3_3 = buf;

        // mBar: 1_3
        int value_1_3;
        string str_1_3;
        value_1_3 = binRecieve1[11] * 256 + binRecieve1[12];
        sprintf(buf, "%d", value_1_3);
        str_1_3 = buf;


        sendframe.SetSendFrame(CBinary("\x22\x1E\x7E", 3));  // 07 E1 08 03 22 1E 7E 00 00 00 00
        rfRet = SendDataComm(sendframe);
        binRecieve1 = rfRet.GetFirst();
        is7f = checkIs7f(binRecieve1);
        if (binRecieve1.GetByteCount() == 0)
        {
            FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ENTERSYSFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_PACKET_TIME_OVER;
        }
        else if (is7f)
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x90027265"), g_GetTxtStringFormHtml("0x0000BE50"));
            return CErrorCode::EC_ECU_REFUSE;
        }
        else if (binRecieve1.GetByteCount() < 3 || (binRecieve1[0] != 0x62 || binRecieve1[1] != 0x1E || binRecieve1[2] != 0x7E))
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x90027265"), g_GetTxtStringFormHtml("0x0000C1A4"), DF_MB_CANCEL, DT_LEFT);
            return CErrorCode::EC_DATA;
        }

        // 温度控制
        sendframe.SetSendFrame(CBinary("\x22\x1E\x69", 3));  // 07 E1 08 03 22 1E 69 00 00 00 00
        rfRet = SendDataComm(sendframe);
        binRecieve1 = rfRet.GetFirst();
        is7f = checkIs7f(binRecieve1);
        if (binRecieve1.GetByteCount() == 0)
        {
            FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ENTERSYSFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_PACKET_TIME_OVER;
        }
        else if (is7f)
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x90027265"), g_GetTxtStringFormHtml("0x0000BE50"));
            return CErrorCode::EC_ECU_REFUSE;
        }
        else if (binRecieve1.GetByteCount() <= 3 || (binRecieve1[0] != 0x62 || binRecieve1[1] != 0x1E || binRecieve1[2] != 0x69))
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x90027265"), g_GetTxtStringFormHtml("0x0000C1A4"), DF_MB_CANCEL, DT_LEFT);
            return CErrorCode::EC_DATA;
        }

        int value_temperature;
        string str_temperature;
        value_temperature = -40 + binRecieve1[3];  // 速度控制
        sprintf(buf, "%d", value_temperature);
        str_temperature = buf;
        string contain = g_GetTxtStringFormHtml("0x0000EB5C");  // 字符串拼接
        str_temperature += contain;

        string change = "";
        if (binRecieve1[3] < 50)
        {
            change = FxGetStdString(CBinary("\x4A\x90\x00\x01\x43\xED", 6));
        }
        else
        {
            change = FxGetStdString(CBinary("\x4A\x90\x00\x01\x43\xEC", 6));
        }


        // 档位
        sendframe.SetSendFrame(CBinary("\x22\x1E\x1F", 3));   // 07 E1 08 03 22 1E 1F 00 00 00 00
        rfRet = SendDataComm(sendframe);
        binRecieve1 = rfRet.GetFirst();
        is7f = checkIs7f(binRecieve1);
        if (binRecieve1.GetByteCount() == 0)
        {
            FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ENTERSYSFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_PACKET_TIME_OVER;
        }
        else if (is7f)
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x90027265"), g_GetTxtStringFormHtml("0x0000BE50"));
            return CErrorCode::EC_ECU_REFUSE;
        }
        else if (binRecieve1.GetByteCount() <= 3 || (binRecieve1[0] != 0x62 || binRecieve1[1] != 0x1E || binRecieve1[2] != 0x1F))
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x90027265"), g_GetTxtStringFormHtml("0x0000C1A4"), DF_MB_CANCEL, DT_LEFT);
            return CErrorCode::EC_DATA;
        }
        int value_gear;
        string str_gear;
        value_gear = binRecieve1[49];
        sprintf(buf, "%d", value_gear);
        str_gear = buf;
        if (binRecieve1[49] == 0x00)
        {
            str_gear = "N";
        }


        sendframe.SetSendFrame(CBinary("\x22\xF4\x0C", 3));   //  07 E1 08 03 22 F4 0C 00 00 00 00
        rfRet = SendDataComm(sendframe);
        binRecieve1 = rfRet.GetFirst();
        is7f = checkIs7f(binRecieve1);
        if (binRecieve1.GetByteCount() == 0)
        {
            FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ENTERSYSFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_PACKET_TIME_OVER;
        }
        else if (is7f)
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x90027265"), g_GetTxtStringFormHtml("0x0000BE50"));
            return CErrorCode::EC_ECU_REFUSE;
        }
        else if (binRecieve1.GetByteCount() <= 3 || (binRecieve1[0] != 0x62 || binRecieve1[1] != 0xF4 || binRecieve1[2] != 0x0C))
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x90027265"), g_GetTxtStringFormHtml("0x0000C1A4"), DF_MB_CANCEL, DT_LEFT);
            return CErrorCode::EC_DATA;
        }



        // 踏板位置
        sendframe.SetSendFrame(CBinary("\x22\xF4\x5A", 3));  // 07 E1 08 03 22 F4 5A 00 00 00 00
        rfRet = SendDataComm(sendframe);
        binRecieve1 = rfRet.GetFirst();
        is7f = checkIs7f(binRecieve1);
        if (binRecieve1.GetByteCount() == 0)
        {
            FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ENTERSYSFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_PACKET_TIME_OVER;
        }
        else if (is7f)
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x90027265"), g_GetTxtStringFormHtml("0x0000BE50"));
            return CErrorCode::EC_ECU_REFUSE;
        }
        else if (binRecieve1.GetByteCount() <= 3 || (binRecieve1[0] != 0x62 || binRecieve1[1] != 0xF4 || binRecieve1[2] != 0x5A))
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x90027265"), g_GetTxtStringFormHtml("0x0000C1A4"), DF_MB_CANCEL, DT_LEFT);
            return CErrorCode::EC_DATA;
        }

        int value_step;
        string str_step;
        value_step = 0.39215 * binRecieve1[49];
        sprintf(buf, "%d", value_step);
        str_step = buf;
        string sym = "%";
        str_step += sym;



        sendframe.SetSendFrame(CBinary("\x22\x1E\x8B", 3));  //  07 E1 08 03 22 1E 8B 00 00 00 00
        rfRet = SendDataComm(sendframe);
        binRecieve1 = rfRet.GetFirst();
        is7f = checkIs7f(binRecieve1);
        if (binRecieve1.GetByteCount() == 0)
        {
            FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ENTERSYSFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_PACKET_TIME_OVER;
        }
        else if (is7f)
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x90027265"), g_GetTxtStringFormHtml("0x0000BE50"));
            return CErrorCode::EC_ECU_REFUSE;
        }
        else if (binRecieve1.GetByteCount() <= 3 || (binRecieve1[0] != 0x62 || binRecieve1[1] != 0x1E || binRecieve1[2] != 0x8B))
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x90027265"), g_GetTxtStringFormHtml("0x0000C1A4"), DF_MB_CANCEL, DT_LEFT);
            return CErrorCode::EC_DATA;
        }


        sendframe.SetSendFrame(CBinary("\x22\xF1\x03", 3));
        rfRet = SendDataComm(sendframe);

        list.SetSubItem(0, 1, "");
        list.SetSubItem(0, 2, g_GetTxtStringFormHtml("0x9002D745")); // 总共
        list.SetSubItem(0, 3, g_GetTxtStringFormHtml("0x9002D746")); // mBar
        list.SetSubItem(0, 4, "1");
        list.SetSubItem(0, 5, "2");
        list.SetSubItem(0, 6, "3");
        list.SetSubItem(0, 7, g_GetTxtStringFormHtml("0x9002D747")); // 涡轮扭矩范围 (Nm)

        list.SetSubItem(1, 1, "1>>2");
        list.SetSubItem(1, 2, str_1_2);// 总共
        list.SetSubItem(1, 3, str_1_3);// mBar
        list.SetSubItem(1, 7, change); // 涡轮扭矩范围

        list.SetSubItem(2, 1, "2>>3");
        list.SetSubItem(2, 2, str_2_2);
        list.SetSubItem(2, 3, str_2_3);

        list.SetSubItem(3, 1, "3>>4");
        list.SetSubItem(3, 2, str_3_2);
        list.SetSubItem(3, 3, str_3_3);

        list.SetSubItem(4, 1, g_GetTxtStringFormHtml("0x9002D751"));  // 5>>4滑行
        list.SetSubItem(4, 2, str_4_2);
        list.SetSubItem(4, 3, str_3_3);

        list.SetSubItem(5, 1, g_GetTxtStringFormHtml("0x9002D752"));  // 5>>刹车(保持10秒钟刹车)
        list.SetSubItem(5, 2, str_5_2);
        list.SetSubItem(5, 3, str_5_3);

        list.SetSubItem(7, 1, g_GetTxtStringFormHtml("0x900150E7"));  // 踏板位置
        list.SetSubItem(7, 2, g_GetTxtStringFormHtml("0x9001F5CE")); // 档位
        list.SetSubItem(7, 3, g_GetTxtStringFormHtml("0x9001F5D2")); // 状态

        list.SetSubItem(8, 0, str_temperature);
        list.SetSubItem(8, 1, str_step); // str踏板位置
        if (units_mBar[5] == "0")
            list.SetSubItem(8, 2, "N");
        else
            list.SetSubItem(8, 2, str_gear);  // 档位
        list.SetSubItem(8, 3, g_GetTxtStringFormHtml("0x9002D129"));
        list.SetSubItem(9, 0, change); // 范围
        list.SetSubItem(9, 1, g_GetTxtStringFormHtml("0x9002D749"));
        iback = list.ShowCtrl();
        if (iback == -1)
        {
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
            return iRet;
        }
        else if (iback == 0)
        {
            break;
        }
    }


    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通信中
    Sleep(800);


    //step09 变速器控制模块调适  -  静态接合
    FxShowMessageBox(g_GetTxtStringFormHtml("0x9002CDB5"), g_GetTxtStringFormHtml("0x00000069,0x9002720B,0x9002720C,0x9002720D,0x9002720F"), DF_MB_OK, DT_LEFT);

    //step10 确保关闭
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x90009FF7"));

    //step11 故障码
    iRet = ClearSysDTC_Programme_538(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x07E8);

    return iRet;



}



// 燃油泵供油管-启用/禁用
W_ErrorCode CSeviceFunctionNew::Supply_oil_NEW_lansheng_L494_2016()
{
    W_ErrorCode iRet = 0;
    W_I16 iKey = 0;

    CSendFrame sendframe;
    CReceiveFrame rfRet;
    CBinary supply;
    CBinary binRecive;

    //step01 此应用程序将启用/禁用燃油泵供油管
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000C0F9"), g_GetTxtStringFormHtml("0x0000C0FC") + "\n" + "\n" + g_GetTxtStringFormHtml("0x90022F8D"), DF_MB_OKCANCEL, DT_LEFT);
    if (iKey == DF_IDCANCEL)
        return iRet;

    CMenuCtrl uiMenu;
    while (1)
    {
        uiMenu.InitCtrl(g_GetTxtStringFormHtml("0x0000C0F9"));//燃油泵供油管  -  启用/禁用
        uiMenu.AddOneItem(g_GetTxtStringFormHtml("0x0000C0FB"));//燃油泵供油管  -  启用
        uiMenu.AddOneItem(g_GetTxtStringFormHtml("0x0000C0FA"));//燃油泵供油管  -  禁用
        W_I16 selectmenu = uiMenu.ShowCtrl();
        if (selectmenu == -1)
        {
            return 0;
        }
        else if (selectmenu == 0)
        {
            supply = CBinary("\x2E\x41\xDD\x00", 4);  // 启用
            break;
        }
        else if (selectmenu == 1)
        {
            supply = CBinary("\x2E\x41\xDD\x01", 4); // 禁用
            break;
        }
    }

    //step02 点火打开、发动机、电压、点火关闭
    iRet = CheckEngineStop(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xF4\x0C\x00\x00\x00\x00", 11), 0x07E8, CBinary("\x01\x00", 2));
    if (iRet != 0)
        return 0;

    //step03 点火打开
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"));
    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通信中
    Sleep(800);

    //step04 执行诊断命令
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B916"), g_GetTxtStringFormHtml("0x0000B09D"), DF_MB_NOBUTTON);
    CMessageBoxCtrl::SetBusyStatus(true); //漏斗打开
    Sleep(1000);
    CMessageBoxCtrl::SetBusyStatus(false);//漏斗关闭

    EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x26\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x072E);
    SendDataComm(CBinary("\x22\xf1\x03", 3));
    sendframe.SetSendFrame(CBinary("\x10\x03", 2));
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    if (checkIs7f(binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return CErrorCode::EC_ECU_REFUSE;
    }

    //安全访问
    iRet = SafeLogin_Standard3(CBinary("\x27\x03", 2), 0xE8E241);  // 07 26 08 05 27 04 E8 E2 41 00 00
    if (iRet == CErrorCode::EC_ECU_REFUSE)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000B09F"), DF_MB_BACK);
        return CErrorCode::EC_ECU_REFUSE;
    }
    else if (iRet < 0)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }
    m_pNetLayer->KeepLink(0); // 断开链路

    sendframe.SetSendFrame(supply);
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount() != 0x03 || binRecive[0] != 0x6E || binRecive[1] != 0x41 || binRecive[2] != 0xDD)
    {
        if (m_binRecive.GetByteCount() == 0)
        {
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_TIME_OVER;
        }
        if (checkIs7f(m_binRecive))
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
            return CErrorCode::EC_ECU_REFUSE;
        }
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B916"), g_GetTxtStringFormHtml("0x0000B0AC"));//测试失败
        return CErrorCode::EC_TIME_OVER;
    }
    m_pNetLayer->KeepLink(3000, CSendFrame(CBinary("\x3E\x80", 2)));    // 打开链路
    PleaseWait_xS_haveTTL(2000, g_GetTxtStringFormHtml("0x0000B09D"), g_GetTxtStringFormHtml("0x0000B916"));//执行诊断命令-请等待
    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通信中
    Sleep(800);
    SendDataComm(CBinary("\x10\x01", 2));
    m_pNetLayer->KeepLink(0); // 断开链路

    //step05 执行诊断命令-完成
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B916"), g_GetTxtStringFormHtml("0x0000B916") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000B0A3"));

    //step06 点火关闭
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));

    //step07 故障码
    iRet = ClearSysDTC_Programme_538(PTL_CAN_11_500K, CBinary("\x07\x26\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x072E);

    return iRet;


}



// 空气通道设置程序
W_ErrorCode CSeviceFunctionNew::Air_path_NEW_lansheng_L494_2016()
{
    W_ErrorCode iRet = 0;
    W_I16 iKey = 0;
    CSendFrame sendframe;
    CReceiveFrame rfRet;
    CBinary binRecieve;
    bool is7f;

    while (1)
    {
        // 此应用程序将启用/禁用燃油泵供油管 警告：这将需要启动发动机以达到最低温度 (70°C)
        iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000C0FD"), g_GetTxtStringFormHtml("0x0000C0FC") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000C0FF")
            + "\n" + "\n" + g_GetTxtStringFormHtml("0x80001618"), DF_MB_OKCANCEL, DT_LEFT);
        if (iKey == DF_IDCANCEL)
            return iRet;

        // 启动发动机并怠速运转
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000C0FD"), g_GetTxtStringFormHtml("0x90008651"));

        // 发动机温度
        iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000C0FD"), g_GetTxtStringFormHtml("0x90009C6F") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4")
            , DF_MB_OKCANCEL, DT_LEFT);
        if (iKey == DF_IDCANCEL)
        {
            return iRet;
        }

        EnterSystem(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x07E8);
        SendDataComm(CBinary("\x22\xf1\x03", 3));
        CMessageBoxCtrl::SetBusyStatus(true);
        // 发动机温度控制命令
        iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xF4\x05\x00\x00\x00\x00", 11), 0x07E8);  // 07 E0 08 03 22 F4 05 00 00 00 00
        CMessageBoxCtrl::SetBusyStatus(false);
        if (iRet < 0)
        {
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
            return iRet;
        }

        string strPrompt;
        char tmp[20] = "";
        bool DoPressOk = false;

        binRecieve = m_rfRet.GetFirst();  // 全局变量不解包
        if (binRecieve.GetByteCount() > 7 && binRecieve[4] == 0x62 && binRecieve[5] == 0xF4 && binRecieve[6] == 0x05)  // Req: 0B 07 E0 08 03 22 F4 05 00 00 00 00
                                                                                                                                                                            // Ans: 0B 07 E8 08 04 62 F4 05 73 80 00 00
        {
            W_I16 uEngTemp = binRecieve[7] - 40;
            if (uEngTemp >= 70 && uEngTemp <= 140)
            {
                sprintf(tmp, "%d", uEngTemp);
                strPrompt = "\n" + g_GetTxtStringFormHtml("0x0000BA3E") + ":" + tmp + FxGetStdString(CBinary("\x4A\xAA\x00\x00\x00\x05", 6));
                CMessageBoxCtrl::SetOkBtnText(g_GetTxtStringFormHtml("0x0000B989"));
                iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BA3E"), g_GetTxtStringFormHtml("0x0000C1A4") + strPrompt, DF_MB_OKCANCEL | DF_MB_HAVEBUTTON_DRAW_THEN_RETURN, DT_LEFT);
                if (iKey == DF_IDCANCEL)
                {
                    CMessageBoxCtrl::SetOkBtnText("OK");
                    return iRet;
                }
                else if (iKey == DF_IDOK)
                    DoPressOk = true;
            }
            else if (uEngTemp >= 0 && uEngTemp < 70)
            {
                sprintf(tmp, "%d", uEngTemp);
                strPrompt = "\n" + g_GetTxtStringFormHtml("0x0000BA3E") + ":" + tmp + FxGetStdString(CBinary("\x4A\xAA\x00\x00\x00\x05", 6));
                iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BA3E"), g_GetTxtStringFormHtml("0x0000C1A4") + strPrompt, DF_MB_CANCEL | DF_MB_HAVEBUTTON_DRAW_THEN_RETURN, DT_LEFT);
                if (iKey == DF_IDCANCEL)
                    return iRet;
            }
            else
            {
                sprintf(tmp, "0x%02X", binRecieve[3]);
                strPrompt = "\n" + g_GetTxtStringFormHtml("0x00004A20") + tmp + FxGetStdString(CBinary("\x4A\xAA\x00\x00\x00\x05", 6));
                iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BA3E"), g_GetTxtStringFormHtml("0x0000C1A4") + strPrompt, DF_MB_CANCEL | DF_MB_HAVEBUTTON_DRAW_THEN_RETURN, DT_LEFT);
                if (iKey == DF_IDCANCEL)
                    return iRet;
            }
        }
        else
        {
            iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BA3E"), g_GetTxtStringFormHtml("0x0000C1A4"), DF_MB_CANCEL | DF_MB_HAVEBUTTON_DRAW_THEN_RETURN, DT_LEFT);
            if (iKey == DF_IDCANCEL)
                return iRet;
        }

        if (!DoPressOk)
        {
            while (1)
            {
                sendframe.SetSendFrame(CBinary("\x22\xF4\x05", 3));
                rfRet = SendDataComm(sendframe);
                binRecieve = rfRet.GetFirst();
                is7f = checkIs7f(binRecieve);
                if (binRecieve.GetByteCount() > 3 && binRecieve[0] == 0x62 && binRecieve[1] == 0xF4 && binRecieve[2] == 0x05)
                {
                    string strPrompt;
                    char tmp[20] = "";
                    W_I16 uEngTemp = binRecieve[3] - 40;
                    if (uEngTemp >= 70 && uEngTemp <= 140)
                    {
                        sprintf(tmp, "%d", uEngTemp);
                        strPrompt = "\n" + g_GetTxtStringFormHtml("0x0000BA3E") + ":" + tmp + FxGetStdString(CBinary("\x4A\xAA\x00\x00\x00\x05", 6));
                        CMessageBoxCtrl::SetOkBtnText(g_GetTxtStringFormHtml("0x0000B989"));
                        iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BA3E"), g_GetTxtStringFormHtml("0x0000C1A4") + strPrompt, DF_MB_OKCANCEL | DF_MB_HAVEBUTTON_DRAW_THEN_RETURN, DT_LEFT);
                        if (iKey == DF_IDCANCEL)
                        {
                            CMessageBoxCtrl::SetOkBtnText("OK");
                            return iRet;
                        }
                        else if (iKey == DF_IDOK)
                            break;
                    }
                    else if (uEngTemp >= 0 && uEngTemp < 70)
                    {
                        sprintf(tmp, "%d", uEngTemp);
                        strPrompt = "\n" + g_GetTxtStringFormHtml("0x0000BA3E") + ":" + tmp + FxGetStdString(CBinary("\x4A\xAA\x00\x00\x00\x05", 6));
                        iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BA3E"), g_GetTxtStringFormHtml("0x0000C1A4") + strPrompt, DF_MB_CANCEL | DF_MB_HAVEBUTTON_DRAW_THEN_RETURN, DT_LEFT);
                        if (iKey == DF_IDCANCEL)
                            return iRet;
                    }
                    else
                    {
                        sprintf(tmp, "0x%02X", binRecieve[3]);
                        strPrompt = "\n" + g_GetTxtStringFormHtml("0x00004A20") + tmp + FxGetStdString(CBinary("\x4A\xAA\x00\x00\x00\x05", 6));
                        iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BA3E"), g_GetTxtStringFormHtml("0x0000C1A4") + strPrompt, DF_MB_CANCEL | DF_MB_HAVEBUTTON_DRAW_THEN_RETURN, DT_LEFT);
                        if (iKey == DF_IDCANCEL)
                            return iRet;
                    }
                }
                else
                {
                    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BA3E"), g_GetTxtStringFormHtml("0x0000C1A4"), DF_MB_CANCEL | DF_MB_HAVEBUTTON_DRAW_THEN_RETURN, DT_LEFT);
                    if (iKey == DF_IDCANCEL)
                        return CErrorCode::EC_DATA;
                }
            }
        }

        //st.2
        CMessageBoxCtrl::SetOkBtnText("OK");
        // 点火关闭
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));
        // 点火打开
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"));

        // 本程序将重新初始化节气门执行机构的适应值
        iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x00000048"), g_GetTxtStringFormHtml("0x0000B2FB") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OKCANCEL, DT_LEFT);
        if (iKey == DF_IDCANCEL)
        {
            //Edit by LDY 20160415
            FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B8D1"));
            return iRet;
        }

        CMessageBoxCtrl::SetBusyStatus(true);
        FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_TXT_MSG_PLEASE_WAIT, DF_MB_NOBUTTON);

        SendDataComm(CBinary("\x22\xf1\x03", 3));
        SendDataComm(CBinary("\x22\xf1\x03", 3));
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        is7f = checkIs7f(rfRet);
        if (is7f)
        {
            CMessageBoxCtrl::SetBusyStatus(false);
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));
            return CErrorCode::EC_ECU_REFUSE;
        }

        //st.3
        sendframe.SetSendFrame(CBinary("\x31\x01\x40\x30", 4));  // 07 E0 08 04 31 01 40 30 00 00 00
        rfRet = SendDataComm(sendframe);
        binRecieve = rfRet.GetFirst();
        CMessageBoxCtrl::SetBusyStatus(false);
        if (binRecieve.GetByteCount() == 0)
        {
            FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_NO_COMMUNICATION_SYS, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_TIME_OVER;
        }
        else if (binRecieve.GetByteCount() < 4
            || (binRecieve[0] != 0x71 || binRecieve[1] != 0x01 || binRecieve[2] != 0x40 || binRecieve[3] != 0x30))
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00000048"), g_GetTxtStringFormHtml("0x0000B21F"));
            return CErrorCode::EC_DATA;
        }

        // 节气门执行机构
        PleaseWait_xS_haveTTL(5000, g_GetTxtStringFormHtml("0x00000048"), g_GetTxtStringFormHtml("0x00000048"));

        // 节气门执行机构完成
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000048"), g_GetTxtStringFormHtml("0x00000048") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002A16C")
            + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OK, DT_LEFT);

        // 模块初始化
        PleaseWait_xS_haveTTL(5000, g_GetTxtStringFormHtml("0x00000066"), g_GetTxtStringFormHtml("0x0000B8FE"));

        // 废气再循环阀执行器（第 1 列气缸组）
        iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000C0FD"), g_GetTxtStringFormHtml("0x9002D163") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000B2F0")
            + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OKCANCEL, DT_LEFT);
        if (iKey == DF_IDCANCEL)
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B8D1"));
            return iRet;
        }

        CMessageBoxCtrl::SetBusyStatus(true);
        FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_TXT_MSG_PLEASE_WAIT, DF_MB_NOBUTTON);

        //st.5
        SendDataComm(CBinary("\x22\xf1\x03", 3));
        SendDataComm(CBinary("\x22\xf1\x03", 3));
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        SendDataComm(sendframe);
        sendframe.SetSendFrame(CBinary("\x31\x01\x40\x51\x01", 5));  // 07 E0 08 05 31 01 40 51 01 00 00
        rfRet = SendDataComm(sendframe);
        binRecieve = rfRet.GetFirst();
        CMessageBoxCtrl::SetBusyStatus(false);
        if (binRecieve.GetByteCount() == 0)
        {
            FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_NO_COMMUNICATION_SYS, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_TIME_OVER;
        }
        else if (binRecieve.GetByteCount() < 4
            || (binRecieve[0] != 0x71 || binRecieve[1] != 0x01 || binRecieve[2] != 0x40 || binRecieve[3] != 0x51))
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00000049"), g_GetTxtStringFormHtml("0x0000B21F"));
            return CErrorCode::EC_DATA;
        }


        PleaseWait_xS_haveTTL(5000, g_GetTxtStringFormHtml("0x0000B09D"), g_GetTxtStringFormHtml("0x00000049"));

        // 废气再循环阀执行器（第 1 列气缸组） 完成
        iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000C0FD"), g_GetTxtStringFormHtml("0x9002D163")
            + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002A16C") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4")
            , DF_MB_OK, DT_LEFT);

        // 模块初始化
        PleaseWait_xS_haveTTL(5000, g_GetTxtStringFormHtml("0x00000066"), g_GetTxtStringFormHtml("0x0000B8FE"));

        // 本常规程序将为涡轮切断阀获取补偿值。
        iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000C0FD"), g_GetTxtStringFormHtml("0x0000B938") + "\n" + "\n" + g_GetTxtStringFormHtml("0x90027F9D")
            + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OKCANCEL, DT_LEFT);
        if (iKey == DF_IDCANCEL)
            return iRet;
        CMessageBoxCtrl::SetBusyStatus(true);
        FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_TXT_MSG_PLEASE_WAIT, DF_MB_NOBUTTON);

        SendDataComm(CBinary("\x22\xf1\x03", 3));
        SendDataComm(CBinary("\x22\xf1\x03", 3));
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        SendDataComm(sendframe);
        sendframe.SetSendFrame(CBinary("\x31\x01\x40\x50\x02", 5));  // 07 E0 08 05 31 01 40 50 02 00 00
        rfRet = SendDataComm(sendframe);
        binRecieve = rfRet.GetFirst();
        CMessageBoxCtrl::SetBusyStatus(false);
        if (binRecieve.GetByteCount() == 0)
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00000049"), FxGetStdString(STD_INFO_NO_COMMUNICATION_SYS), DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_TIME_OVER;
        }
        else if (binRecieve.GetByteCount() < 4
            || (binRecieve[0] != 0x71 || binRecieve[1] != 0x01 || binRecieve[2] != 0x40 || binRecieve[3] != 0x50))
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00000049"), g_GetTxtStringFormHtml("0x0000B21F"));
            return CErrorCode::EC_DATA;
        }

        // 涡轮切断阀
        PleaseWait_xS_haveTTL(5000, g_GetTxtStringFormHtml("0x0000B938"), g_GetTxtStringFormHtml("0x0000B938"));   //实际为90S

        // 涡轮切断阀 完成
        iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000C0FD"), g_GetTxtStringFormHtml("0x0000B938") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002A16C")
            + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OKCANCEL, DT_LEFT);
        if (iKey == DF_IDCANCEL)
        {
            return iRet;
        }

        // 模块初始化
        PleaseWait_xS_haveTTL(10000, g_GetTxtStringFormHtml("0x00000066"), g_GetTxtStringFormHtml("0x0000B8FE"));

        // 点火关闭
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));

        // 模块初始化
        PleaseWait_xS_haveTTL(5000, g_GetTxtStringFormHtml("0x00000066"), g_GetTxtStringFormHtml("0x0000B8FE"));  //实际为90S

        //接下来将检查是否所有的空气路径自适应都已正确完成
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000C1AE"));

        //打开点火开关
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B1B2"));

        //st.9
        CMessageBoxCtrl::SetBusyStatus(true);
        FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_TXT_MSG_PLEASE_WAIT, DF_MB_NOBUTTON);

        SendDataComm(CBinary("\x22\xf1\x03", 3));
        sendframe.SetSendFrame(CBinary("\x10\x03", 2));
        rfRet = SendDataComm(sendframe);
        binRecieve = rfRet.GetFirst();
        is7f = checkIs7f(binRecieve);
        if (binRecieve.GetByteCount() == 0)
        {
            sendframe.SetSendFrame(CBinary("\x10\x01", 2));
            SendDataComm(sendframe);
            CMessageBoxCtrl::SetBusyStatus(false);
            FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_NO_COMMUNICATION_SYS, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_TIME_OVER;
        }
        else if (is7f)
        {
            CMessageBoxCtrl::SetBusyStatus(false);
            FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B21F"));
            return CErrorCode::EC_ECU_REFUSE;
        }

        //st.10
        sendframe.SetSendFrame(CBinary("\x22\xDE\x04", 3));  // 07 E0 08 03 22 DE 04 00 00 00 00
        rfRet = SendDataComm(sendframe);
        binRecieve = rfRet.GetFirst();
        if (binRecieve.GetByteCount() == 0)
        {
            sendframe.SetSendFrame(CBinary("\x10\x01", 2));
            SendDataComm(sendframe);
            CMessageBoxCtrl::SetBusyStatus(false);
            FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_NO_COMMUNICATION_SYS, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_TIME_OVER;
        }
        else if (binRecieve.GetByteCount() < 3  // 07 E8 08 06 62 DE 04 00 10 00 00
            || (binRecieve[0] != 0x62 || binRecieve[1] != 0xDE || binRecieve[2] != 0x04)
            || (binRecieve.GetByteCount() == 6 && binRecieve[5] != 0)
            || (binRecieve.GetByteCount() > 6 && binRecieve.GetByteCount() < 10 && (binRecieve[5] != 0 || binRecieve[6] != 0))
            || (binRecieve.GetByteCount() == 10 && (binRecieve[5] != binRecieve[9] || binRecieve[6] != 0))
            || (binRecieve.GetByteCount() > 10 && (binRecieve[5] != binRecieve[9] || binRecieve[6] != binRecieve[10])))
        {
            sendframe.SetSendFrame(CBinary("\x10\x01", 2));
            SendDataComm(sendframe);
            CMessageBoxCtrl::SetBusyStatus(false);
            FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B197"));
            iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x00000069"), g_GetTxtStringFormHtml("0x0000C1AF"), DF_MB_OKCANCEL);
            if (iKey == DF_IDOK)
                continue;
            break;
        }

        //st.11
        sendframe.SetSendFrame(CBinary("\x22\xDE\x03", 3));  // 07 E0 08 03 22 DE 03 00 00 00 00
        rfRet = SendDataComm(sendframe);
        binRecieve = rfRet.GetFirst();
        if (binRecieve.GetByteCount() == 0)
        {
            sendframe.SetSendFrame(CBinary("\x10\x01", 2));
            SendDataComm(sendframe);
            CMessageBoxCtrl::SetBusyStatus(false);
            FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_NO_COMMUNICATION_SYS, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_TIME_OVER;
        }
        else if (binRecieve.GetByteCount() < 3
            || (binRecieve[0] != 0x62 || binRecieve[1] != 0xDE || binRecieve[2] != 0x03)
            || (binRecieve.GetByteCount() == 6 && binRecieve[5] != 0)
            || (binRecieve.GetByteCount() > 6 && binRecieve.GetByteCount() < 10 && (binRecieve[5] != 0 || binRecieve[6] != 0))
            || (binRecieve.GetByteCount() == 10 && (binRecieve[5] != binRecieve[9] || binRecieve[6] != 0))
            || (binRecieve.GetByteCount() > 10 && (binRecieve[5] != binRecieve[9] || binRecieve[6] != binRecieve[10])))
        {
            sendframe.SetSendFrame(CBinary("\x10\x01", 2));
            SendDataComm(sendframe);
            CMessageBoxCtrl::SetBusyStatus(false);
            FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B197"));
            //一个或多个空气路径进程自适应失败，是否重试?
            iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x00000069"), g_GetTxtStringFormHtml("0x0000C1AF"), DF_MB_OKCANCEL);
            if (iKey == DF_IDOK)
                continue;
            break;
        }

        //st.12
        sendframe.SetSendFrame(CBinary("\x22\xDE\x05", 3));  // 07 E0 08 03 22 DE 05 00 00 00 00
        rfRet = SendDataComm(sendframe);
        binRecieve = rfRet.GetFirst();
        if (binRecieve.GetByteCount() == 0)
        {
            sendframe.SetSendFrame(CBinary("\x10\x01", 2));
            SendDataComm(sendframe);
            CMessageBoxCtrl::SetBusyStatus(false);
            FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_NO_COMMUNICATION_SYS, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_TIME_OVER;
        }
        else if (binRecieve.GetByteCount() < 3
            || (binRecieve[0] != 0x62 || binRecieve[1] != 0xDE || binRecieve[2] != 0x05)
            || (binRecieve.GetByteCount() == 6 && binRecieve[5] != 0)
            || (binRecieve.GetByteCount() > 6 && binRecieve.GetByteCount() < 10 && (binRecieve[5] != 0 || binRecieve[6] != 0))
            || (binRecieve.GetByteCount() == 10 && (binRecieve[5] != binRecieve[9] || binRecieve[6] != 0))
            || (binRecieve.GetByteCount() > 10 && (binRecieve[5] != binRecieve[9] || binRecieve[6] != binRecieve[10])))
        {
            sendframe.SetSendFrame(CBinary("\x10\x01", 2));
            SendDataComm(sendframe);
            CMessageBoxCtrl::SetBusyStatus(false);
            FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B197"));
            iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x00000069"), g_GetTxtStringFormHtml("0x0000C1AF"), DF_MB_OKCANCEL);
            if (iKey == DF_IDOK)
                continue;
            break;
        }

        //st.13
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        SendDataComm(sendframe);
        CMessageBoxCtrl::SetBusyStatus(false);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B197"));//关闭点火开关
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000005B"));//程序成功完成
        break;

    }

    // 故障码
    iRet = ClearSysDTC_Programme_538(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x07E8);

    return iRet;


}



// 柴油废气油液液位检查
W_ErrorCode CSeviceFunctionNew::Deol_inspection_NEW_lansheng_L494_2016()
{
    W_ErrorCode iRet = 0;
    W_I16 iKey;

    CSendFrame sendframe;
    CReceiveFrame rfRet;
    CBinary binRecive;
    char charTemp[50] = "";
    string strall = "";
    double strCurrentLevel = 0;
    double strCapacity = 0;
    CMessageBoxCtrl box;

    //step01 柴油废汽油液液位检查
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x90026F33"), g_GetTxtStringFormHtml("0x90026F34") + "\n" + "\n" + g_GetTxtStringFormHtml("0x90022F8D"), DF_MB_OKCANCEL, DT_LEFT);
    if (iKey == DF_IDCANCEL)
        return iRet;

    // 重要说明
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000069"), g_GetTxtStringFormHtml("0x00000069") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002CEF7")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x90026F35") + "\n" + "\n" + g_GetTxtStringFormHtml("0x90026F36")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x90026F37") + "\n" + "\n" + g_GetTxtStringFormHtml("0x90026F38")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x90026F39") + "\n" + "\n" + g_GetTxtStringFormHtml("0x90026F3A")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x90026F3B") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002D48F")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OK, DT_LEFT);

    //step02 点火打开
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"));

    //step03 模块初始化
    PleaseWait_xS_haveTTL(10000, g_GetTxtStringFormHtml("0x00000066"), g_GetTxtStringFormHtml("0x0000B8FE"));
    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通信中
    Sleep(800);

    while (1)
    {
        EnterSystem(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x07E8);
        sendframe.SetSendFrame(CBinary("\x22\x05\xC1", 3));
        rfRet = SendDataComm(sendframe);
        binRecive = rfRet.GetFirst();
        if (binRecive.GetByteCount() == 0)
        {
            FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ENTERSYSFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_PACKET_TIME_OVER;
        }
        else if (binRecive.GetByteCount() < 4 || (binRecive[0] != 0x62 || binRecive[1] != 0x05 || binRecive[2] != 0xC1))
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x90026F33"), g_GetTxtStringFormHtml("0x9002C412"));//无法读取数据
            FxShowMessageBox(g_GetTxtStringFormHtml("0x90026F33"), g_GetTxtStringFormHtml("0x00009A6B,0x90018443"));//错误,应用程序失败。
            return CErrorCode::EC_DATA;
        }
        //if(m_stropenfileConfigMenu == "module_special_L538_2017.ctv" || m_stropenfileConfigMenu == "module_special_L538JV_2016.ctv")
        //{
        //    if(binRecive[3] == 0x01)
        //    {
        //        strCurrentLevel = 9.3;
        //    }
        //    else if(binRecive[3] > 0x01)
        //    {
        //        strCurrentLevel = 15.8;
        //    }
        //}
     //   if(m_stropenfileConfigMenu == "module_special_X761_2017.ctv" || m_stropenfileConfigMenu == "module_special_X760_2017.ctv")
        //{
        //    if(binRecive[3] == 0x01)
        //    {
        //        strCurrentLevel = 1.8;
        //    }
        //    else if(binRecive[3] == 0x02)
        //    {
        //        strCurrentLevel = 5.3;
        //    }
        //    else if(binRecive[3] == 0x03)
        //    {
        //        strCurrentLevel = 10.0;
        //    }
        //    else if(binRecive[3] == 0x04)
        //    {
        //        strCurrentLevel = 15.5;
        //    }
        //    else if(binRecive[3] >= 0x05)
        //    {
        //        strCurrentLevel = 17.0;
        //    }
        //}

        //if(m_stropenfileConfigMenu == "module_special_L538_2017.ctv" || m_stropenfileConfigMenu == "module_special_L538JV_2016.ctv")
        //{
        //    strCapacity = 15.8;
        //}
        //else if(m_stropenfileConfigMenu == "module_special_X761_2017.ctv" || m_stropenfileConfigMenu == "module_special_X760_2017.ctv")
        //{
        //    strCapacity = 17.0;
        //}

        strCurrentLevel = 5.3;
        strCapacity = 18.2;


        strall = g_GetTxtStringFormHtml("0x9002D75C") + "\n"        //当前液位 %.1fL
            + g_GetTxtStringFormHtml("0x9002D75D");        //最大容量 %.1fL

        sprintf(charTemp, strall.c_str(), strCurrentLevel, strCapacity);//c_str()把string类型的转换成char类型

        //step03 液位和容量
        box.InitCtrl(g_GetTxtStringFormHtml("0x90026F33"), charTemp, DF_MB_OKCANCEL, DT_LEFT);
        box.SetOkBtnText("重新计算");
        iRet = box.ShowCtrl();
        if (iRet == DF_IDCANCEL)
        {
            break;
        }

        //iRet = FxShowMessageBox(g_GetTxtStringFormHtml("0x90026F33"),charTemp,DF_MB_OKCANCEL,DT_LEFT);
        //if(iRet == DF_IDOK)
        //    break;
        box.SetOkBtnText("确定");
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"), DF_MB_OK);
        PleaseWait_xS_haveTTL(10000, g_GetTxtStringFormHtml("0x00000066"), g_GetTxtStringFormHtml("0x0000B8FE"));
    }

    box.SetOkBtnText("确定");
    //step04 点火关闭
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));

    //step05 故障码
    iRet = ClearSysDTC_Programme_538(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x07E8);

    return iRet;

}



// 柴油废气油液灌注及压力测试
W_ErrorCode CSeviceFunctionNew::Deol_pressure_NEW_lansheng_L494_2016()
{
    W_ErrorCode iRet = CErrorCode::EC_SUCCESS;
    W_I16 iKey = 0;

    CSendFrame sendframe;
    CReceiveFrame rfRet;
    CBinary binRecive;
    CVehicleComm ecuInter;

    //step01 柴油废气油液灌注及压力测试
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x90026F3C"), g_GetTxtStringFormHtml("0x90026F3E") + "\n" + "\n" + g_GetTxtStringFormHtml("0x90026F3F")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x90022F8D"), DF_MB_OKCANCEL, DT_LEFT);
    if (iKey == DF_IDCANCEL)
        return iRet;

    //step02 确保发动机在运转
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B93D"), g_GetTxtStringFormHtml("0x00000096"), DF_MB_OK, DT_LEFT);
    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通信中
    Sleep(800);

    //step03 测试系统的压力
    iRet = FxShowMessageBox(g_GetTxtStringFormHtml("0x90026F3C"), g_GetTxtStringFormHtml("0x90026F3D") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OKCANCEL, DT_LEFT);
    if (iRet == DF_IDCANCEL)
        return CErrorCode::EC_TIME_OVER;

    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通信中
    Sleep(800);

    EnterSystem(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x07E8);
    SendDataComm(CBinary("\x22\xf1\x03", 3));
    sendframe.SetSendFrame(CBinary("\x10\x03", 2));
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount() < 2)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }
    if (checkIs7f(binRecive))
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    iRet = SafeLogin_Standard3(CBinary("\x27\x03", 2), 0xA1F45E);  // 07 E0 08 05 27 04 A1 F4 5E 00 00
    if (iRet == CErrorCode::EC_ECU_REFUSE)//否定应答
    {
        FxShowMessageBox(FxGetStdString(STD_TTL_MSG_INFORMATION), g_GetTxtStringFormHtml("0x0000B09F"), DF_MB_BACK);//安全访问失败
        return CErrorCode::EC_ECU_REFUSE;
    }
    else if (iRet < 0)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }
    m_pNetLayer->KeepLink(0); // 断开链路保持

    sendframe.SetSendFrame(CBinary("\x31\x01\x40\x9A", 4));  // 07 E8 08 04 71 01 40 9A 00 00 00
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount() == 0)
    {
        FxShowMessageBox(FxGetStdString(STD_INFO_COMMUNICATION_STATUS), FxGetStdString(STD_INFO_NO_COMMUNICATION_SYS), DF_MB_BACK, DT_LEFT);//测试仪与控制单元之间无法通信
        return CErrorCode::EC_TIME_OVER;
    }
    else if (binRecive.GetByteCount() < 0x04 || binRecive.GetByteAt(1) != 0x01 || binRecive.GetByteAt(2) != 0x40 || binRecive.GetByteAt(3) != 0x9A)
    {
        FxShowMessageBox(FxGetStdString(STD_INFO_COMMUNICATION_STATUS), g_GetTxtStringFormHtml("0x0000B21F"), DF_MB_OK, DT_LEFT);//失败    
        return CErrorCode::EC_TIME_OVER;
    }

    sendframe.SetSendFrame(CBinary("\x31\x03\x40\x9A", 4)); // 07 E8 08 06 71 03 40 9A 00 01 00
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount() == 0)
    {
        FxShowMessageBox(FxGetStdString(STD_INFO_COMMUNICATION_STATUS), FxGetStdString(STD_INFO_NO_COMMUNICATION_SYS), DF_MB_BACK, DT_LEFT);//测试仪与控制单元之间无法通信
        return CErrorCode::EC_TIME_OVER;
    }
    else if (binRecive.GetByteCount() < 6 || binRecive.GetByteAt(1) != 0x03 || binRecive.GetByteAt(2) != 0x40 ||
        binRecive.GetByteAt(3) != 0x9A || binRecive.GetByteAt(5) != 0x01)
    {
        FxShowMessageBox(FxGetStdString(STD_INFO_COMMUNICATION_STATUS), g_GetTxtStringFormHtml("0x0000B21F"), DF_MB_OK, DT_LEFT);//失败    
        return CErrorCode::EC_TIME_OVER;
    }
    else if (!(binRecive.GetByteAt(4) & 0xF0) || (binRecive.GetByteAt(4) & 0x0F))   // Req:07 E0 08 04 31 03 40 9A 00 00 00
                                                                                                                    // 141:07 E8 08 06 71 03 40 9A 10 01 00    高4位!=0，低4位=0
    {
        FxShowMessageBox(FxGetStdString(STD_INFO_COMMUNICATION_STATUS), g_GetTxtStringFormHtml("0x0000B21F"), DF_MB_OK, DT_LEFT);//失败    
        return CErrorCode::EC_TIME_OVER;
    }
    PleaseWait_xS_haveTTL(10000, g_GetTxtStringFormHtml("0x0000B09D"), g_GetTxtStringFormHtml("0x9002365C,0x90026F3D"));//例程完成-本应用程序将灌注系统，然后测试系统的压力
    SendDataComm(CBinary("\x10\x01", 2));

    //step03 本应用程序将灌注系统，然后测试系统的压力 - 完成
    FxShowMessageBox(g_GetTxtStringFormHtml("0x90026F3C"), g_GetTxtStringFormHtml("0x90026F3D") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002A16C")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OK, DT_LEFT);

    //step04 控制模块程序成功完成。
    FxShowMessageBox(g_GetTxtStringFormHtml("0x90026F3C"), g_GetTxtStringFormHtml("0x90026F3C") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000B0C7")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OK, DT_LEFT);

    //step05 点火关闭
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x90008087"));

    //step06 故障码
    iRet = ClearSysDTC_Programme_538(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x07E8);

    return iRet;


}



// 柴油废气油液喷射泵更换
W_ErrorCode CSeviceFunctionNew::Deol_reset_NEW_lansheng_L494_2016()
{
    W_ErrorCode iRet = CErrorCode::EC_SUCCESS;
    W_I16 iKey = 0;

    CSendFrame sendframe;
    CReceiveFrame rfRet;
    CBinary bReceiveData;

    int P_table[3][8] = { {0x29E041,0x774CA6,0xCF2678,0xBBD1C5,0x523EAE,0x85C378,0x2F1BC4,0x7F88BC},
    {0x6B29D4,0x2A7716,0xACF983,0xA4C7B9,0xB188CC,0x9E2437,0xC44FC1,0x74AB3C},
    {0xA1F45E,0x677588,0xEA6725,0xF1526F,0xC739EB,0xAFDDF2,0x7F14D1,0xDAA487} };

    // 本应用程序将重新设置柴油废气油液泵偏置校准
    iRet = FxShowMessageBox(g_GetTxtStringFormHtml("0x90026F2F"), g_GetTxtStringFormHtml("0x90026F32") + "\n" + "\n" + g_GetTxtStringFormHtml("0x90022F8D"), DF_MB_OKCANCEL, DT_LEFT);
    if (iRet == DF_IDCANCEL)
        return iRet;

    //step01 点火打开
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"), DF_MB_ANYKEYRETURN, DT_LEFT);


    //step02    本应用程序将重新设置柴油废气油液泵偏置校准
    iRet = FxShowMessageBox(g_GetTxtStringFormHtml("0x90026F2F"), g_GetTxtStringFormHtml("0x90026F32") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OKCANCEL, DT_LEFT);
    if (iRet == DF_IDCANCEL)
        return CErrorCode::EC_TIME_OVER;


    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通信中
    Sleep(800);

    EnterSystem(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x07E8);
    SendDataComm(CBinary("\x22\xf1\x03", 3));
    sendframe.SetSendFrame(CBinary("\x10\x03", 2));
    rfRet = SendDataComm(sendframe);
    bReceiveData = rfRet.GetFirst();
    if (bReceiveData.GetByteCount() < 2)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }
    if (checkIs7f(bReceiveData))
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    // 安全访问
    iRet = SafeLogin_L405_2014_Oil(CBinary("\x27\x03", 2), 0xE09A13, P_table, CBinary("\x3E\x80", 2));
    if (iRet == CErrorCode::EC_ECU_REFUSE)//否定应答
    {
        FxShowMessageBox(FxGetStdString(STD_TTL_MSG_INFORMATION), g_GetTxtStringFormHtml("0x0000B09F"), DF_MB_BACK);//安全访问失败
        return CErrorCode::EC_ECU_REFUSE;
    }
    else if (iRet < 0)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }


    sendframe.SetSendFrame(CBinary("\x31\x01\x04\x06\x11", 5));
    rfRet = SendDataComm(sendframe);
    bReceiveData = rfRet.GetFirst();
    if (bReceiveData.GetByteCount() < 0x04 || bReceiveData.GetByteAt(1) != 0x01 || bReceiveData.GetByteAt(2) != 0x04 || bReceiveData.GetByteAt(3) != 0x06)
    {
        FxShowMessageBox(FxGetStdString(STD_INFO_COMMUNICATION_STATUS), g_GetTxtStringFormHtml("0x0000B21F"), DF_MB_OK, DT_LEFT);//失败    
        return CErrorCode::EC_TIME_OVER;
    }

    m_pNetLayer->KeepLink(3000, CSendFrame(CBinary("\x3E\x80", 2)));    // 打开链路保持
    PleaseWait_xS_haveTTL(5000, g_GetTxtStringFormHtml("0x0000B09D"), g_GetTxtStringFormHtml("0x0000B09C"));//请等待
    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通信中
    Sleep(800);
    SendDataComm(CBinary("\x10\x01", 2));
    m_pNetLayer->KeepLink(0); // 断开链路保持


    //step02  校准完成
    iRet = FxShowMessageBox(g_GetTxtStringFormHtml("0x90026F2F"), g_GetTxtStringFormHtml("0x90026F32") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002A16C")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OK, DT_LEFT);


    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通信中
    Sleep(800);

    SendDataComm(CBinary("\x22\xf1\x03", 3));
    SendDataComm(CBinary("\x22\xf1\x03", 3));
    SendDataComm(CBinary("\x10\x03", 2));

    iRet = SafeLogin_L405_2014_Oil(CBinary("\x27\x03", 2), 0xE09A13, P_table, CBinary("\x3E\x80", 2));
    m_pNetLayer->KeepLink(0);//断开链路保持


    sendframe.SetSendFrame(CBinary("\x31\x01\x04\x06\x12", 5));
    rfRet = SendDataComm(sendframe);
    bReceiveData = rfRet.GetFirst();
    if (bReceiveData.GetByteCount() < 0x04 || bReceiveData.GetByteAt(1) != 0x01 || bReceiveData.GetByteAt(2) != 0x04 || bReceiveData.GetByteAt(3) != 0x06)
    {
        FxShowMessageBox(FxGetStdString(STD_INFO_COMMUNICATION_STATUS), g_GetTxtStringFormHtml("0x0000B21F"), DF_MB_OK, DT_LEFT);//失败    
        return CErrorCode::EC_TIME_OVER;
    }
    m_pNetLayer->KeepLink(3000, CSendFrame(CBinary("\x3E\x80", 2)));    // 打开链路保持
    PleaseWait_xS_haveTTL(8000, g_GetTxtStringFormHtml("0x0000B09D"), g_GetTxtStringFormHtml("0x0000B09C"));//请等待
    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通信中
    Sleep(800);
    SendDataComm(CBinary("\x10\x01", 2));
    m_pNetLayer->KeepLink(0);//断开链路保持


    //step02  读入完成
    iRet = FxShowMessageBox(g_GetTxtStringFormHtml("0x90026F2F"), g_GetTxtStringFormHtml("0x90026F30") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002A16C")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OK, DT_LEFT);

    //step04 点火关闭
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml(TXT_HTML_STATE_VALUE_IGNITION_OFF));

    //step05 故障码
    iRet = ClearSysDTC_Programme_538(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x07E8);

    return iRet;

}


// 重新设置选择性催化还原启动禁止
W_ErrorCode CSeviceFunctionNew::Reset_select_NEW_lansheng_L494_2016()
{
    W_ErrorCode iRet = CErrorCode::EC_SUCCESS;
    CSendFrame sendframe;
    CReceiveFrame rfRet;
    CBinary bReceiveData;
    W_I16 iKey = 0;
    int P_table[3][8] = { {0x29E041,0x774CA6,0xCF2678,0xBBD1C5,0x523EAE,0x85C378,0x2F1BC4,0x7F88BC},
    {0x6B29D4,0x2A7716,0xACF983,0xA4C7B9,0xB188CC,0x9E2437,0xC44FC1,0x74AB3C},
    {0xA1F45E,0x677588,0xEA6725,0xF1526F,0xC739EB,0xAFDDF2,0x7F14D1,0xDAA487} };

    // 当柴油废气油液箱完全变空时，此应用程序将重新设置启动禁止
    iRet = FxShowMessageBox(g_GetTxtStringFormHtml("0x9002718A"), g_GetTxtStringFormHtml("0x9002718D") + "\n" + "\n" + g_GetTxtStringFormHtml("0x90022F8D"), DF_MB_OKCANCEL, DT_LEFT);
    if (iRet == DF_IDCANCEL)
        return iRet;

    // 点火打开
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"), DF_MB_ANYKEYRETURN, DT_LEFT);


    /*    当柴油废气油液箱完全变空时，此应用程序将重新设置启动禁止，并允许发动机重新启用。 由于柴油废气油液耗尽，它还将重新设置里程计时器。*/
    iRet = FxShowMessageBox(g_GetTxtStringFormHtml("0x9002718A"), g_GetTxtStringFormHtml("0x9002718C") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OKCANCEL, DT_LEFT);
    if (iRet == DF_IDCANCEL)
        return iRet;


    //step8
    PleaseWait_xS_haveTTL(5000, g_GetTxtStringFormHtml("0x9002718C"), g_GetTxtStringFormHtml("0x0000005F"));//延时10s


    //链路：11位can125k
    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x07E8);
    SendDataComm(CBinary("\x22\xf1\x03", 3));
    sendframe.SetSendFrame(CBinary("\x10\x03", 2));
    rfRet = SendDataComm(sendframe);

    if (iRet)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    CBinary binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount() < 2)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    m_binRecive = CBinary(binRecive.GetBuffer() + 4, binRecive.GetByteCount() - 4);
    if (checkIs7f(m_binRecive))
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }


    iRet = SafeLogin_L405_2014_Oil(CBinary("\x27\x03", 2), 0xE09A13, P_table, CBinary("\x3E\x80", 2));

    CBinary cmd_reset = CBinary("\x31\x01\x04\x06\x0F", 5);

    sendframe.SetSendFrame(cmd_reset);
    rfRet = SendDataComm(sendframe);
    bReceiveData = rfRet.GetFirst();
    if (bReceiveData.GetByteCount() == 0)
    {
        sendframe.SetSendFrame(CBinary("\x10\x03", 2));
        rfRet = SendDataComm(sendframe);
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        FxShowMessageBox(FxGetStdString(STD_INFO_COMMUNICATION_STATUS), FxGetStdString(STD_INFO_NO_COMMUNICATION_SYS), DF_MB_BACK, DT_LEFT);//测试仪与控制单元之间无法通信
        return CErrorCode::EC_TIME_OVER;
    }
    else if (bReceiveData.GetByteCount() < 0x04 || bReceiveData.GetByteAt(1) != 0x01 || bReceiveData.GetByteAt(2) != 0x04 || bReceiveData.GetByteAt(3) != 0x06)
    {
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        FxShowMessageBox(FxGetStdString(STD_INFO_COMMUNICATION_STATUS), g_GetTxtStringFormHtml("0x0000B21F"), DF_MB_OK, DT_LEFT);//失败    
        return CErrorCode::EC_TIME_OVER;
    }
    m_pNetLayer->KeepLink(1000, CSendFrame(CBinary("\x3E\x80", 2)));
    PleaseWait_xS(5000);

    sendframe.SetSendFrame(CBinary("\x10\x01", 2));
    rfRet = SendDataComm(sendframe);
    m_pNetLayer->KeepLink(0);


    // 启动完成
    iRet = FxShowMessageBox(g_GetTxtStringFormHtml("0x9002718A"), g_GetTxtStringFormHtml("0x9002718C") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002A16C")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OK, DT_LEFT);
    if (iRet == DF_IDCANCEL)
    {
        return iRet;
    }


    // 由于柴油废气油液耗尽，此例行程序将重新设置里程计时器
    iRet = FxShowMessageBox(g_GetTxtStringFormHtml("0x9002718A"), g_GetTxtStringFormHtml("0x9002718B") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OK, DT_LEFT);
    if (iRet == DF_IDCANCEL)
    {
        return iRet;
    }

    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x07E8);
    SendDataComm(CBinary("\x22\xf1\x03", 3));
    sendframe.SetSendFrame(CBinary("\x10\x03", 2));
    rfRet = SendDataComm(sendframe);

    if (iRet)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount() < 2)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    m_binRecive = CBinary(binRecive.GetBuffer() + 4, binRecive.GetByteCount() - 4);
    if (checkIs7f(m_binRecive))
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }


    iRet = SafeLogin_L405_2014_Oil(CBinary("\x27\x03", 2), 0xE09A13, P_table, CBinary("\x3E\x80", 2));

    cmd_reset = CBinary("\x31\x01\x04\x06\x13", 5);

    sendframe.SetSendFrame(cmd_reset);
    rfRet = SendDataComm(sendframe);
    bReceiveData = rfRet.GetFirst();
    if (bReceiveData.GetByteCount() == 0)
    {
        sendframe.SetSendFrame(CBinary("\x10\x03", 2));
        rfRet = SendDataComm(sendframe);
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        FxShowMessageBox(FxGetStdString(STD_INFO_COMMUNICATION_STATUS), FxGetStdString(STD_INFO_NO_COMMUNICATION_SYS), DF_MB_BACK, DT_LEFT);//测试仪与控制单元之间无法通信
        return CErrorCode::EC_TIME_OVER;
    }
    else if (bReceiveData.GetByteCount() < 0x04 || bReceiveData.GetByteAt(1) != 0x01 || bReceiveData.GetByteAt(2) != 0x04 || bReceiveData.GetByteAt(3) != 0x06)
    {
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        FxShowMessageBox(FxGetStdString(STD_INFO_COMMUNICATION_STATUS), g_GetTxtStringFormHtml("0x0000B21F"), DF_MB_OK, DT_LEFT);//失败    
        return CErrorCode::EC_TIME_OVER;
    }
    m_pNetLayer->KeepLink(1000, CSendFrame(CBinary("\x3E\x80", 2)));
    PleaseWait_xS(5000, g_GetTxtStringFormHtml("0x9002718B"));

    sendframe.SetSendFrame(CBinary("\x10\x01", 2));
    rfRet = SendDataComm(sendframe);
    m_pNetLayer->KeepLink(0);


    // 设置完成
    iRet = FxShowMessageBox(g_GetTxtStringFormHtml("0x9002718A"), g_GetTxtStringFormHtml("0x9002718B") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002A16C")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OKCANCEL, DT_LEFT);
    if (iRet == DF_IDCANCEL)
    {
        return iRet;
    }
    //step04 点火关闭
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml(TXT_HTML_STATE_VALUE_IGNITION_OFF));


    iRet = ClearSysDTC_Mode_0722(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x07E8);


    return iRet;


}



// 重新设置选择性催化还原质量监测器
W_ErrorCode CSeviceFunctionNew::Reset_select_quality_NEW_lansheng_L494_2016()
{
    W_ErrorCode iRet = CErrorCode::EC_SUCCESS;
    CSendFrame sendframe;
    CReceiveFrame rfRet;
    CBinary bReceiveData;
    W_I16 iKey = 0;
    int P_table[3][8] = { {0x29E041,0x774CA6,0xCF2678,0xBBD1C5,0x523EAE,0x85C378,0x2F1BC4,0x7F88BC},
    {0x6B29D4,0x2A7716,0xACF983,0xA4C7B9,0xB188CC,0x9E2437,0xC44FC1,0x74AB3C},
    {0xA1F45E,0x677588,0xEA6725,0xF1526F,0xC739EB,0xAFDDF2,0x7F14D1,0xDAA487} };

    // 点火打开
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"), DF_MB_ANYKEYRETURN, DT_LEFT);


    // 重新设置选择性催化还原质量监测器
    iRet = FxShowMessageBox(g_GetTxtStringFormHtml("0x90027188"), g_GetTxtStringFormHtml("0x90027188") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OKCANCEL, DT_LEFT);
    if (iRet == DF_IDCANCEL)
        return iRet;

    //step8
    PleaseWait_xS_haveTTL(5000, g_GetTxtStringFormHtml("0x90027189"), g_GetTxtStringFormHtml("0x0000005F"));//延时10s


    //链路：11位can125k
    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x07E8);
    SendDataComm(CBinary("\x22\xf1\x03", 3));
    sendframe.SetSendFrame(CBinary("\x10\x03", 2));
    rfRet = SendDataComm(sendframe);

    if (iRet)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    CBinary binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount() < 2)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    m_binRecive = CBinary(binRecive.GetBuffer() + 4, binRecive.GetByteCount() - 4);
    if (checkIs7f(m_binRecive))
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }


    iRet = SafeLogin_L405_2014_Oil(CBinary("\x27\x03", 2), 0xE09A13, P_table, CBinary("\x3E\x80", 2));

    CBinary cmd_reset = CBinary("\x31\x01\x04\x26\x2C", 5);

    sendframe.SetSendFrame(cmd_reset);
    rfRet = SendDataComm(sendframe);
    bReceiveData = rfRet.GetFirst();
    if (bReceiveData.GetByteCount() == 0)
    {
        sendframe.SetSendFrame(CBinary("\x10\x03", 2));
        rfRet = SendDataComm(sendframe);
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        FxShowMessageBox(FxGetStdString(STD_INFO_COMMUNICATION_STATUS), FxGetStdString(STD_INFO_NO_COMMUNICATION_SYS), DF_MB_BACK, DT_LEFT);//测试仪与控制单元之间无法通信
        return CErrorCode::EC_TIME_OVER;
    }
    else if (bReceiveData.GetByteCount() < 0x04 || bReceiveData.GetByteAt(1) != 0x01 || bReceiveData.GetByteAt(2) != 0x04 || bReceiveData.GetByteAt(3) != 0x26)
    {
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        FxShowMessageBox(FxGetStdString(STD_INFO_COMMUNICATION_STATUS), g_GetTxtStringFormHtml("0x0000B21F"), DF_MB_OK, DT_LEFT);//失败    
        return CErrorCode::EC_TIME_OVER;
    }
    m_pNetLayer->KeepLink(1000, CSendFrame(CBinary("\x3E\x80", 2)));
    PleaseWait_xS(5000);

    sendframe.SetSendFrame(CBinary("\x10\x01", 2));
    rfRet = SendDataComm(sendframe);
    m_pNetLayer->KeepLink(0);


    // 选择完成
    iRet = FxShowMessageBox(g_GetTxtStringFormHtml("0x90027188"), g_GetTxtStringFormHtml("0x90027188") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002A16C")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OK, DT_LEFT);
    if (iRet == DF_IDCANCEL)
    {
        return iRet;
    }

    //step04 点火关闭
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml(TXT_HTML_STATE_VALUE_IGNITION_OFF));

    PleaseWait_xS(5000);

    iRet = ClearSysDTC_Mode_0722(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x07E8);


    return iRet;

}



// 发动机控制模块低压EGR自适应值清除
W_ErrorCode CSeviceFunctionNew::EGR_delete_NEW_lansheng_L494_2016()
{
    W_ErrorCode iRet = CErrorCode::EC_SUCCESS;
    CSendFrame sendframe;
    CReceiveFrame rfRet;
    CBinary bReceiveData;
    W_I16 iKey = 0;
    int P_table[3][8] = { {0x29E041,0x774CA6,0xCF2678,0xBBD1C5,0x523EAE,0x85C378,0x2F1BC4,0x7F88BC},
    {0x6B29D4,0x2A7716,0xACF983,0xA4C7B9,0xB188CC,0x9E2437,0xC44FC1,0x74AB3C},
    {0xA1F45E,0x677588,0xEA6725,0xF1526F,0xC739EB,0xAFDDF2,0x7F14D1,0xDAA487} };

    // 点火打开
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"), DF_MB_ANYKEYRETURN, DT_LEFT);


    // 此例行程序将清除低压 EGR 自适应值
    iRet = FxShowMessageBox(g_GetTxtStringFormHtml("0x9002712B"), g_GetTxtStringFormHtml("0x9002712C") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OKCANCEL, DT_LEFT);
    if (iRet == DF_IDCANCEL)
        return iRet;

    //step8
    PleaseWait_xS(5000, g_GetTxtStringFormHtml("0x9002712C"));//延时10s


    //链路：11位can125k
    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x07E8);
    SendDataComm(CBinary("\x22\xf1\x03", 3));
    sendframe.SetSendFrame(CBinary("\x10\x03", 2));
    rfRet = SendDataComm(sendframe);

    if (iRet)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    CBinary binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount() < 2)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    m_binRecive = CBinary(binRecive.GetBuffer() + 4, binRecive.GetByteCount() - 4);
    if (checkIs7f(m_binRecive))
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }


    iRet = SafeLogin_L405_2014_Oil(CBinary("\x27\x03", 2), 0xE09A13, P_table, CBinary("\x3E\x80", 2));

    CBinary cmd_reset = CBinary("\x31\x01\x04\x06\x0C", 5);

    sendframe.SetSendFrame(cmd_reset);
    rfRet = SendDataComm(sendframe);
    bReceiveData = rfRet.GetFirst();
    if (bReceiveData.GetByteCount() == 0)
    {
        sendframe.SetSendFrame(CBinary("\x10\x03", 2));
        rfRet = SendDataComm(sendframe);
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        FxShowMessageBox(FxGetStdString(STD_INFO_COMMUNICATION_STATUS), FxGetStdString(STD_INFO_NO_COMMUNICATION_SYS), DF_MB_BACK, DT_LEFT);//测试仪与控制单元之间无法通信
        return CErrorCode::EC_TIME_OVER;
    }
    else if (bReceiveData.GetByteCount() < 0x04 || bReceiveData.GetByteAt(1) != 0x01 || bReceiveData.GetByteAt(2) != 0x04 || bReceiveData.GetByteAt(3) != 0x06)
    {
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        FxShowMessageBox(FxGetStdString(STD_INFO_COMMUNICATION_STATUS), g_GetTxtStringFormHtml("0x0000B21F"), DF_MB_OK, DT_LEFT);//失败    
        return CErrorCode::EC_TIME_OVER;
    }
    m_pNetLayer->KeepLink(1000, CSendFrame(CBinary("\x3E\x80", 2)));
    PleaseWait_xS(5000);

    sendframe.SetSendFrame(CBinary("\x10\x01", 2));
    rfRet = SendDataComm(sendframe);
    m_pNetLayer->KeepLink(0);


    // 选择完成
    iRet = FxShowMessageBox(g_GetTxtStringFormHtml("0x9002712B"), g_GetTxtStringFormHtml("0x9002712C") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002A16C")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OK, DT_LEFT);
    if (iRet == DF_IDCANCEL)
    {
        return iRet;
    }

    //step04 点火关闭
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml(TXT_HTML_STATE_VALUE_IGNITION_OFF));

    PleaseWait_xS(5000);

    iRet = ClearSysDTC_Mode_0722(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x07E8);


    return iRet;

}


// 发动机控制模块质量空气流量自适应值清除
W_ErrorCode CSeviceFunctionNew::EGR_air_quality_NEW_lansheng_L494_2016()
{
    W_ErrorCode iRet = CErrorCode::EC_SUCCESS;
    CSendFrame sendframe;
    CReceiveFrame rfRet;
    CBinary bReceiveData;
    W_I16 iKey = 0;
    int P_table[3][8] = { {0x29E041,0x774CA6,0xCF2678,0xBBD1C5,0x523EAE,0x85C378,0x2F1BC4,0x7F88BC},
    {0x6B29D4,0x2A7716,0xACF983,0xA4C7B9,0xB188CC,0x9E2437,0xC44FC1,0x74AB3C},
    {0xA1F45E,0x677588,0xEA6725,0xF1526F,0xC739EB,0xAFDDF2,0x7F14D1,0xDAA487} };

    // 点火打开
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"), DF_MB_ANYKEYRETURN, DT_LEFT);


    // 此例行程序将清除质量空气流量自适应值
    iRet = FxShowMessageBox(g_GetTxtStringFormHtml("0x9002712D"), g_GetTxtStringFormHtml("0x9002712E") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OKCANCEL, DT_LEFT);
    if (iRet == DF_IDCANCEL)
        return iRet;

    //step8
    PleaseWait_xS(5000, g_GetTxtStringFormHtml("0x9002712E"));//延时10s


    //链路：11位can125k
    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x07E8);
    SendDataComm(CBinary("\x22\xf1\x03", 3));
    sendframe.SetSendFrame(CBinary("\x10\x03", 2));
    rfRet = SendDataComm(sendframe);

    if (iRet)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    CBinary binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount() < 2)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    m_binRecive = CBinary(binRecive.GetBuffer() + 4, binRecive.GetByteCount() - 4);
    if (checkIs7f(m_binRecive))
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }


    iRet = SafeLogin_L405_2014_Oil(CBinary("\x27\x03", 2), 0xE09A13, P_table, CBinary("\x3E\x80", 2));

    CBinary cmd_reset = CBinary("\x31\x01\x04\x06\x0E", 5);

    sendframe.SetSendFrame(cmd_reset);
    rfRet = SendDataComm(sendframe);
    bReceiveData = rfRet.GetFirst();
    if (bReceiveData.GetByteCount() == 0)
    {
        sendframe.SetSendFrame(CBinary("\x10\x03", 2));
        rfRet = SendDataComm(sendframe);
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        FxShowMessageBox(FxGetStdString(STD_INFO_COMMUNICATION_STATUS), FxGetStdString(STD_INFO_NO_COMMUNICATION_SYS), DF_MB_BACK, DT_LEFT);//测试仪与控制单元之间无法通信
        return CErrorCode::EC_TIME_OVER;
    }
    else if (bReceiveData.GetByteCount() < 0x04 || bReceiveData.GetByteAt(1) != 0x01 || bReceiveData.GetByteAt(2) != 0x04 || bReceiveData.GetByteAt(3) != 0x06)
    {
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        FxShowMessageBox(FxGetStdString(STD_INFO_COMMUNICATION_STATUS), g_GetTxtStringFormHtml("0x0000B21F"), DF_MB_OK, DT_LEFT);//失败    
        return CErrorCode::EC_TIME_OVER;
    }
    m_pNetLayer->KeepLink(1000, CSendFrame(CBinary("\x3E\x80", 2)));
    PleaseWait_xS(5000);

    sendframe.SetSendFrame(CBinary("\x10\x01", 2));
    rfRet = SendDataComm(sendframe);
    m_pNetLayer->KeepLink(0);


    // 清除完成
    iRet = FxShowMessageBox(g_GetTxtStringFormHtml("0x9002712D"), g_GetTxtStringFormHtml("0x9002712E") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002A16C")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OK, DT_LEFT);
    if (iRet == DF_IDCANCEL)
    {
        return iRet;
    }

    //step04 点火关闭
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml(TXT_HTML_STATE_VALUE_IGNITION_OFF));

    PleaseWait_xS(5000);

    iRet = ClearSysDTC_Mode_0722(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x07E8);


    return iRet;

}




// 柴油废气油箱液位传感器更换
W_ErrorCode CSeviceFunctionNew::Reset_oil_recorder_NEW_lansheng_L494_2016()
{
    W_ErrorCode iRet = CErrorCode::EC_SUCCESS;
    CSendFrame sendframe;
    CReceiveFrame rfRet;
    CBinary bReceiveData;
    W_I16 iKey = 0;
    int P_table[3][8] = { {0x29E041,0x774CA6,0xCF2678,0xBBD1C5,0x523EAE,0x85C378,0x2F1BC4,0x7F88BC},
    {0x6B29D4,0x2A7716,0xACF983,0xA4C7B9,0xB188CC,0x9E2437,0xC44FC1,0x74AB3C},
    {0xA1F45E,0x677588,0xEA6725,0xF1526F,0xC739EB,0xAFDDF2,0x7F14D1,0xDAA487} };

    // 点火打开
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"), DF_MB_ANYKEYRETURN, DT_LEFT);


    // 柴油废气油液箱液位传感器更换
    iRet = FxShowMessageBox(g_GetTxtStringFormHtml("0x90026F49"), g_GetTxtStringFormHtml("0x90026F4A") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OKCANCEL, DT_LEFT);
    if (iRet == DF_IDCANCEL)
        return iRet;

    //step8
    PleaseWait_xS(5000, g_GetTxtStringFormHtml("0x90026F4A"));//延时10s


    //链路：11位can125k
    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x07E8);
    SendDataComm(CBinary("\x22\xf1\x03", 3));
    sendframe.SetSendFrame(CBinary("\x10\x03", 2));
    rfRet = SendDataComm(sendframe);

    if (iRet)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    CBinary binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount() < 2)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    m_binRecive = CBinary(binRecive.GetBuffer() + 4, binRecive.GetByteCount() - 4);
    if (checkIs7f(m_binRecive))
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }


    iRet = SafeLogin_L405_2014_Oil(CBinary("\x27\x03", 2), 0xE09A13, P_table, CBinary("\x3E\x80", 2));

    CBinary cmd_reset = CBinary("\x31\x01\x04\x06\x10", 5);

    sendframe.SetSendFrame(cmd_reset);
    rfRet = SendDataComm(sendframe);
    bReceiveData = rfRet.GetFirst();
    if (bReceiveData.GetByteCount() == 0)
    {
        sendframe.SetSendFrame(CBinary("\x10\x03", 2));
        rfRet = SendDataComm(sendframe);
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        FxShowMessageBox(FxGetStdString(STD_INFO_COMMUNICATION_STATUS), FxGetStdString(STD_INFO_NO_COMMUNICATION_SYS), DF_MB_BACK, DT_LEFT);//测试仪与控制单元之间无法通信
        return CErrorCode::EC_TIME_OVER;
    }
    else if (bReceiveData.GetByteCount() < 0x04 || bReceiveData.GetByteAt(1) != 0x01 || bReceiveData.GetByteAt(2) != 0x04 || bReceiveData.GetByteAt(3) != 0x06)
    {
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        FxShowMessageBox(FxGetStdString(STD_INFO_COMMUNICATION_STATUS), g_GetTxtStringFormHtml("0x0000B21F"), DF_MB_OK, DT_LEFT);//失败    
        return CErrorCode::EC_TIME_OVER;
    }
    m_pNetLayer->KeepLink(1000, CSendFrame(CBinary("\x3E\x80", 2)));
    PleaseWait_xS(5000);

    sendframe.SetSendFrame(CBinary("\x10\x01", 2));
    rfRet = SendDataComm(sendframe);
    m_pNetLayer->KeepLink(0);


    // 更换完成
    iRet = FxShowMessageBox(g_GetTxtStringFormHtml("0x90026F49"), g_GetTxtStringFormHtml("0x90026F4A") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002A16C")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OK, DT_LEFT);
    if (iRet == DF_IDCANCEL)
    {
        return iRet;
    }

    //step04 点火关闭
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml(TXT_HTML_STATE_VALUE_IGNITION_OFF));

    PleaseWait_xS(5000);

    iRet = ClearSysDTC_Mode_0722(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x07E8);


    return iRet;


}



// 发动机控制模块重新设置曲轴箱压力 传感器
W_ErrorCode CSeviceFunctionNew::Reset_box_NEW_lansheng_L494_2016()
{
    W_ErrorCode iRet = CErrorCode::EC_SUCCESS;
    CSendFrame sendframe;
    CReceiveFrame rfRet;
    CBinary bReceiveData;
    W_I16 iKey = 0;
    int P_table[3][8] = { {0x29E041,0x774CA6,0xCF2678,0xBBD1C5,0x523EAE,0x85C378,0x2F1BC4,0x7F88BC},
    {0x6B29D4,0x2A7716,0xACF983,0xA4C7B9,0xB188CC,0x9E2437,0xC44FC1,0x74AB3C},
    {0xA1F45E,0x677588,0xEA6725,0xF1526F,0xC739EB,0xAFDDF2,0x7F14D1,0xDAA487} };

    // 点火打开
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"), DF_MB_ANYKEYRETURN, DT_LEFT);


    // 此例行程序将重新设置曲轴箱压力传感器
    iRet = FxShowMessageBox(g_GetTxtStringFormHtml("0x90027127"), g_GetTxtStringFormHtml("0x90027128") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OKCANCEL, DT_LEFT);
    if (iRet == DF_IDCANCEL)
        return iRet;

    //step8
    PleaseWait_xS(5000, g_GetTxtStringFormHtml("0x90027128"));//延时10s


    //链路：11位can125k
    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x07E8);
    SendDataComm(CBinary("\x22\xf1\x03", 3));
    sendframe.SetSendFrame(CBinary("\x10\x03", 2));
    rfRet = SendDataComm(sendframe);

    if (iRet)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    CBinary binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount() < 2)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    m_binRecive = CBinary(binRecive.GetBuffer() + 4, binRecive.GetByteCount() - 4);
    if (checkIs7f(m_binRecive))
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }


    iRet = SafeLogin_L405_2014_Oil(CBinary("\x27\x03", 2), 0xE09A13, P_table, CBinary("\x3E\x80", 2));

    CBinary cmd_reset = CBinary("\x31\x01\x04\x06\x14", 5);

    sendframe.SetSendFrame(cmd_reset);
    rfRet = SendDataComm(sendframe);
    bReceiveData = rfRet.GetFirst();
    if (bReceiveData.GetByteCount() == 0)
    {
        sendframe.SetSendFrame(CBinary("\x10\x03", 2));
        rfRet = SendDataComm(sendframe);
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        FxShowMessageBox(FxGetStdString(STD_INFO_COMMUNICATION_STATUS), FxGetStdString(STD_INFO_NO_COMMUNICATION_SYS), DF_MB_BACK, DT_LEFT);//测试仪与控制单元之间无法通信
        return CErrorCode::EC_TIME_OVER;
    }
    else if (bReceiveData.GetByteCount() < 0x04 || bReceiveData.GetByteAt(1) != 0x01 || bReceiveData.GetByteAt(2) != 0x04 || bReceiveData.GetByteAt(3) != 0x06)
    {
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        FxShowMessageBox(FxGetStdString(STD_INFO_COMMUNICATION_STATUS), g_GetTxtStringFormHtml("0x0000B21F"), DF_MB_OK, DT_LEFT);//失败    
        return CErrorCode::EC_TIME_OVER;
    }
    m_pNetLayer->KeepLink(1000, CSendFrame(CBinary("\x3E\x80", 2)));
    PleaseWait_xS(5000);

    sendframe.SetSendFrame(CBinary("\x10\x01", 2));
    rfRet = SendDataComm(sendframe);
    m_pNetLayer->KeepLink(0);


    // 设置完成
    iRet = FxShowMessageBox(g_GetTxtStringFormHtml("0x90027127"), g_GetTxtStringFormHtml("0x90027128") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002A16C")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OK, DT_LEFT);
    if (iRet == DF_IDCANCEL)
    {
        return iRet;
    }

    //step04 点火关闭
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml(TXT_HTML_STATE_VALUE_IGNITION_OFF));

    PleaseWait_xS(5000);

    iRet = ClearSysDTC_Mode_0722(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x07E8);


    return iRet;



}



// 启用/禁用电热塞
W_ErrorCode CSeviceFunctionNew::Supply_elc_NEW_lansheng_L494_2016()
{
    W_ErrorCode iRet = 0;
    W_I16 iKey = 0;

    CSendFrame sendframe;
    CReceiveFrame rfRet;
    CBinary supply;
    CBinary binRecive;

    // 点火打开
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"), DF_MB_ANYKEYRETURN, DT_LEFT);

    CMenuCtrl uiMenu;
    while (1)
    {
        uiMenu.InitCtrl(g_GetTxtStringFormHtml("0x90026FA5"));// 启用/禁用电热塞
        uiMenu.AddOneItem(g_GetTxtStringFormHtml("0x9002D545"));// 启用
        uiMenu.AddOneItem(g_GetTxtStringFormHtml("0x9002D544"));// 禁用
        W_I16 selectmenu = uiMenu.ShowCtrl();
        if (selectmenu == -1)
        {
            return 0;
        }
        else if (selectmenu == 0)
        {
            supply = CBinary("\x31\x01\x40\x91\x00", 5);  // 启用
            // 启用电热塞
            FxShowMessageBox(g_GetTxtStringFormHtml("0x90026FA5"), g_GetTxtStringFormHtml("0x9000220B") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002D545")
                + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OKCANCEL, DT_LEFT);
            break;
        }
        else if (selectmenu == 1)
        {
            supply = CBinary("\x31\x01\x40\x91\x01", 5); // 禁用
            // 禁用电热塞
            FxShowMessageBox(g_GetTxtStringFormHtml("0x90026FA5"), g_GetTxtStringFormHtml("0x9000220B") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002D544")
                + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OKCANCEL, DT_LEFT);
            break;
        }
    }

    PleaseWait_xS(5000, g_GetTxtStringFormHtml("0x9000220B"));

    EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x26\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x072E);
    SendDataComm(CBinary("\x22\xf1\x03", 3));
    sendframe.SetSendFrame(CBinary("\x10\x03", 2));
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    if (checkIs7f(binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return CErrorCode::EC_ECU_REFUSE;
    }


    m_pNetLayer->KeepLink(0); // 断开链路

    sendframe.SetSendFrame(supply);
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount() < 0x05 || binRecive[0] != 0x71 || binRecive[1] != 0x01 || binRecive[2] != 0x40 || binRecive[3] != 0x91)
    {
        if (m_binRecive.GetByteCount() == 0)
        {
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_TIME_OVER;
        }
        if (checkIs7f(m_binRecive))
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
            return CErrorCode::EC_ECU_REFUSE;
        }
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B916"), g_GetTxtStringFormHtml("0x0000B0AC"));//测试失败
        return CErrorCode::EC_TIME_OVER;
    }
    m_pNetLayer->KeepLink(3000, CSendFrame(CBinary("\x3E\x80", 2)));    // 打开链路
    PleaseWait_xS_haveTTL(2000, g_GetTxtStringFormHtml("0x0000B09D"), g_GetTxtStringFormHtml("0x0000B916"));//执行诊断命令-请等待
    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通信中
    Sleep(800);
    SendDataComm(CBinary("\x10\x01", 2));
    m_pNetLayer->KeepLink(0); // 断开链路

    // 启用完成
    FxShowMessageBox(g_GetTxtStringFormHtml("0x90026FA5"), g_GetTxtStringFormHtml("0x9000220B") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002A16C")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OK, DT_LEFT);

    // 点火关闭
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));

    // 故障码
    iRet = ClearSysDTC_Programme_538(PTL_CAN_11_500K, CBinary("\x07\x26\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x072E);

    return iRet;


}



// 此例程将重置飞行记录器数据
W_ErrorCode CSeviceFunctionNew::Fly_reset_NEW_lansheng_L494_2016()
{
    W_ErrorCode iRet = 0;
    W_I16 iKey = 0;

    CSendFrame sendframe;
    CReceiveFrame rfRet;
    CBinary supply;
    CBinary binRecive;

    int P_table[3][8] = { {0x29E041,0x774CA6,0xCF2678,0xBBD1C5,0x523EAE,0x85C378,0x2F1BC4,0x7F88BC},
    {0x6B29D4,0x2A7716,0xACF983,0xA4C7B9,0xB188CC,0x9E2437,0xC44FC1,0x74AB3C},
    {0xA1F45E,0x677588,0xEA6725,0xF1526F,0xC739EB,0xAFDDF2,0x7F14D1,0xDAA487} };

    // 点火打开
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"), DF_MB_ANYKEYRETURN, DT_LEFT);

    // 点击继续
    iRet = FxShowMessageBox(g_GetTxtStringFormHtml("0x90026FAC"), g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OKCANCEL, DT_LEFT);
    if (iRet == DF_IDCANCEL)
    {
        return iRet;
    }

    PleaseWait_xS(5000, g_GetTxtStringFormHtml("0x90027AFF"));

    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通信中
    Sleep(800);

    EnterSystem(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x07E8);
    SendDataComm(CBinary("\x22\xf1\x03", 3));
    sendframe.SetSendFrame(CBinary("\x10\x03", 2));
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    if (checkIs7f(binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return CErrorCode::EC_ECU_REFUSE;
    }

    //安全访问    
    iRet = SafeLogin_L405_2014_Oil(CBinary("\x27\x03", 2), 0xE09A13, P_table, CBinary("\x3E\x80", 2));//A1 F4 5E

    if (iRet == CErrorCode::EC_ECU_REFUSE)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000B09F"), DF_MB_BACK);//安全访问失败
        return CErrorCode::EC_ECU_REFUSE;
    }
    else if (iRet < 0)
    {
        FxShowMessageBox(FxGetStdString(STD_INFO_COMMUNICATION_STATUS), FxGetStdString(STD_INFO_NO_COMMUNICATION_SYS), DF_MB_OK, DT_LEFT);//测试仪与控制单元之间无法通信
        return CErrorCode::EC_TIME_OVER;
    }

    sendframe.SetSendFrame(CBinary("\x31\x01\x04\x03\x01", 5));
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount() < 5 || binRecive[0] != 0x71 || binRecive[1] != 0x01 || binRecive[2] != 0x04 || binRecive[3] != 0x03 || binRecive[4] != 0x01)
    {
        if (!binRecive.GetByteCount())
        {
            FxShowMessageBox(FxGetStdString(STD_INFO_COMMUNICATION_STATUS), FxGetStdString(STD_INFO_NO_COMMUNICATION_SYS), DF_MB_OK, DT_LEFT);//测试仪与控制单元之间无法通信
            return CErrorCode::EC_TIME_OVER;
        }
        if (checkIs7f(binRecive))
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
            return CErrorCode::EC_ECU_REFUSE;
        }
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B8F0"), g_GetTxtStringFormHtml("0x0000B21F"));
        return CErrorCode::EC_TIME_OVER;
    }
    m_pNetLayer->KeepLink(3000, CSendFrame(CBinary("\x3E\x80", 2)));    // 打开链路
    PleaseWait_xS_haveTTL(5000, g_GetTxtStringFormHtml("0x0000B09D"), g_GetTxtStringFormHtml("0x0000B8F0"));//启动柴油机维修功能-请等待
    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通信中
    Sleep(800);
    SendDataComm(CBinary("\x10\x01", 2));
    m_pNetLayer->KeepLink(0); // 断开链路


    // 完成
    FxShowMessageBox(g_GetTxtStringFormHtml("0x90026FAC"), g_GetTxtStringFormHtml("0x9002A16C") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OK, DT_LEFT);


    //step04 点火关闭
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml(TXT_HTML_STATE_VALUE_IGNITION_OFF));

    iRet = ClearSysDTC_Mode_0722(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x07E8);

    return iRet;

}




// 排气门自适应
W_ErrorCode CSeviceFunctionNew::Exhaust_Valve_Adaptive_NEW_lansheng_L494_2016()
{
    W_ErrorCode iRet = 0;
    W_I16 iKey = 0;

    CSendFrame sendframe;
    CReceiveFrame rfRet;
    CBinary supply;
    CBinary binRecive;

    int P_table[3][8] = { {0x29E041,0x774CA6,0xCF2678,0xBBD1C5,0x523EAE,0x85C378,0x2F1BC4,0x7F88BC},
    {0x6B29D4,0x2A7716,0xACF983,0xA4C7B9,0xB188CC,0x9E2437,0xC44FC1,0x74AB3C},
    {0xA1F45E,0x677588,0xEA6725,0xF1526F,0xC739EB,0xAFDDF2,0x7F14D1,0xDAA487} };

    // 点火打开
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"), DF_MB_ANYKEYRETURN, DT_LEFT);

    // 此例行程序将重置排气门自适应
    iRet = FxShowMessageBox(g_GetTxtStringFormHtml("0x90026FB6"), g_GetTxtStringFormHtml("0x90026FB7") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OKCANCEL, DT_LEFT);
    if (iRet == DF_IDCANCEL)
    {
        return iRet;
    }

    PleaseWait_xS(5000, g_GetTxtStringFormHtml("0x90026FB7"));

    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通信中
    Sleep(800);

    EnterSystem(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x07E8);
    SendDataComm(CBinary("\x22\xf1\x03", 3));
    sendframe.SetSendFrame(CBinary("\x10\x03", 2));
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    if (checkIs7f(binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return CErrorCode::EC_ECU_REFUSE;
    }

    //安全访问    
    iRet = SafeLogin_L405_2014_Oil(CBinary("\x27\x03", 2), 0xE09A13, P_table, CBinary("\x3E\x80", 2));//A1 F4 5E

    if (iRet == CErrorCode::EC_ECU_REFUSE)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000B09F"), DF_MB_BACK);//安全访问失败
        return CErrorCode::EC_ECU_REFUSE;
    }
    else if (iRet < 0)
    {
        FxShowMessageBox(FxGetStdString(STD_INFO_COMMUNICATION_STATUS), FxGetStdString(STD_INFO_NO_COMMUNICATION_SYS), DF_MB_OK, DT_LEFT);//测试仪与控制单元之间无法通信
        return CErrorCode::EC_TIME_OVER;
    }

    sendframe.SetSendFrame(CBinary("\x31\x01\x04\x06\x0D", 5));
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount() < 5 || binRecive[0] != 0x71 || binRecive[1] != 0x01 || binRecive[2] != 0x04 || binRecive[3] != 0x06 || binRecive[4] != 0x0D)
    {
        if (!binRecive.GetByteCount())
        {
            FxShowMessageBox(FxGetStdString(STD_INFO_COMMUNICATION_STATUS), FxGetStdString(STD_INFO_NO_COMMUNICATION_SYS), DF_MB_OK, DT_LEFT);//测试仪与控制单元之间无法通信
            return CErrorCode::EC_TIME_OVER;
        }
        if (checkIs7f(binRecive))
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
            return CErrorCode::EC_ECU_REFUSE;
        }
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B8F0"), g_GetTxtStringFormHtml("0x0000B21F"));
        return CErrorCode::EC_TIME_OVER;
    }
    m_pNetLayer->KeepLink(3000, CSendFrame(CBinary("\x3E\x80", 2)));    // 打开链路
    PleaseWait_xS_haveTTL(5000, g_GetTxtStringFormHtml("0x0000B09D"), g_GetTxtStringFormHtml("0x0000B8F0"));//启动柴油机维修功能-请等待
    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通信中
    Sleep(800);
    SendDataComm(CBinary("\x10\x01", 2));
    m_pNetLayer->KeepLink(0); // 断开链路


    // 此例行程序将重置排气门自适应
    FxShowMessageBox(g_GetTxtStringFormHtml("0x90026FB6"), g_GetTxtStringFormHtml("0x90026FB7") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002A16C")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OK, DT_LEFT);


    //step04 点火关闭
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml(TXT_HTML_STATE_VALUE_IGNITION_OFF));

    iRet = ClearSysDTC_Mode_0722(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x07E8);

    return iRet;



}


// 主动式排气系统测试
W_ErrorCode CSeviceFunctionNew::Active_system_test_NEW_lansheng_L494_2016()
{
    W_ErrorCode iRet = CErrorCode::EC_SUCCESS;

    CSendFrame sendframe;
    CReceiveFrame rfRet;
    CVehicleComm ecuInter;
    CBinary binRecive;

    // 此应用程序将检查排气阀执行器的功能，该测试要求运转发动机
    iRet = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BDFB"), g_GetTxtStringFormHtml("0x0000BDEB") + "\n" + "\n" + g_GetTxtStringFormHtml("0x90022F8D"), DF_MB_OKCANCEL, DT_LEFT);
    if (DF_IDCANCEL == iRet)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000BE88"));//操作人员已中止了此应用程序
        return iRet;
    }

    //请确保发动机机盖已关闭。本程序将在测试期间控制发动机转速
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BDFB"), g_GetTxtStringFormHtml("0x0000BDEC"), DF_MB_OK, DT_LEFT);

    //起动发动机
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BDFB"), g_GetTxtStringFormHtml("0x0000B149"), DF_MB_OK, DT_LEFT);

    EnterSystem(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x07E8);
    sendframe.SetSendFrame(CBinary("\x10\x03", 2));
    rfRet = SendDataComm(sendframe);
    if (rfRet.GetByteCount() == 0)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }
    if (checkIs7f(rfRet))
    {
        FxShowMessageBox(FxGetStdString(STD_TTL_MSG_INFORMATION), g_GetTxtStringFormHtml("0x0000006A"), DF_MB_BACK);
        return iRet;
    }
    iRet = SafeLogin_Standard3(CBinary("\x27\x03", 2), 0x215DDA);  // 21 5D DA
    m_pNetLayer->KeepLink(1000, CSendFrame(CBinary("\x3E\x80", 2)));//链路保持
    if (iRet == CErrorCode::EC_ECU_REFUSE)
    {
        FxShowMessageBox(FxGetStdString(STD_TTL_MSG_INFORMATION), g_GetTxtStringFormHtml("0x0000B09F"), DF_MB_BACK);
        return CErrorCode::EC_ECU_REFUSE;
    }
    else if (iRet < 0)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    sendframe.SetSendFrame(CBinary("\x31\x01\x40\x04\x17\x70", 6));
    rfRet = SendDataComm(sendframe);
    m_binRecive = rfRet.GetFirst();
    if (m_binRecive.GetByteCount() == 0)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }
    if (checkIs7f(m_binRecive))
    {
        FxShowMessageBox(FxGetStdString(STD_TTL_MSG_INFORMATION), g_GetTxtStringFormHtml("0x0000006A"), DF_MB_BACK);
        return iRet;
    }
    if (m_binRecive.GetByteCount() < 4 || (m_binRecive[0] != 0x71 || m_binRecive[1] != 0x01 || m_binRecive[2] != 0x40 || m_binRecive[3] != 0x04))
    {
        SendDataComm(CBinary("\x10\x01", 2));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B21F"), DF_MB_ANYKEYRETURN);                //失败
        return 0;
    }

    sendframe.SetSendFrame(CBinary("\x31\x03\x40\x04", 4));
    rfRet = SendDataComm(sendframe);
    m_binRecive = rfRet.GetFirst();
    if (m_binRecive.GetByteCount() == 0)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }
    if (checkIs7f(m_binRecive))
    {
        FxShowMessageBox(FxGetStdString(STD_TTL_MSG_INFORMATION), g_GetTxtStringFormHtml("0x0000006A"), DF_MB_BACK);
        return iRet;
    }
    if (m_binRecive.GetByteCount() < 4 || (m_binRecive[0] != 0x71 || m_binRecive[1] != 0x03 || m_binRecive[2] != 0x40 || m_binRecive[3] != 0x04))
    {
        SendDataComm(CBinary("\x10\x01", 2));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B21F"), DF_MB_ANYKEYRETURN);                //失败
        return 0;
    }

    sendframe.SetSendFrame(CBinary("\x2F\x12\x5C\x03\x00\x00\x10\x00\x00\x00\x10\x00", 12));
    rfRet = SendDataComm(sendframe);
    m_binRecive = rfRet.GetFirst();
    if (m_binRecive.GetByteCount() == 0)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }
    if (checkIs7f(m_binRecive))
    {
        FxShowMessageBox(FxGetStdString(STD_TTL_MSG_INFORMATION), g_GetTxtStringFormHtml("0x0000006A"), DF_MB_BACK);
        return iRet;
    }
    if (m_binRecive.GetByteCount() < 4)
    {
        SendDataComm(CBinary("\x10\x01", 2));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B21F"), DF_MB_ANYKEYRETURN);                //失败
        return 0;
    }

    //检查排气阀门是否关闭。 如果阀门关闭点击确认按钮，否则点击取消按钮。
    iRet = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BDFB"), g_GetTxtStringFormHtml("0x9002C1EB"), DF_MB_OKCANCEL, DT_LEFT);
    if (DF_IDCANCEL == iRet)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000BE88"));//操作人员已中止了此应用程序
        return iRet;
    }

    sendframe.SetSendFrame(CBinary("\x2F\x12\x5C\x03\x00\x00\x10\x00\x00\x00\x10\x00", 12));
    rfRet = SendDataComm(sendframe);
    m_binRecive = rfRet.GetFirst();
    if (m_binRecive.GetByteCount() == 0)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }
    if (checkIs7f(m_binRecive))
    {
        FxShowMessageBox(FxGetStdString(STD_TTL_MSG_INFORMATION), g_GetTxtStringFormHtml("0x0000006A"), DF_MB_BACK);
        return iRet;
    }
    if (m_binRecive.GetByteCount() < 4)
    {
        SendDataComm(CBinary("\x10\x01", 2));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B21F"), DF_MB_ANYKEYRETURN);                //失败
        return 0;
    }

    //检查排气阀是否打开。如果阀门开启，则按“确定”按钮，否则按“取      -消”按钮
    iRet = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BDFB"), g_GetTxtStringFormHtml("0x9002C1E9"), DF_MB_OKCANCEL, DT_LEFT);
    if (DF_IDCANCEL == iRet)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000BE88"));//操作人员已中止了此应用程序
        return iRet;
    }

    sendframe.SetSendFrame(CBinary("\x31\x03\x40\x04", 4));
    rfRet = SendDataComm(sendframe);
    m_binRecive = rfRet.GetFirst();
    if (m_binRecive.GetByteCount() == 0)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }
    if (checkIs7f(m_binRecive))
    {
        FxShowMessageBox(FxGetStdString(STD_TTL_MSG_INFORMATION), g_GetTxtStringFormHtml("0x0000006A"), DF_MB_BACK);
        return iRet;
    }
    if (m_binRecive.GetByteCount() < 4 || (m_binRecive[0] != 0x71 || m_binRecive[1] != 0x03 || m_binRecive[2] != 0x40 || m_binRecive[3] != 0x04))
    {
        SendDataComm(CBinary("\x10\x01", 2));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B21F"), DF_MB_ANYKEYRETURN);                //失败
        return 0;
    }

    sendframe.SetSendFrame(CBinary("\x10\x01", 2));
    rfRet = SendDataComm(sendframe);
    m_pNetLayer->KeepLink(0);//链路断开

    // 成功完成
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BDFB"), g_GetTxtStringFormHtml("0x0000B0C7"), DF_MB_OK, DT_LEFT);
    return iRet;


}


// 制动器排气装置
W_ErrorCode CSeviceFunctionNew::ABS_bleed_NEW_lansheng_L494_2016()
{
    W_ErrorCode iRet = 0;
    W_I16 iKey = 0;
    CSendFrame sendframe;
    CReceiveFrame rfRet;


    // 电压限制
    iRet = FxShowMessageBox(g_GetTxtStringFormHtml("0x900237A4"), g_GetTxtStringFormHtml("0x900237A4")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x900237A6") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BBAB")
        , DF_MB_OKCANCEL, DT_LEFT);
    if (DF_IDCANCEL == iRet)
        return iRet;

    // 点火打开
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"), DF_MB_ANYKEYRETURN, DT_LEFT);


    //协议链路层: 11位CAN 500K  6#,14#
    //step2
    FxShowMessageBox(FxGetStdString(STD_TTL_MSG_INFORMATION), g_GetTxtStringFormHtml("0x0000B119"));
    //step4
    FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_ESTABILISHCOMM, DF_MB_NOBUTTON);


    EnterSystem(PTL_CAN_11_500K, CBinary("\x07\xE6\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 13), 0x07EE);
    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\xE6\x08\x02\x10\x03\x00\x00\x00\x00\x00", 13), 0x07EE);

    if (iRet < 0)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return iRet;
    }

    m_pNetLayer->KeepLink(1600, CSendFrame(CBinary("\x3E\x80", 2)));

    //step3
    sendframe.SetSendFrame(CBinary("\x22\xD1\x12", 3));
    rfRet = SendDataComm(sendframe);
    if (rfRet.GetByteCount() == 0)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }
    m_binRecive = rfRet.GetFirst();
    if ((m_binRecive.GetByteCount() > 3) && (m_binRecive[3] < 0x96))  // 07 EE 08 05 62 D1 12 9C 00 00 00
    {
        FxShowMessageBox(FxGetStdString(STD_TTL_MSG_INFORMATION), g_GetTxtStringFormHtml("0x0000B0AC,0x0000B12B,0x0000013D"), DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_DATA;
    }

    else if ((m_binRecive.GetByteCount() > 3) && (m_binRecive[3] > 0xA9))
    {
        FxShowMessageBox(FxGetStdString(STD_TTL_MSG_INFORMATION), g_GetTxtStringFormHtml("0x0000B0AC,0x0000B12B,0x0000086C"), DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_DATA;
    }

    sendframe.SetSendFrame(CBinary("\x22\x2B\x03", 3));
    rfRet = SendDataComm(sendframe);
    if (rfRet.GetByteCount() == 0)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }
    m_binRecive = rfRet.GetFirst();
    if (m_binRecive.GetByteCount() > 3)
    {
        m_binRecive.DeleteByte(0);
        m_binRecive.DeleteByte(0);
        m_binRecive.DeleteByte(0);
    }
    if (m_binRecive != CBinary("\x08\x00\x00\x00", 4))
    {
        FxShowMessageBox(FxGetStdString(STD_TTL_MSG_INFORMATION), g_GetTxtStringFormHtml("0x0000B0AC,0x0000B12B,0x00000EB7"), DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_DATA;
    }

    sendframe.SetSendFrame(CBinary("\x22\xF1\x11", 3));  // 07 E6 08 03 22 F1 11 00 00 00 00
    rfRet = SendDataComm(sendframe);
    sendframe.SetSendFrame(CBinary("\x22\xF1\x13", 3));  // 07 E6 08 03 22 F1 13 00 00 00 00
    rfRet = SendDataComm(sendframe);
    m_pNetLayer->KeepLink(0);//链路断开

    //step4~step7
    iRet = Bleed_X150_201000_Step4_7(WHEEL_RL);  // 左后    打开/关闭
    if (iRet < 0)
        return iRet;
    //step8
    iRet = Bleed_X150_201000_Step4_7(WHEEL_FL); // 左前    打开/关闭
    if (iRet < 0)
        return iRet;
    iRet = Bleed_X150_201000_Step4_7(WHEEL_FR); // 右前    打开/关闭
    if (iRet < 0)
        return iRet;
    iRet = Bleed_X150_201000_Step4_7(WHEEL_RR); // 右后    打开/关闭
    if (iRet < 0)
        return iRet;


    //step9
    sendframe.SetSendFrame(CBinary("\x22\x2B\x03", 3));  // 07 E6 08 03 22 2B 03 00 00 00 00
    rfRet = SendDataComm(sendframe);
    FxShowMessageBox(FxGetStdString(STD_TTL_MSG_INFORMATION), g_GetTxtStringFormHtml("0x0000005B"));
    PleaseWait_xS(5000);

    //故障码
    iRet = ClearAllFaultCodes1(PTL_CAN_11_500K, CBinary("\x07\xE6\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 13), 0x07EE, g_GetTxtStringFormHtml("0x00000025"), 0x07E8);
    EnterSystem(PTL_CAN_11_500K, CBinary("\x07\xE6\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 13), 0x07EE);


    FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_ESTABILISHCOMM, DF_MB_NOBUTTON);
    sendframe.SetSendFrame(CBinary("\x10\x03", 2));
    rfRet = SendDataComm(sendframe);
    m_binRecive = rfRet.GetFirst();
    if (rfRet.GetByteCount() == 0)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }
    sendframe.SetSendFrame(CBinary("\x2E\xD1\x19\x00", 4));
    rfRet = SendDataComm(sendframe);
    m_binRecive = rfRet.GetFirst();
    if (m_binRecive.GetByteCount() != 3 || checkIs7f(m_binRecive))
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }
    //step14
    sendframe.SetSendFrame(CBinary("\x10\x01", 2));
    rfRet = SendDataComm(sendframe);
    FxShowMessageBox(FxGetStdString(STD_TTL_MSG_INFORMATION), g_GetTxtStringFormHtml("0x0000B131,0x0000B0A3"));  // 写入装配PID

    return iRet;

}




// 纵向加速计标定
W_ErrorCode CSeviceFunctionNew::Vertical_speed_up_NEW_lansheng_L494_2016()
{
    W_ErrorCode iRet = CErrorCode::EC_SUCCESS;
    CSendFrame sendframe;
    CReceiveFrame rfRet;
    CBinary bReceiveData;
    W_I16 iKey = 0;


    // 判断电压
    iRet = CheckEngineStop(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xF4\x0C\x00\x00\x00\x00", 11), 0x07E8, CBinary("\x01\x00", 2));


    //纵向加速度表传感器校准
    iRet = FxShowMessageBox(g_GetTxtStringFormHtml("0x90026016"), g_GetTxtStringFormHtml("0x00000085") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000B8DA")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x90022F8D"), DF_MB_OKCANCEL, DT_LEFT);
    if (iRet == DF_IDCANCEL)
        return CErrorCode::EC_TIME_OVER;


    FxShowMessageBox(g_GetTxtStringFormHtml("0x90026016"), g_GetTxtStringFormHtml("0x00000011"), DF_MB_ANYKEYRETURN, DT_LEFT);//将点火开关打开（位置2）

    //正在进行 - 校准纵向加速度表传感器
    iRet = FxShowMessageBox(g_GetTxtStringFormHtml("0x90026016"), g_GetTxtStringFormHtml("0x00000085") + "\n" + "\n" + g_GetTxtStringFormHtml("0x90023C7B")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000B0BA") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000B0BB") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OKCANCEL, DT_LEFT);
    if (iRet == DF_IDCANCEL)
        return CErrorCode::EC_TIME_OVER;



    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x56\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x075E);  //     {0xD88E2A}
    SendDataComm(CBinary("\x22\xf1\x03", 3));
    sendframe.SetSendFrame(CBinary("\x10\x03", 2));
    rfRet = SendDataComm(sendframe);
    rfRet = m_rfRet;
    if (iRet)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    // 安全访问
    iRet = SafeLogin_Standard3(CBinary("\x27\x01", 2), 0xD88E2A);
    if (iRet < 0)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }
    m_pNetLayer->KeepLink(1000, CSendFrame(CBinary("\x3E\x00", 2)));    //链路保持

    sendframe.SetSendFrame(CBinary("\x31\x01\x21\x1D", 4));  // 07 56 08 04 31 01 21 1D 00 00 00
    rfRet = SendDataComm(sendframe);
    bReceiveData = rfRet.GetFirst();
    if (bReceiveData.GetByteCount() == 0)
    {
        sendframe.SetSendFrame(CBinary("\x10\x03", 2));
        rfRet = SendDataComm(sendframe);
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        FxShowMessageBox(FxGetStdString(STD_INFO_COMMUNICATION_STATUS), FxGetStdString(STD_INFO_NO_COMMUNICATION_SYS), DF_MB_BACK, DT_LEFT);//测试仪与控制单元之间无法通信
        return CErrorCode::EC_TIME_OVER;
    }
    else if (bReceiveData.GetByteCount() < 0x04 || bReceiveData.GetByteAt(0) != 0x71 || bReceiveData.GetByteAt(1) != 0x01 || bReceiveData.GetByteAt(2) != 0x21 || bReceiveData.GetByteAt(3) != 0x1D)
    {
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        FxShowMessageBox(FxGetStdString(STD_INFO_COMMUNICATION_STATUS), g_GetTxtStringFormHtml("0x0000B21F"), DF_MB_OK, DT_LEFT);//失败    
        return CErrorCode::EC_TIME_OVER;
    }
    sendframe.SetSendFrame(CBinary("\x31\x03\x21\x1D", 4));  // 07 56 08 04 31 03 21 1D 00 00 00
    rfRet = SendDataComm(sendframe);
    bReceiveData = rfRet.GetFirst();
    if (bReceiveData.GetByteCount() == 0)
    {
        sendframe.SetSendFrame(CBinary("\x10\x03", 2));
        rfRet = SendDataComm(sendframe);
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        FxShowMessageBox(FxGetStdString(STD_INFO_COMMUNICATION_STATUS), FxGetStdString(STD_INFO_NO_COMMUNICATION_SYS), DF_MB_BACK, DT_LEFT);//测试仪与控制单元之间无法通信
        return CErrorCode::EC_TIME_OVER;
    }
    else if (bReceiveData.GetByteCount() < 0x04 || bReceiveData.GetByteAt(0) != 0x71 || bReceiveData.GetByteAt(1) != 0x03 || bReceiveData.GetByteAt(2) != 0x21 || bReceiveData.GetByteAt(3) != 0x1D)
    {
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        FxShowMessageBox(FxGetStdString(STD_INFO_COMMUNICATION_STATUS), g_GetTxtStringFormHtml("0x0000B21F"), DF_MB_OK, DT_LEFT);//失败    
        return CErrorCode::EC_TIME_OVER;
    }


    m_pNetLayer->KeepLink(1000, CSendFrame(CBinary("\x3E\x80", 2)));
    PleaseWait_xS(5000);

    sendframe.SetSendFrame(CBinary("\x10\x01", 2));
    rfRet = SendDataComm(sendframe);
    m_pNetLayer->KeepLink(0);


    PleaseWait_xS_haveTTL(5000, g_GetTxtStringFormHtml("0x90023C7A"), g_GetTxtStringFormHtml("0x90026016"));//纵向加速度表传感器校准
    FxShowMessageBox(g_GetTxtStringFormHtml("0x90026016"), g_GetTxtStringFormHtml("0x90023C7A") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002A16C")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OK, DT_LEFT);// 校准完成


    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//将点火开关关闭（位置 0）.

    // 故障码
    iRet = ClearSysDTC_Programme_538(PTL_CAN_11_500K, CBinary("\x07\x56\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x075E);

    return iRet;


}



// 制动卡钳更换组装测试
W_ErrorCode CSeviceFunctionNew::Move_reset_NEW_lansheng_L494_2016()
{
    W_ErrorCode iRet = CErrorCode::EC_SUCCESS;
    CSendFrame sendframe;
    CReceiveFrame rfRet;
    CBinary bReceiveData;
    W_I16 iKey = 0;


    // 判断电压
    iRet = CheckEngineStop(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xF4\x0C\x00\x00\x00\x00", 11), 0x07E8, CBinary("\x01\x00", 2));


    // 更换后驻车制动卡钳时，需要使用此应用程序，以测试是否正确工作.
    iRet = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B8DD"), g_GetTxtStringFormHtml("0x0000B8DE") + "\n" + "\n" + g_GetTxtStringFormHtml("0x90022F8D"), DF_MB_OKCANCEL, DT_LEFT);
    if (iRet == DF_IDCANCEL)
        return CErrorCode::EC_TIME_OVER;

    // 确保运转
    iRet = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B93D"), g_GetTxtStringFormHtml("0x9001251C"), DF_MB_OK, DT_LEFT);
    if (iRet == DF_IDCANCEL)
        return CErrorCode::EC_TIME_OVER;

    //    确保车辆在水平地面上处于静止状态，刹车踏板未踏下.
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B8DD    "), g_GetTxtStringFormHtml("0x900080A6") + "\n" + "\n" + g_GetTxtStringFormHtml("0x00000097")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x00000098") + "\n" + "\n" + g_GetTxtStringFormHtml("0x00000099") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000009A")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000009B") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000009C") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OK, DT_LEFT);

    // 更换后驻车制动卡钳时，需要使用此应用程序，以测试是否正确工作.
    iRet = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B93D"), g_GetTxtStringFormHtml("0x0000B8DE") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9001251F")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OK, DT_LEFT);
    if (iRet == DF_IDCANCEL)
        return CErrorCode::EC_TIME_OVER;


    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x56\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x075E);  //     {0xD88E2A}
    SendDataComm(CBinary("\x22\xf1\x03", 3));
    sendframe.SetSendFrame(CBinary("\x10\x03", 2));
    rfRet = SendDataComm(sendframe);
    rfRet = m_rfRet;
    if (iRet)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    //安全访问
    iRet = SafeLogin_Standard3(CBinary("\x27\x01", 2), 0xD88E2A);
    if (iRet == CErrorCode::EC_ECU_REFUSE)
    {
        FxShowMessageBox(FxGetStdString(STD_TTL_MSG_INFORMATION), g_GetTxtStringFormHtml("0x0000B09F"), DF_MB_BACK);
        return CErrorCode::EC_ECU_REFUSE;
    }
    else if (iRet < 0)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }
    m_pNetLayer->KeepLink(0);//链路断开


    sendframe.SetSendFrame(CBinary("\x31\x01\x02\x11", 4));  // 07 56 08 04 31 01 02 11 00 00 00
    rfRet = SendDataComm(sendframe);
    bReceiveData = rfRet.GetFirst();
    if (bReceiveData.GetByteCount() == 0)
    {
        sendframe.SetSendFrame(CBinary("\x10\x03", 2));
        rfRet = SendDataComm(sendframe);
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        FxShowMessageBox(FxGetStdString(STD_INFO_COMMUNICATION_STATUS), FxGetStdString(STD_INFO_NO_COMMUNICATION_SYS), DF_MB_BACK, DT_LEFT);//测试仪与控制单元之间无法通信
        return CErrorCode::EC_TIME_OVER;
    }
    else if (bReceiveData.GetByteCount() < 0x04 || bReceiveData.GetByteAt(0) != 0x71 || bReceiveData.GetByteAt(1) != 0x01 || bReceiveData.GetByteAt(2) != 0x02 || bReceiveData.GetByteAt(3) != 0x11)
    {
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        FxShowMessageBox(FxGetStdString(STD_INFO_COMMUNICATION_STATUS), g_GetTxtStringFormHtml("0x0000B21F"), DF_MB_OK, DT_LEFT);//失败    
        return CErrorCode::EC_TIME_OVER;
    }
    sendframe.SetSendFrame(CBinary("\x31\x03\x02\x11", 4));  //07 56 08 04 31 03 02 11 00 00 00
    rfRet = SendDataComm(sendframe);
    bReceiveData = rfRet.GetFirst();
    if (bReceiveData.GetByteCount() == 0)
    {
        sendframe.SetSendFrame(CBinary("\x10\x03", 2));
        rfRet = SendDataComm(sendframe);
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        FxShowMessageBox(FxGetStdString(STD_INFO_COMMUNICATION_STATUS), FxGetStdString(STD_INFO_NO_COMMUNICATION_SYS), DF_MB_BACK, DT_LEFT);//测试仪与控制单元之间无法通信
        return CErrorCode::EC_TIME_OVER;
    }
    else if (bReceiveData.GetByteCount() < 0x04 || bReceiveData.GetByteAt(0) != 0x71 || bReceiveData.GetByteAt(1) != 0x03 || bReceiveData.GetByteAt(2) != 0x02 || bReceiveData.GetByteAt(3) != 0x11)
    {
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        FxShowMessageBox(FxGetStdString(STD_INFO_COMMUNICATION_STATUS), g_GetTxtStringFormHtml("0x0000B21F"), DF_MB_OK, DT_LEFT);//失败    
        return CErrorCode::EC_TIME_OVER;
    }


    m_pNetLayer->KeepLink(1000, CSendFrame(CBinary("\x3E\x80", 2)));
    PleaseWait_xS(5000);

    sendframe.SetSendFrame(CBinary("\x10\x01", 2));
    rfRet = SendDataComm(sendframe);
    m_pNetLayer->KeepLink(0);


    PleaseWait_xS_haveTTL(5000, g_GetTxtStringFormHtml("0x0000B8DD"), g_GetTxtStringFormHtml("0x0000B8DD"));// 制动卡钳更换组装测试
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B8DD"), g_GetTxtStringFormHtml("0x9002A16C") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OK, DT_LEFT);// 完成


    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//将点火开关关闭（位置 0）.

    // 故障码
    iRet = ClearSysDTC_Programme_538(PTL_CAN_11_500K, CBinary("\x07\x56\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x075E);

    return iRet;


}



// 控制模块校准
W_ErrorCode CSeviceFunctionNew::Speed_up_control_NEW_lansheng_L494_2016()
{
    W_ErrorCode iRet = CErrorCode::EC_SUCCESS;
    CSendFrame sendframe;
    CReceiveFrame rfRet;
    W_I16 iKey = 0;

    //此例行程序触发一个程序过程，在这一过程中，模块将执行一个自检例行程序
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B901"), g_GetTxtStringFormHtml("0x90022510") + "\n" + "\n" + g_GetTxtStringFormHtml("0x90022F8D"), DF_MB_OKCANCEL, DT_LEFT);
    if (DF_IDCANCEL == iKey)
        return iRet;

    // 判断电压
    iRet = CheckEngineStop(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xF4\x0C\x00\x00\x00\x00", 11), 0x07E8, CBinary("\x01\x00", 2));

    // 点火打开
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"), DF_MB_ANYKEYRETURN, DT_LEFT);//将点火开关打开

    //执行随需自检将会使相关控制模块执行预定义的测试，这将导致任何相关的故障代码被记录（如果存在故障）
    iRet = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B901"), g_GetTxtStringFormHtml("0x0000B8FF") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9001C263")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OKCANCEL, DT_LEFT);
    if (DF_IDCANCEL == iRet)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B8D1"), DF_MB_ANYKEYRETURN, DT_LEFT);//操作人员已中止了此应用程序
        return iRet;
    }

    //step8
    EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x95\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x079D);
    sendframe.SetSendFrame(CBinary("\x22\xf1\x03", 3));
    rfRet = SendDataComm(sendframe);
    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);
    //链路：11位can500k
    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x95\x08\x02\x10\x03\x00\x00\x00\x00\x00", 11), 0x079D);
    if (iRet)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    rfRet = m_rfRet;
    CBinary binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount() < 5)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    m_binRecive = CBinary(binRecive.GetBuffer() + 4, binRecive.GetByteCount() - 4);
    if (checkIs7f(m_binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"), DF_MB_ANYKEYRETURN, DT_LEFT);//ECU不支持
        return iRet;
    }

    //step9
    sendframe.SetSendFrame(CBinary("\x31\x01\x02\x02", 4));
    rfRet = SendDataComm(sendframe);
    m_binRecive = rfRet.GetFirst();
    if (m_binRecive.GetByteCount() < 4)
    {
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B8FF"), g_GetTxtStringFormHtml("0x0000B21F"), DF_MB_ANYKEYRETURN, DT_LEFT);//失败
        return iRet;
    }

    BYTE iGetByte = m_binRecive[m_binRecive.GetByteCount() - 1];
    if (!checkIs7f(m_binRecive) || 0 == iGetByte || 0x13 == iGetByte || 0x16 == iGetByte || 0x24 == iGetByte || 0x34 == iGetByte || 0x31 == iGetByte || 0x7F == iGetByte)
    {
        //step10
        PleaseWait_xS_haveTTL(5000, g_GetTxtStringFormHtml("0x0000B8FF"), g_GetTxtStringFormHtml("0x0000B8FF"));//延时20s
        sendframe.SetSendFrame(CBinary("\x31\x03\x02\x02", 4));
        rfRet = SendDataComm(sendframe);
        m_binRecive = rfRet.GetFirst();

        if (m_binRecive.GetByteCount() < 4)
        {
            sendframe.SetSendFrame(CBinary("\x10\x01", 2));
            rfRet = SendDataComm(sendframe);
            FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B8FF"), g_GetTxtStringFormHtml("0x0000B21F"), DF_MB_ANYKEYRETURN, DT_LEFT);//失败
            return iRet;
        }

        iGetByte = m_binRecive[m_binRecive.GetByteCount() - 1];
        if (!checkIs7f(m_binRecive) || 0 == iGetByte || 0x13 == iGetByte || 0x16 == iGetByte || 0x24 == iGetByte || 0x34 == iGetByte || 0x31 == iGetByte || 0x7F == iGetByte)
        {
            //Step11
            sendframe.SetSendFrame(CBinary("\x10\x01", 2));
            rfRet = SendDataComm(sendframe);

            FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B901"), g_GetTxtStringFormHtml("0x0000B8FF") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002A16C")
                + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_ANYKEYRETURN, DT_LEFT);//完成
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_ANYKEYRETURN, DT_LEFT);//关闭点火开关

            //Step12~
            iRet = ClearSysDTC_Programme_538(PTL_CAN_11_500K, CBinary("\x07\x95\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x079D);
            return iRet;
        }
    }

    //sendframe.SetSendFrame(CBinary("\x10\x01",2));
    //rfRet = SendDataComm(sendframe);


    //FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B8FF"),g_GetTxtStringFormHtml("0x0000B21F"),DF_MB_ANYKEYRETURN,DT_LEFT);//失败

    //iRet = ClearSysDTC_Programme_538(PTL_CAN_11_500K, CBinary("\x07\x95\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x079D);

    return iRet;
}




// 设置/取消空气悬架制造/冻结模式
W_ErrorCode CSeviceFunctionNew::CHCM_mode_NEW_lansehng_L494_2016()
{
    W_ErrorCode iRet = 0;
    W_I16 iKey = 0;
    CSendFrame sendframe;
    CReceiveFrame rfRet;

    W_I16 selectmenu;
    W_I16 selectmenu2;
    CBinary Cmd;
    string Title = "";

    string strOpenFile = m_stropenfileConfigMenu;
    CJLRStringOperate strOpt;
    strOpt.Replace(strOpenFile, ".ctv", "");


    // 本应用程序可使悬架模块进入和退出建立模式（停止悬架操作）
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x90001047"), g_GetTxtStringFormHtml("0x9001DB8C") + "\n" + "\n" + g_GetTxtStringFormHtml("0x90022F8D"), DF_MB_OKCANCEL, DT_LEFT);
    if (iKey == DF_IDCANCEL)
        return iRet;

    // 打开点火
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B1B2"));

    //step3
    CMenuCtrl uiMenu;
    CMenuCtrl uiMenu2;
    while (1)
    {
        uiMenu.InitCtrl(g_GetTxtStringFormHtml("0x0000B8F6"));  // 悬架控制模块工作模式  -  请选择下列选项之一：
        uiMenu.AddOneItem(g_GetTxtStringFormHtml("0x9000803A"));  // 正常模式
        uiMenu.AddOneItem(g_GetTxtStringFormHtml("0x9002A3ED"));  //设置／取消空气悬架制造／冻结模式
        selectmenu = uiMenu.ShowCtrl();
        if (selectmenu == -1)
        {
            return 0;
        }
        else if (selectmenu == 0)
        {
            Title = g_GetTxtStringFormHtml("0x9000803A");
        }
        else if (selectmenu == 1)
        {
            Title = g_GetTxtStringFormHtml("0x9002A3ED");
        }
        while (1)
        {
            uiMenu2.InitCtrl(g_GetTxtStringFormHtml("0x00009472"));
            uiMenu2.AddOneItem(g_GetTxtStringFormHtml("0x00009704"));
            uiMenu2.AddOneItem(g_GetTxtStringFormHtml("0x0001E64B"));     //  安装/未安装 自适应减振系统
            selectmenu2 = uiMenu2.ShowCtrl();
            if (selectmenu2 == -1)
                break;//返回上一目录
            else if (selectmenu2 <= 1)
            {
                CMessageBoxCtrl::SetBusyStatus(true);
                FxShowMessageBox(FxGetStdString(STD_INFO_COMMUNICATION_STATUS), g_GetTxtStringFormHtml("0x0000B09D"), DF_MB_NOBUTTON, DT_LEFT);
                EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x10\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x0718);
                iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x10\x08\x02\x10\x03\x00\x00\x00\x00\x00", 11), 0x0718);
                if (iRet < 0)
                {
                    CMessageBoxCtrl::SetBusyStatus(false);
                    sendframe.SetSendFrame(CBinary("\x10\x01", 2));
                    rfRet = SendDataComm(sendframe);
                    FxShowMessageBox(FxGetStdString(STD_INFO_COMMUNICATION_STATUS), FxGetStdString(STD_INFO_NO_COMMUNICATION_SYS), DF_MB_BACK, DT_LEFT);
                    return iRet;
                }
                rfRet = m_rfRet;
                m_binRecive = rfRet.GetFirst();
                if (m_binRecive.GetByteCount())
                {
                    m_binRecive = CBinary(m_binRecive.GetBuffer() + 4, m_binRecive.GetByteCount() - 4);
                    if (checkIs7f(m_binRecive))
                    {
                        CMessageBoxCtrl::SetBusyStatus(false);
                        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
                        rfRet = SendDataComm(sendframe);
                        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));
                        return CErrorCode::EC_ECU_REFUSE;
                    }
                }
                //安全访问424945
                iRet = SafeLogin_Standard3(CBinary("\x27\x01", 2), 0x32BF9E);  // 07 10 08 05 27 02 32 BF 9E 00 00
                if (iRet == CErrorCode::EC_ECU_REFUSE)
                {
                    CMessageBoxCtrl::SetBusyStatus(false);
                    FxShowMessageBox(FxGetStdString(STD_TTL_MSG_INFORMATION), g_GetTxtStringFormHtml("0x0000B09F"), DF_MB_BACK);
                    sendframe.SetSendFrame(CBinary("\x10\x01", 2));
                    rfRet = SendDataComm(sendframe);
                    return CErrorCode::EC_ECU_REFUSE;
                }
                else if (iRet < 0)
                {
                    CMessageBoxCtrl::SetBusyStatus(false);
                    FxShowMessageBox(FxGetStdString(STD_INFO_COMMUNICATION_STATUS), FxGetStdString(STD_INFO_NO_COMMUNICATION_SYS), DF_MB_BACK, DT_LEFT);
                    sendframe.SetSendFrame(CBinary("\x10\x01", 2));
                    rfRet = SendDataComm(sendframe);
                    return CErrorCode::EC_TIME_OVER;
                }


                if (selectmenu == 1)// 设置／取消空气悬架制造／冻结模式
                {
                    sendframe.SetSendFrame(CBinary("\x22\x20\x39", 3));
                    rfRet = SendDataComm(sendframe);
                    m_binRecive = rfRet.GetFirst();
                    if (m_binRecive.GetByteCount() <= 3 || checkIs7f(m_binRecive))
                    {
                        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
                        rfRet = SendDataComm(sendframe);
                        CMessageBoxCtrl::SetBusyStatus(false);
                        if (!m_binRecive.GetByteCount())
                        {
                            FxShowMessageBox(FxGetStdString(STD_INFO_COMMUNICATION_STATUS), FxGetStdString(STD_INFO_NO_COMMUNICATION_SYS), DF_MB_BACK, DT_LEFT);
                            return CErrorCode::EC_TIME_OVER;
                        }
                        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000BC35,0x0000B0FD"), DF_MB_OK, DT_LEFT);
                        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000BC33"));
                        return CErrorCode::EC_TIME_OVER;
                    }

                    Cmd = CBinary("\x2E\x20\x39", m_binRecive.GetByteCount());

                    for (int i = 0; i < m_binRecive.GetByteCount() - 3; i++)
                        Cmd.SetByteAt(3 + i, 0x00);

                    sendframe.SetSendFrame(Cmd);
                    rfRet = SendDataComm(sendframe);
                    m_binRecive = rfRet.GetFirst();
                    if (m_binRecive.GetByteCount() != 3 || checkIs7f(m_binRecive))
                    {
                        CMessageBoxCtrl::SetBusyStatus(false);
                        if (!m_binRecive.GetByteCount())
                        {
                            FxShowMessageBox(FxGetStdString(STD_INFO_COMMUNICATION_STATUS), FxGetStdString(STD_INFO_NO_COMMUNICATION_SYS), DF_MB_BACK, DT_LEFT);
                            return CErrorCode::EC_TIME_OVER;
                        }
                        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
                        rfRet = SendDataComm(sendframe);
                        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000BC35,0x0000B0FD"), DF_MB_OK, DT_LEFT);
                        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000BC33"));
                        return CErrorCode::EC_TIME_OVER;
                    }

                    //step10
                    sendframe.SetSendFrame(CBinary("\x10\x01", 2));
                    rfRet = SendDataComm(sendframe);
                    CMessageBoxCtrl::SetBusyStatus(false);
                    m_pNetLayer->KeepLink(0);//打断链路

                    FxShowMessageBox(g_GetTxtStringFormHtml("0x9002A3ED"), g_GetTxtStringFormHtml("0x0000C0F6"));  // 车辆未处于客户模式
                    //step11
                    FxShowMessageBox(g_GetTxtStringFormHtml("0x90001047"), g_GetTxtStringFormHtml("0x0000BE1A"));  //  应用程序已成功完成
                    //step12
                    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000BE78"));  // 关闭点火

                    iRet = CheckSysDTCNubCCAF4(PTL_CAN_11_500K, PTL_CAN_11_125K, CBinary("\x07\x10\x08\x03\x19\x02\x0C\x00\x00\x00\x00", 11), CBinary("\x07\xDF\x08\x04\x14\xFF\xFF\xFF\x00\x00\x00", 11), 0x0718, 0x07E7);
                    return iRet;
                }


                else if (selectmenu == 0) //正常模式
                {
                    sendframe.SetSendFrame(CBinary("\x2E\x20\x39\x02\x02\x02\x02\x02\x02\x02\x02", 0x0B));
                    rfRet = SendDataComm(sendframe);
                    m_binRecive = rfRet.GetFirst();
                    if (m_binRecive.GetByteCount() != 3 || checkIs7f(m_binRecive))   // 07 18 08 03 6E 20 39 00 00 00 00
                    {
                        CMessageBoxCtrl::SetBusyStatus(false);
                        if (!m_binRecive.GetByteCount())
                        {
                            FxShowMessageBox(FxGetStdString(STD_INFO_COMMUNICATION_STATUS), FxGetStdString(STD_INFO_NO_COMMUNICATION_SYS), DF_MB_BACK, DT_LEFT);
                            return CErrorCode::EC_TIME_OVER;
                        }
                        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
                        rfRet = SendDataComm(sendframe);
                        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B0FD"), DF_MB_OK, DT_LEFT);
                        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000BC33"));
                        return CErrorCode::EC_TIME_OVER;
                    }
                    sendframe.SetSendFrame(CBinary("\x10\x01", 2));
                    rfRet = SendDataComm(sendframe);
                    CMessageBoxCtrl::SetBusyStatus(false);
                    //step6
                    FxShowMessageBox(g_GetTxtStringFormHtml("0x90001047"), g_GetTxtStringFormHtml("0x0000BC34"));  // 车辆处于正常运行模式
                    //step7
                    FxShowMessageBox(g_GetTxtStringFormHtml("0x90001047"), g_GetTxtStringFormHtml("0x0000BE1A"));  // 应用程序已成功完成
                    //step8
                    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000BE78"));  // 关闭点火开关.
                    m_pNetLayer->KeepLink(0);//打断链路

                    iRet = CheckSysDTCNubCCAF4(PTL_CAN_11_500K, PTL_CAN_11_125K, CBinary("\x07\x10\x08\x03\x19\x02\x0C\x00\x00\x00\x00", 11), CBinary("\x07\xDF\x08\x04\x14\xFF\xFF\xFF\x00\x00\x00", 11), 0x0718, 0x07E7);
                    return iRet;

                }
            }
        }
    }
    return iRet;

}









// 空气悬挂放气
W_ErrorCode CSeviceFunctionNew::JM_air_NEW_lansheng_L494_2016()
{
    W_ErrorCode iRet = 0;
    W_I16 iKey = 0;
    CSendFrame sendframe;
    CReceiveFrame rfRet;
    //协议链路层: 11位CAN 500K
    string strall = "";
    CBinaryGroup bgCmd;
    W_I16 selectmenu;
    //step1
    strall = g_GetTxtStringFormHtml("0x9002B206") + "\n" + "\n"
        + g_GetTxtStringFormHtml("0x0000B171") + "\n" + "\n"
        + g_GetTxtStringFormHtml("0x0000B172") + "\n" + "\n"
        + g_GetTxtStringFormHtml("0x0000BBAB");
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), strall, DF_MB_OKCANCEL, DT_LEFT);
    if (iKey == DF_IDCANCEL)
        return iRet;
    //step2-5
    iRet = CheckEngineStop(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xF4\x0C\x00\x00\x00\x00", 11), 0x07E8, CBinary("\x01\x00", 2));
    if (iRet != 0)
        return 0;
    //step6
    bgCmd.Append(CBinary("\x31\x01\x30\x04\x01", 5));    // 所有
    bgCmd.Append(CBinary("\x31\x01\x30\x04\x08", 5));    // 左后
    bgCmd.Append(CBinary("\x31\x01\x30\x04\x09", 5));    // 右后
    bgCmd.Append(CBinary("\x31\x01\x30\x04\x02", 5));    // 储气罐
    bgCmd.Append(CBinary("\x31\x01\x30\x04\x03", 5));// 储气罐和空气弹簧
    bgCmd.Append(CBinary("\x31\x01\x30\x04\x06", 5));// 左前
    bgCmd.Append(CBinary("\x31\x01\x30\x04\x07", 5));    // 右前

    vector<string> VecStrName;
    VecStrName.push_back(g_GetTxtStringFormHtml("0x0000B139"));  // 所有
    VecStrName.push_back(g_GetTxtStringFormHtml("0x0000BE70"));  // 左后
    VecStrName.push_back(g_GetTxtStringFormHtml("0x0000BE71"));  // 右后
    VecStrName.push_back(g_GetTxtStringFormHtml("0x0000B13A")); // 储气罐
    VecStrName.push_back(g_GetTxtStringFormHtml("0x0000B13B")); // 储气罐和空气弹簧
    VecStrName.push_back(g_GetTxtStringFormHtml("0x0000BE72")); // 左前
    VecStrName.push_back(g_GetTxtStringFormHtml("0x0000BE76")); // 右前
    CMenuCtrl uiMenu;
    while (1)
    {
        uiMenu.InitCtrl(g_GetTxtStringFormHtml("0x0000BE6E"));
        for (int i = 0; i < VecStrName.size(); i++)
            uiMenu.AddOneItem(VecStrName[i]);
        selectmenu = uiMenu.ShowCtrl();
        if (selectmenu == -1)
        {
            return 0;
        }
        else if (selectmenu <= 6)
        {
            JM_air_1_NEW_lansheng_L494_2016(bgCmd[selectmenu], VecStrName[selectmenu], selectmenu);
        }
    }
    return iRet;
}

W_ErrorCode CSeviceFunctionNew::JM_air_1_NEW_lansheng_L494_2016(CBinary Cmd, string str, W_I16 selectmenu)
{
    W_ErrorCode iRet = 0;
    W_I16 iKey = 0;
    CSendFrame sendframe;
    CReceiveFrame rfRet;





    //协议链路层: 11位CAN 500K
    int count[10] = { 0 };
    string strall = "";
    while (1)
    {
        // 点火打开
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"));

        // 标题：空气悬挂
        if (selectmenu >= 5)
            iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x90023725"), g_GetTxtStringFormHtml("0x0000BE74") + "\n" + "\n" + str
                + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OKCANCEL, DT_LEFT);
        else
            iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BE74"), g_GetTxtStringFormHtml("0x0000BE74") + "\n" + "\n" + str
                + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OKCANCEL, DT_LEFT);  // 标题： 悬架放气常规程序.
        if (iKey == DF_IDCANCEL)
            return iRet;

        //step10
        while (1)
        {
            CMessageBoxCtrl::SetBusyStatus(true);
            FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BE74"), g_GetTxtStringFormHtml("0x0000B140"), DF_MB_NOBUTTON);
            EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x10\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x0718);
            SendDataComm(CBinary("\x22\xf1\x03", 3));
            iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x10\x08\x02\x10\x03\x00\x00\x00\x00\x00", 11), 0x0718);
            if (iRet < 0)
            {
                CMessageBoxCtrl::SetBusyStatus(false);
                FxShowMessageBox(FxGetStdString(STD_INFO_COMMUNICATION_STATUS), FxGetStdString(STD_INFO_NO_COMMUNICATION_SYS), DF_MB_BACK, DT_LEFT);
                return iRet;
            }
            rfRet = m_rfRet;
            m_binRecive = rfRet.GetFirst();
            if (m_binRecive.GetByteCount())
            {
                m_binRecive = CBinary(m_binRecive.GetBuffer() + 4, m_binRecive.GetByteCount() - 4);
                if (checkIs7f(m_binRecive))
                {
                    CMessageBoxCtrl::SetBusyStatus(false);
                    sendframe.SetSendFrame(CBinary("\x10\x01", 2));
                    rfRet = SendDataComm(sendframe);
                    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BE74"), g_GetTxtStringFormHtml("0x0000B140,0x0000B21F,0x0000BE75"), DF_MB_OKCANCEL, DT_LEFT);
                    if (iKey == DF_IDCANCEL)
                    {
                        count[0]++;
                        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml(TXT_HTML_STATE_VALUE_IGNITION_OFF));
                        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B99E"), g_GetTxtStringFormHtml("0x0000B99F,0x00004BE4"), DF_MB_OK, DT_LEFT);
                        if (count[0] == 1)
                            break;//执行步骤7
                        if (count[0] == 2)
                        {
                            FxShowMessageBox(g_GetTxtStringFormHtml("0x00000069"), g_GetTxtStringFormHtml("0x0000006A,0x0000B105"), DF_MB_OK, DT_LEFT);
                            return CErrorCode::EC_ECU_REFUSE;
                        }
                    }
                    else if (iKey == DF_IDOK)
                    {
                        count[1]++;
                        if (count[1] % 2)//1,3
                            continue;
                        else if (!(count[1] % 2))
                        {
                            FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml(TXT_HTML_STATE_VALUE_IGNITION_OFF));
                            FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B99E"), g_GetTxtStringFormHtml("0x0000B99F,0x00004BE4"), DF_MB_OK, DT_LEFT);
                            if (count[1] == 4)
                            {
                                FxShowMessageBox(g_GetTxtStringFormHtml("0x00000069"), g_GetTxtStringFormHtml("0x0000006A,0x0000B105"), DF_MB_OK, DT_LEFT);
                                return CErrorCode::EC_ECU_REFUSE;
                            }
                            break;//执行步骤7
                        }
                    }
                }
            }
            //安全访问
            iRet = SafeLogin_Standard3(CBinary("\x27\x03", 2), 0x32BF9E);  // 07 10 08 05 27 04 32 BF 9E 00 00
            if (iRet == CErrorCode::EC_ECU_REFUSE || iRet < 0)
            {
                CMessageBoxCtrl::SetBusyStatus(false);
                sendframe.SetSendFrame(CBinary("\x10\x01", 2));
                rfRet = SendDataComm(sendframe);
                iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BE74"), g_GetTxtStringFormHtml("0x0000B140,0x0000B21F,0x0000BE75"), DF_MB_OKCANCEL, DT_LEFT);
                if (iKey == DF_IDCANCEL)
                {
                    count[5]++;
                    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml(TXT_HTML_STATE_VALUE_IGNITION_OFF));
                    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B99E"), g_GetTxtStringFormHtml("0x0000B99F,0x00004BE4"), DF_MB_OK, DT_LEFT);
                    if (count[5] == 1)
                        break;//执行步骤7
                    if (count[5] == 2)
                    {
                        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000069"), g_GetTxtStringFormHtml("0x0000006A,0x0000B105"), DF_MB_OK, DT_LEFT);
                        return CErrorCode::EC_ECU_REFUSE;
                    }
                }
                else if (iKey == DF_IDOK)
                {
                    count[2]++;
                    if (count[2] % 2)//1,3
                        continue;
                    else if (!(count[2] % 2))
                    {
                        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml(TXT_HTML_STATE_VALUE_IGNITION_OFF));
                        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B99E"), g_GetTxtStringFormHtml("0x0000B99F,0x00004BE4"), DF_MB_OK, DT_LEFT);
                        if (count[2] == 4)
                        {
                            FxShowMessageBox(g_GetTxtStringFormHtml("0x00000069"), g_GetTxtStringFormHtml("0x0000006A,0x0000B105"), DF_MB_OK, DT_LEFT);
                            return CErrorCode::EC_ECU_REFUSE;
                        }
                        break;//执行步骤7
                    }
                }
            }
            //step11
            sendframe.SetSendFrame(Cmd);
            rfRet = SendDataComm(sendframe);
            m_binRecive = rfRet.GetFirst();
            if (!m_binRecive.GetByteCount() || checkIs7f(m_binRecive))
            {
                CMessageBoxCtrl::SetBusyStatus(false);
                sendframe.SetSendFrame(CBinary("\x10\x01", 2));
                rfRet = SendDataComm(sendframe);
                if (selectmenu >= 5)
                    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000001D"), g_GetTxtStringFormHtml("0x0000B21F"));
                else
                    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BE74"), g_GetTxtStringFormHtml("0x0000B140,0x0000B21F"), DF_MB_OK, DT_LEFT);
                count[3]++;
                FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml(TXT_HTML_STATE_VALUE_IGNITION_OFF));
                FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B99E"), g_GetTxtStringFormHtml("0x0000B99F,0x00004BE4"), DF_MB_OK, DT_LEFT);
                if (count[3] == 1)
                    break;//执行步骤7
                if (count[3] == 2)
                {
                    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000069"), g_GetTxtStringFormHtml("0x0000006A,0x0000B105"), DF_MB_OK, DT_LEFT);
                    return CErrorCode::EC_TIME_OVER;
                }
            }
            //0166
            sendframe.SetSendFrame(CBinary("\x31\x03\x30\x04", 4));
            rfRet = SendDataComm(sendframe);
            m_binRecive = rfRet.GetFirst();
            if (!m_binRecive.GetByteCount() || checkIs7f(m_binRecive) || (m_binRecive.GetByteCount() > 4 && m_binRecive[4] != 0x20))
            {
                CMessageBoxCtrl::SetBusyStatus(false);
                sendframe.SetSendFrame(CBinary("\x10\x01", 2));
                rfRet = SendDataComm(sendframe);
                if (selectmenu >= 5)
                    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000001D"), g_GetTxtStringFormHtml("0x0000B21F"));
                else
                    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BE74"), g_GetTxtStringFormHtml("0x0000B140,0x0000B21F"), DF_MB_OK, DT_LEFT);
                count[4]++;
                FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml(TXT_HTML_STATE_VALUE_IGNITION_OFF));
                FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B99E"), g_GetTxtStringFormHtml("0x0000B99F,0x00004BE4"));
                if (count[4] == 1)
                    break;//执行步骤7
                if (count[4] == 2)
                {
                    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000069"), g_GetTxtStringFormHtml("0x0000006A,0x0000B105"), DF_MB_OK, DT_LEFT);
                    return CErrorCode::EC_TIME_OVER;
                }
            }
            //step12
            sendframe.SetSendFrame(CBinary("\x10\x01", 2));
            rfRet = SendDataComm(sendframe);
            m_pNetLayer->KeepLink(0);//链路断开
            CMessageBoxCtrl::SetBusyStatus(false);
            if (selectmenu >= 5)  // 完成
                FxShowMessageBox(g_GetTxtStringFormHtml("0x90023725"), g_GetTxtStringFormHtml("0x0000BE74") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002A16C") + "\n" + "\n" +
                    g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OK, DT_LEFT);
            else
                FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BE74"), g_GetTxtStringFormHtml("0x0000BE74") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002A16C") + "\n" + "\n" +
                    g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OK, DT_LEFT);
            // 点火关闭
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml(TXT_HTML_STATE_VALUE_IGNITION_OFF));
            // 故障码
            CheckSysDTCNubCBCEC(PTL_CAN_11_500K, PTL_CAN_11_125K, CBinary("\x07\x10\x08\x03\x19\x02\x0C\x00\x00\x00\x00", 11), CBinary("\x07\xDF\x08\x04\x14\xFF\xFF\xFF\x00\x00\x00", 11), CBinary("\x07\xDF\x08\x03\x19\x02\x0C\x00\x00\x00\x00", 11), 0x0718, 0x07E7, 0x07E7);

            //step22
            strall = g_GetTxtStringFormHtml("0x900080A6") + "\n" + "\n"
                + g_GetTxtStringFormHtml("0x9002B211") + "\n" + "\n"
                + g_GetTxtStringFormHtml("0x9002B212") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B214") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330");
            FxShowMessageBox(g_GetTxtStringFormHtml("0x90023725"), strall, DF_MB_OK, DT_LEFT);
            return iRet;
        }
    }

}




// 悬架启用
W_ErrorCode CSeviceFunctionNew::Hang_on_NEW_lansheng_L494_2016()
{
    W_ErrorCode iRet = 0;
    W_I16 iKey = 0;
    CSendFrame sendframe;
    CReceiveFrame rfRet;
    //协议链路层: 11位CAN 500K
    string strall = "";
    // 本例行程序可将底盘模块置于正常工作状态，这可使悬架充气.
    iRet = FxShowMessageBox(g_GetTxtStringFormHtml("0x0001D8E7"), g_GetTxtStringFormHtml("0x9002CEEB") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BE77")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B220") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BBAB"), DF_MB_OKCANCEL, DT_LEFT);
    if (iRet == DF_IDCANCEL)
        return iRet;

    // 判断电压
    iRet = CheckEngineStop(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xF4\x0C\x00\x00\x00\x00", 11), 0x07E8, CBinary("\x01\x00", 2));
    if (iRet < 0)
        return 0;

    // 点火打开
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x9000808A"));
    // 悬挂启用
    iRet = FxShowMessageBox(g_GetTxtStringFormHtml("0x0001D8E7"), g_GetTxtStringFormHtml("0x90023723") + "\n" + "\n" + g_GetTxtStringFormHtml("0x90023726")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OKCANCEL, DT_LEFT);
    if (iRet == DF_IDCANCEL)
    {
        return iRet;
    }

    //step8
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000001D"), g_GetTxtStringFormHtml("0x0000B09D"), DF_MB_NOBUTTON);

    // CMessageBoxCtrl::SetBusyStatus(true);
    EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x10\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x0718);
    SendDataComm(CBinary("\x22\xf1\x03", 3));
    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x10\x08\x02\x10\x03\x00\x00\x00\x00\x00", 11), 0x0718);
    if (iRet < 0)
    {
        CMessageBoxCtrl::SetBusyStatus(false);
        FxShowMessageBox(FxGetStdString(STD_INFO_COMMUNICATION_STATUS), FxGetStdString(STD_INFO_NO_COMMUNICATION_SYS), DF_MB_BACK, DT_LEFT);
        return iRet;
    }
    rfRet = m_rfRet;
    m_binRecive = rfRet.GetFirst();
    if (m_binRecive.GetByteCount())
    {
        m_binRecive = CBinary(m_binRecive.GetBuffer() + 4, m_binRecive.GetByteCount() - 4);
        if (checkIs7f(m_binRecive))
        {
            CMessageBoxCtrl::SetBusyStatus(false);
            sendframe.SetSendFrame(CBinary("\x10\x01", 2));
            rfRet = SendDataComm(sendframe);
            FxShowMessageBox(g_GetTxtStringFormHtml("0x0000001D"), g_GetTxtStringFormHtml("0x0000B0AC"));
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml(TXT_HTML_STATE_VALUE_IGNITION_OFF));
            strall = g_GetTxtStringFormHtml("0x0000006A") + "\n\n"
                + g_GetTxtStringFormHtml("0x0000006B") + "\n\n"
                + g_GetTxtStringFormHtml("0x0000006C");
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00000069"), strall, DF_MB_OK, DT_LEFT);
            m_pNetLayer->KeepLink(0);//打断链路
            iRet = CheckSysDTCNubCCAF4(PTL_CAN_11_500K, PTL_CAN_11_125K, CBinary("\x07\x10\x08\x03\x19\x02\x0C\x00\x00\x00\x00", 11), CBinary("\x07\xDF\x08\x04\x14\xFF\xFF\xFF\x00\x00\x00", 11), 0x0718, 0x07E7);
            return iRet;
        }
    }
    //if (type == 2)
    //{
    //    iRet=SafeLogin_Standard3(CBinary("\x27\x01",2),0x32BF9E);
    //}
    //else

    iRet = SafeLogin_Standard3(CBinary("\x27\x03", 2), 0x32BF9E);
    if (iRet == CErrorCode::EC_ECU_REFUSE || iRet < 0)
    {
        CMessageBoxCtrl::SetBusyStatus(false);
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000001D"), g_GetTxtStringFormHtml("0x0000B0AC"));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml(TXT_HTML_STATE_VALUE_IGNITION_OFF));
        strall = g_GetTxtStringFormHtml("0x0000006A") + "\n\n"
            + g_GetTxtStringFormHtml("0x0000006B") + "\n\n"
            + g_GetTxtStringFormHtml("0x0000006C");
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000069"), strall, DF_MB_OK, DT_LEFT);
        m_pNetLayer->KeepLink(0);//打断链路
        iRet = CheckSysDTCNubCCAF4(PTL_CAN_11_500K, PTL_CAN_11_125K, CBinary("\x07\x10\x08\x03\x19\x02\x0C\x00\x00\x00\x00", 11), CBinary("\x07\xDF\x08\x04\x14\xFF\xFF\xFF\x00\x00\x00", 11), 0x0718, 0x07E7);
        return iRet;
    }

    sendframe.SetSendFrame(CBinary("\x31\x01\x30\x04\x04", 5)); // 07 10 08 05 31 01 30 04 04 00 00
    rfRet = SendDataComm(sendframe);
    m_binRecive = rfRet.GetFirst();
    if (m_binRecive.GetByteCount() <= 3 || checkIs7f(m_binRecive))
    {
        CMessageBoxCtrl::SetBusyStatus(false);
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000001D"), g_GetTxtStringFormHtml("0x0000B0AC"));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml(TXT_HTML_STATE_VALUE_IGNITION_OFF));
        strall = g_GetTxtStringFormHtml("0x0000006A") + "\n\n"
            + g_GetTxtStringFormHtml("0x0000006B") + "\n\n"
            + g_GetTxtStringFormHtml("0x0000006C");
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000069"), strall, DF_MB_OK, DT_LEFT);
        m_pNetLayer->KeepLink(0);//打断链路
        iRet = CheckSysDTCNubCCAF4(PTL_CAN_11_500K, PTL_CAN_11_125K, CBinary("\x07\x10\x08\x03\x19\x02\x0C\x00\x00\x00\x00", 11), CBinary("\x07\xDF\x08\x04\x14\xFF\xFF\xFF\x00\x00\x00", 11), 0x0718, 0x07E7);
        return iRet;
    }

    //step10
    CMessageBoxCtrl::SetBusyStatus(false);
    PleaseWait_xS_haveTTL(5000, g_GetTxtStringFormHtml("0x0000B09D"), g_GetTxtStringFormHtml("0x0000001D"));
    sendframe.SetSendFrame(CBinary("\x10\x01", 2));
    rfRet = SendDataComm(sendframe);
    m_pNetLayer->KeepLink(0);//打断链路

    // 悬挂完成
    iRet = FxShowMessageBox(g_GetTxtStringFormHtml("0x0001D8E7"), g_GetTxtStringFormHtml("0x90023723") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002A16C")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OKCANCEL, DT_LEFT);
    if (iRet == DF_IDCANCEL)
    {
        return iRet;
    }

    // 点火关闭
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml(TXT_HTML_STATE_VALUE_IGNITION_OFF));
    // 点火打开
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"));

    // 该应用程序可用于较长时间暴露在外的车辆的调平，比如说停放在展厅的车辆.
    strall = g_GetTxtStringFormHtml("0x0000BC36") + "\n\n"
        + g_GetTxtStringFormHtml("0x0000BC37") + "\n\n"
        + g_GetTxtStringFormHtml("0x0000BC38") + "\n\n"
        + g_GetTxtStringFormHtml("0x0000BC39") + "\n\n"
        + g_GetTxtStringFormHtml("0x9002A1F3");
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0001D8E7"), strall, DF_MB_OKCANCEL, DT_LEFT);
    if (iKey == DF_IDCANCEL)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml(TXT_HTML_STATE_VALUE_IGNITION_OFF));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B8D1"));
        iRet = CheckSysDTCNubCCAF4(PTL_CAN_11_500K, PTL_CAN_11_125K, CBinary("\x07\x10\x08\x03\x19\x02\x0C\x00\x00\x00\x00", 11), CBinary("\x07\xDF\x08\x04\x14\xFF\xFF\xFF\x00\x00\x00", 11), 0x0718, 0x07E7);
        return iRet;
    }

    for (int i = 0;; i = 1) // 循环
    {
        CMessageBoxCtrl::SetBusyStatus(true);
        FxShowMessageBox(FxGetStdString(STD_INFO_COMMUNICATION_STATUS), g_GetTxtStringFormHtml("0x0000B09D"), DF_MB_NOBUTTON, DT_LEFT);

        //EnterSystem(PTL_CAN_11_500K,CBinary("07\x10\x08\x03\x22\xF1\x03\x00\x00\x00\x00 ",11),0x0718);
        EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x10\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x0718);
        SendDataComm(CBinary("\x22\xf1\x03", 3));
        iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x10\x08\x02\x10\x03\x00\x00\x00\x00\x00", 11), 0x0718);
        iRet = EnterCheck(iRet);
        if (iRet < 0)
            return iRet;

        iRet = SafeLogin_Standard3(CBinary("\x27\x01", 2), 0x32BF9E);  // 07 10 08 02 27 01 00 00 00 00 00
        if (!(iRet == CErrorCode::EC_ECU_REFUSE || iRet < 0))
            break;
        if (i)
        {
            CMessageBoxCtrl::SetBusyStatus(false);
            FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000BE89"));
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml(TXT_HTML_STATE_VALUE_IGNITION_OFF));
            FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B208"));
            iRet = CheckSysDTCNubCCAF4(PTL_CAN_11_500K, PTL_CAN_11_125K, CBinary("\x07\x10\x08\x03\x19\x02\x0C\x00\x00\x00\x00", 11), CBinary("\x07\xDF\x08\x04\x14\xFF\xFF\xFF\x00\x00\x00", 11), 0x0718, 0x07E7);
            return iRet;
        }
    }

    sendframe.SetSendFrame(CBinary("\x22\x3B\x3B", 3));  // 07 10 08 03 22 3B 3B 00 00 00 00
    rfRet = SendDataComm(sendframe);
    sendframe.SetSendFrame(CBinary("\x22\x20\x39", 3));  // 07 10 08 03 22 20 39 00 00 00 00
    rfRet = SendDataComm(sendframe);
    m_binRecive = rfRet.GetFirst();
    CMessageBoxCtrl::SetBusyStatus(false);
    if (m_binRecive.GetByteCount() <= 3 || checkIs7f(m_binRecive) || m_binRecive[3] != 0x02)  // 07 18 08 04 62 20 39 02 00 00 00
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000BC3E,0x0000BC3F"), DF_MB_OK, DT_LEFT);
        sendframe.SetSendFrame(CBinary("\x2E\x3B\x5A\x00", 4));
        rfRet = SendDataComm(sendframe);
        m_binRecive = rfRet.GetFirst();
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml(TXT_HTML_STATE_VALUE_IGNITION_OFF));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000BC40"));
        iRet = CheckSysDTCNubCCAF4(PTL_CAN_11_500K, PTL_CAN_11_125K, CBinary("\x07\x10\x08\x03\x19\x02\x0C\x00\x00\x00\x00", 11), CBinary("\x07\xDF\x08\x04\x14\xFF\xFF\xFF\x00\x00\x00", 11), 0x0718, 0x07E7);
        return iRet;
    }

    sendframe.SetSendFrame(CBinary("\x22\xD1\x19", 3));  // 07 10 08 03 22 D1 19 00 00 00 00
    rfRet = SendDataComm(sendframe);
    m_binRecive = rfRet.GetFirst();
    if (m_binRecive.GetByteCount() <= 3 || checkIs7f(m_binRecive) || m_binRecive[3] != 0x01)  // 07 18 08 04 62 D1 19 01 00 00 00
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000BC41,0x0000BC3F"), DF_MB_OK, DT_LEFT);
        sendframe.SetSendFrame(CBinary("\x2E\x3B\x5A\x00", 4));
        rfRet = SendDataComm(sendframe);
        m_binRecive = rfRet.GetFirst();
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml(TXT_HTML_STATE_VALUE_IGNITION_OFF));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000BC40"));
        iRet = CheckSysDTCNubCCAF4(PTL_CAN_11_500K, PTL_CAN_11_125K, CBinary("\x07\x10\x08\x03\x19\x02\x0C\x00\x00\x00\x00", 11), CBinary("\x07\xDF\x08\x04\x14\xFF\xFF\xFF\x00\x00\x00", 11), 0x0718, 0x07E7);
        return iRet;
    }
    strall = g_GetTxtStringFormHtml("0x0000BC42") + "\n\n\n\n\n"  // 满足应用程序入口条件
        + g_GetTxtStringFormHtml("0x0000BC3D");

    while (1)
    {
        while (1)
        {
            CMessageBoxCtrl::SetOkBtnText(g_GetTxtStringFormHtml("0x0000BE5B"));
            iKey = 0;  // 展示厅充气应用程序        满足应用程序入口条件
            iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BC3B"), strall, DF_MB_OK | DF_MB_HAVEBUTTON_DRAW_THEN_RETURN, DT_LEFT);
            CMessageBoxCtrl::ResetOkBtnText();
            Sleep(260);
            if (iKey == DF_IDOK)
            {
                sendframe.SetSendFrame(CBinary("\x2E\x3B\x5A\x00", 4));
                rfRet = SendDataComm(sendframe);
                m_binRecive = rfRet.GetFirst();
                sendframe.SetSendFrame(CBinary("\x10\x01", 2));
                rfRet = SendDataComm(sendframe);
                FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml(TXT_HTML_STATE_VALUE_IGNITION_OFF));
                FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B8D1"));
                iRet = CheckSysDTCNubCCAF4(PTL_CAN_11_500K, PTL_CAN_11_125K, CBinary("\x07\x10\x08\x03\x19\x02\x0C\x00\x00\x00\x00", 11), CBinary("\x07\xDF\x08\x04\x14\xFF\xFF\xFF\x00\x00\x00", 11), 0x0718, 0x07E7);
                return iRet;
            }

            sendframe.SetSendFrame(CBinary("\x22\x3B\x3F", 3));  // 07 10 08 03 22 3B 3F 00 00 00 00
            rfRet = SendDataComm(sendframe);
            sendframe.SetSendFrame(CBinary("\x2F\x3B\x3F\x03\x00\x00\x00\x00\x01\x00\x00\x00", 12));  // 07 10 08 10 0C 2F 3B 3F 03 00 00
            rfRet = SendDataComm(sendframe);
            m_binRecive = rfRet.GetFirst();
            if (m_binRecive.GetByteCount() > 2 && !checkIs7f(m_binRecive))
            {
                sendframe.SetSendFrame(CBinary("\x2E\x3B\x5A\x01", 4));  // 07 10 08 04 2E 3B 5A 01 00 00 00
                rfRet = SendDataComm(sendframe);
                m_binRecive = rfRet.GetFirst();
                if (m_binRecive.GetByteCount() > 2 && !checkIs7f(m_binRecive))
                {
                    sendframe.SetSendFrame(CBinary("\x2F\xF4\x0C\x03\x0F\xA0", 6));  // 07 10 08 06 2F F4 0C 03 0F A0 00
                    rfRet = SendDataComm(sendframe);
                    m_binRecive = rfRet.GetFirst();
                    if (m_binRecive.GetByteCount() > 2 && !checkIs7f(m_binRecive))
                        break;
                }
            }
        }

        sendframe.SetSendFrame(CBinary("\x2F\x3B\x56\x03\x00", 5));  // 07 10 08 05 2F 3B 56 03 00 00 00
        rfRet = SendDataComm(sendframe);
        m_binRecive = rfRet.GetFirst();
        if (m_binRecive.GetByteCount() > 2 && !checkIs7f(m_binRecive))
            break;

    }

    //step15
    while (1)
    {
        do
        {
            while (1)
            {
                while (1)
                {
                    while (1)
                    {
                        Sleep(260);
                        CMessageBoxCtrl::SetOkBtnText(g_GetTxtStringFormHtml("0x0000BE5B"));
                        iKey = 0;
                        iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BC3B"), strall, DF_MB_OK | DF_MB_HAVEBUTTON_DRAW_THEN_RETURN, DT_LEFT);
                        CMessageBoxCtrl::ResetOkBtnText();
                        if (iKey == DF_IDOK)
                        {
                            sendframe.SetSendFrame(CBinary("\x2E\x3B\x5A\x00", 4));
                            rfRet = SendDataComm(sendframe);
                            m_binRecive = rfRet.GetFirst();
                            sendframe.SetSendFrame(CBinary("\x10\x01", 2));
                            rfRet = SendDataComm(sendframe);
                            FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml(TXT_HTML_STATE_VALUE_IGNITION_OFF));
                            FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B8D1"));
                            iRet = CheckSysDTCNubCCAF4(PTL_CAN_11_500K, PTL_CAN_11_125K, CBinary("\x07\x10\x08\x03\x19\x02\x0C\x00\x00\x00\x00", 11), CBinary("\x07\xDF\x08\x04\x14\xFF\xFF\xFF\x00\x00\x00", 11), 0x0718, 0x07E7);
                            return iRet;
                        }

                        sendframe.SetSendFrame(CBinary("\x22\xF4\x42", 3));  // 07 10 08 03 22 F4 42 00 00 00 00
                        rfRet = SendDataComm(sendframe);
                        sendframe.SetSendFrame(CBinary("\x22\x3B\x39", 3));  // 07 10 08 03 22 3B 39 00 00 00 00
                        rfRet = SendDataComm(sendframe);
                        m_binRecive = rfRet.GetFirst();
                        if (m_binRecive.GetByteCount() > 3 && !checkIs7f(m_binRecive))
                            break;
                    }
                    if (m_binRecive[3] != 1)
                        break;

                    sendframe.SetSendFrame(CBinary("\x2E\x3B\x5A", 3));  // 07 10 08 04 2E 3B 5A 00 00 00 00
                    rfRet = SendDataComm(sendframe);
                    CMessageBoxCtrl::SetBusyStatus(false);
                    sendframe.SetSendFrame(CBinary("\x10\x01", 2));
                    rfRet = SendDataComm(sendframe);




                    //strall = g_GetTxtStringFormHtml("0x0000BC42") + "\n\n"
                    //    + g_GetTxtStringFormHtml("0x0000BC43") + "\n\n"
                    //    + g_GetTxtStringFormHtml("0x0000BC3D");
                    //CMessageBoxCtrl::SetOkBtnText(g_GetTxtStringFormHtml("0x0000BE5B"));
                    //iKey = 0;
                    //iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BC3B"),strall,DF_MB_OK|DF_MB_HAVEBUTTON_DRAW_THEN_RETURN,DT_LEFT);
                    //CMessageBoxCtrl::ResetOkBtnText();

                    //sendframe.SetSendFrame(CBinary("\x22\x3B\x3D",3));
                    //rfRet = SendDataComm(sendframe);
                    //m_binRecive = rfRet.GetFirst();
                    //if (m_binRecive.GetByteCount() <= 3 || checkIs7f(m_binRecive) || m_binRecive[3] != 0x2C)
                    //    continue;
                    //sendframe.SetSendFrame(CBinary("\x22\x3B\x50",3));
                    //rfRet = SendDataComm(sendframe);
                    //m_binRecive = rfRet.GetFirst();
                    //if (m_binRecive.GetByteCount()<=3 || !m_binRecive[3])
                    //{
                    //    sendframe.SetSendFrame(CBinary("\x22\x3B\x08",3));
                    //    rfRet = SendDataComm(sendframe);
                    //}
                }
                //if (m_binRecive[3] != 8)
                //    break;
                //strall = g_GetTxtStringFormHtml("0x0000BC42") + "\n\n"
                //    + g_GetTxtStringFormHtml("0x0000BC44") + "\n\n"
                //    + g_GetTxtStringFormHtml("0x0000BC3D");
                //CMessageBoxCtrl::SetOkBtnText(g_GetTxtStringFormHtml("0x0000BE5B"));
                //iKey = 0;
                //iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BC3B"),strall,DF_MB_OK|DF_MB_HAVEBUTTON_DRAW_THEN_RETURN,DT_LEFT);
                //CMessageBoxCtrl::ResetOkBtnText();
                //sendframe.SetSendFrame(CBinary("\x22\x3B\x3D",3));
                //rfRet = SendDataComm(sendframe);
                //m_binRecive = rfRet.GetFirst();
                //if (!(m_binRecive.GetByteCount()<=3 || checkIs7f(m_binRecive) || m_binRecive[3] != 0x2C))
                //{
                //    sendframe.SetSendFrame(CBinary("\x22\x3B\x50",3));
                //    rfRet = SendDataComm(sendframe);
                //    m_binRecive = rfRet.GetFirst();
                //    if (m_binRecive.GetByteCount() > 3 && m_binRecive[3])
                //        continue;
                //}
                //sendframe.SetSendFrame(CBinary("\x22\x3B\x08",3));//0162
                //rfRet = SendDataComm(sendframe);
                //m_binRecive = rfRet.GetFirst();
                //if (m_binRecive.GetByteCount() <= 3 && checkIs7f(m_binRecive))
                //{
                //    continue;
                //}
                //if (m_binRecive.GetByteCount()>3 && m_binRecive[3] == 1)
                //{
                //    strall = g_GetTxtStringFormHtml("0x0000BC42") + "\n\n"
                //        + g_GetTxtStringFormHtml("0x0000BC45") + "\n\n"
                //        + g_GetTxtStringFormHtml("0x0000BC3D");
                //    CMessageBoxCtrl::SetOkBtnText(g_GetTxtStringFormHtml("0x0000BE5B"));
                //    iKey = 0;
                //    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BC3B"),strall,DF_MB_OK|DF_MB_HAVEBUTTON_DRAW_THEN_RETURN,DT_LEFT);
                //    CMessageBoxCtrl::ResetOkBtnText();
                //    sendframe.SetSendFrame(CBinary("\x22\x3B\x3D",3));
                //    if (iKey == DF_IDOK)//点击终止
                //    {
                //        sendframe.SetSendFrame(CBinary("\x2E\x3B\x5A\x00",4));
                //        rfRet = SendDataComm(sendframe);
                //        sendframe.SetSendFrame(CBinary("\x10\x01",2));
                //        rfRet = SendDataComm(sendframe);
                //        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"),g_GetTxtStringFormHtml(TXT_HTML_STATE_VALUE_IGNITION_OFF));
                //        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"),g_GetTxtStringFormHtml("0x0000B8D1"));
                //        iRet = CheckSysDTCNubCCAF4(PTL_CAN_11_500K,PTL_CAN_11_125K,CBinary("\x07\x10\x08\x03\x19\x02\x0C\x00\x00\x00\x00",11),CBinary("\x07\xDF\x08\x04\x14\xFF\xFF\xFF\x00\x00\x00",11),0x0718,0x07E7);
                //        return iRet;
                //    }
                //}
                //else if (m_binRecive.GetByteCount()<=3 || !m_binRecive[3])
                //{
                //    sendframe.SetSendFrame(CBinary("\x2E\x3B\x5A\x00",4));
                //    rfRet = SendDataComm(sendframe);
                //    sendframe.SetSendFrame(CBinary("\x10\x01",2));
                //    rfRet = SendDataComm(sendframe);
                //    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"),g_GetTxtStringFormHtml(TXT_HTML_STATE_VALUE_IGNITION_OFF));
                //    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"),g_GetTxtStringFormHtml("0x0000B208"));
                //    iRet = CheckSysDTCNubCCAF4(PTL_CAN_11_500K,PTL_CAN_11_125K,CBinary("\x07\x10\x08\x03\x19\x02\x0C\x00\x00\x00\x00",11),CBinary("\x07\xDF\x08\x04\x14\xFF\xFF\xFF\x00\x00\x00",11),0x0718,0x07E7);
                //    return iRet;
                //}
            }
        } while (m_binRecive[3] != 0x0F);
        //if (type != 2)
        //    break;
        strall = g_GetTxtStringFormHtml("0x0000BC42") + "\n\n"
            + g_GetTxtStringFormHtml("0x0000BF6E") + "\n\n"
            + g_GetTxtStringFormHtml("0x0000BC3D");
        CMessageBoxCtrl::SetOkBtnText(g_GetTxtStringFormHtml("0x0000BE5B"));
        iKey = 0;
        iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BC3B"), strall, DF_MB_OK | DF_MB_HAVEBUTTON_DRAW_THEN_RETURN, DT_LEFT);
        CMessageBoxCtrl::ResetOkBtnText();
        if (iKey == DF_IDOK)//点击终止
        {
            sendframe.SetSendFrame(CBinary("\x2E\x3B\x5A\x00", 4));
            rfRet = SendDataComm(sendframe);
            sendframe.SetSendFrame(CBinary("\x10\x01", 2));
            rfRet = SendDataComm(sendframe);
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml(TXT_HTML_STATE_VALUE_IGNITION_OFF));
            FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B8D1"));
            iRet = CheckSysDTCNubCCAF4(PTL_CAN_11_500K, PTL_CAN_11_125K, CBinary("\x07\x10\x08\x03\x19\x02\x0C\x00\x00\x00\x00", 11), CBinary("\x07\xDF\x08\x04\x14\xFF\xFF\xFF\x00\x00\x00", 11), 0x0718, 0x07E7);
            return iRet;
        }
    }

    // 点火关闭
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml(TXT_HTML_STATE_VALUE_IGNITION_OFF));
    // 中止程序
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B208"));
    // 故障码
    iRet = CheckSysDTCNubCCAF4(PTL_CAN_11_500K, PTL_CAN_11_125K, CBinary("\x07\x10\x08\x03\x19\x02\x0C\x00\x00\x00\x00", 11), CBinary("\x07\xDF\x08\x04\x14\xFF\xFF\xFF\x00\x00\x00", 11), 0x0718, 0x07E7);
    return iRet;


}



// 悬挂几何装置
W_ErrorCode CSeviceFunctionNew::Hang_on_triangle_NEW_lansheng_L494_2016()
{
    W_ErrorCode iRet = 0;
    W_I16 iKey = 0;
    CSendFrame sendframe;
    CReceiveFrame rfRet;
    //协议链路层: 11位CAN 500K
    W_I16 selectmenu;
    CBinary Cmd;
    string Title = "";

    // 通过本应用程序可将空气悬架系统置于缩小公差模式，从而执行几何测量或调节
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x90022D6B"), g_GetTxtStringFormHtml("0x90026F00")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x90026F01") + "\n" + "\n" + g_GetTxtStringFormHtml("0x90022F8D"), DF_MB_OKCANCEL, DT_LEFT);
    if (iKey == DF_IDCANCEL)
        return iRet;

    // 菜单选项
    CMenuCtrl uiMenu;
    while (1)
    {
        uiMenu.InitCtrl(g_GetTxtStringFormHtml("0x0000BFD4"));
        uiMenu.AddOneItem(g_GetTxtStringFormHtml("0x0000BFD5"));  // 缩小公差
        uiMenu.AddOneItem(g_GetTxtStringFormHtml("0x0000B160"));  // 正常模式
        selectmenu = uiMenu.ShowCtrl();
        if (selectmenu == -1)
        {
            return 0;
        }
        else if (selectmenu == 0)
        {
            Cmd = CBinary("\x2E\x3B\x5A\x01", 4);   // 07 10 08 04 2E 3B 5A 01 00 00 00
            Title = g_GetTxtStringFormHtml("0x0000BFD5");
            break;
        }
        else if (selectmenu == 1)
        {
            Cmd = CBinary("\x2E\x3B\x5A\x00", 4);  // 07 10 08 04 2E 3B 5A 00 00 00 00
            Title = g_GetTxtStringFormHtml("0x0000B160");
            break;
        }
    }

    // 点火打开
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"));

    //step4
    CMessageBoxCtrl::SetBusyStatus(true);

    FxShowMessageBox(Title, Title + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000B09D"), DF_MB_NOBUTTON, DT_LEFT);
    EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x10\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x0718);
    SendDataComm(CBinary("\x22\xf1\x03", 3));
    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x10\x08\x02\x10\x03\x00\x00\x00\x00\x00", 11), 0x0718);
    if (iRet < 0)
    {
        CMessageBoxCtrl::SetBusyStatus(false);
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        FxShowMessageBox(FxGetStdString(STD_INFO_COMMUNICATION_STATUS), FxGetStdString(STD_INFO_NO_COMMUNICATION_SYS), DF_MB_BACK, DT_LEFT);
        return iRet;
    }
    rfRet = m_rfRet;
    m_binRecive = rfRet.GetFirst();
    if (m_binRecive.GetByteCount())
    {
        m_binRecive = CBinary(m_binRecive.GetBuffer() + 4, m_binRecive.GetByteCount() - 4);
        if (checkIs7f(m_binRecive))
        {
            CMessageBoxCtrl::SetBusyStatus(false);
            sendframe.SetSendFrame(CBinary("\x10\x01", 2));
            rfRet = SendDataComm(sendframe);
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));
            return CErrorCode::EC_ECU_REFUSE;
        }
    }

    //安全访问
    iRet = SafeLogin_Standard3(CBinary("\x27\x03", 2), 0x32BF9E);

    if (m_stropenfileConfigMenu == "module_special_X351_2016.ctv" || m_stropenfileConfigMenu == "module_special_L494_2016.ctv")
    {
        m_pNetLayer->KeepLink(2000, CSendFrame(CBinary("\x3E\x80", 2)));
    }
    if (iRet == CErrorCode::EC_ECU_REFUSE)
    {
        CMessageBoxCtrl::SetBusyStatus(false);
        FxShowMessageBox(FxGetStdString(STD_TTL_MSG_INFORMATION), g_GetTxtStringFormHtml("0x0000B09F"), DF_MB_BACK);
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        return CErrorCode::EC_ECU_REFUSE;
    }
    else if (iRet < 0)
    {
        CMessageBoxCtrl::SetBusyStatus(false);
        FxShowMessageBox(FxGetStdString(STD_INFO_COMMUNICATION_STATUS), FxGetStdString(STD_INFO_NO_COMMUNICATION_SYS), DF_MB_BACK, DT_LEFT);
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        return CErrorCode::EC_TIME_OVER;
    }


    sendframe.SetSendFrame(Cmd);  // 2E 3B 5A
    rfRet = SendDataComm(sendframe);
    m_binRecive = rfRet.GetFirst();
    sendframe.SetSendFrame(CBinary("\x10\x01", 2));
    rfRet = SendDataComm(sendframe);
    m_pNetLayer->KeepLink(0);//打断链路
    CMessageBoxCtrl::SetBusyStatus(false);
    if (m_binRecive.GetByteCount() < 2 || checkIs7f(m_binRecive))
    {
        if (!m_binRecive.GetByteCount())
        {
            FxShowMessageBox(FxGetStdString(STD_INFO_COMMUNICATION_STATUS), FxGetStdString(STD_INFO_NO_COMMUNICATION_SYS), DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_TIME_OVER;
        }
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B0AC"));
        return CErrorCode::EC_TIME_OVER;
    }

    // 完成
    FxShowMessageBox(Title, Title + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000B0A3"));

    // 点火关闭
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml(TXT_HTML_STATE_VALUE_IGNITION_OFF));

    if (selectmenu == 0)  // 缩小公差
    {
        // 已将空气悬架系统置于缩小公差模式，可执行几何测量或调节
        FxShowMessageBox(g_GetTxtStringFormHtml("0x90022D6B"), g_GetTxtStringFormHtml("0x900080A6")
            + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BFD6") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BFD1")
            + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OK, DT_LEFT);
    }
    else if (selectmenu == 1)  // 正常模式
    {
        //     已将空气悬架系统置于正常模式
        FxShowMessageBox(g_GetTxtStringFormHtml("0x90022D6B"), g_GetTxtStringFormHtml("0x900080A6") + "\n" + "\n" + g_GetTxtStringFormHtml("0x90026F03")
            + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OK, DT_LEFT);

        // 故障码
        iRet = CheckSysDTCNubCCAF4(PTL_CAN_11_500K, PTL_CAN_11_125K, CBinary("\x07\x10\x08\x03\x19\x02\x0C\x00\x00\x00\x00", 11), CBinary("\x07\xDF\x08\x04\x14\xFF\xFF\xFF\x00\x00\x00", 11), 0x0718, 0x07E7);
    }
    return iRet;

}




// 车头灯校准延迟装置
W_ErrorCode CSeviceFunctionNew::Tol_tight_NEW_lansheng_L494_2016()
{
    W_ErrorCode iRet = 0;
    W_I16 iKey = 0;
    CSendFrame sendframe;
    CReceiveFrame rfRet;
    //协议链路层: 11位CAN 500K
    W_I16 selectmenu;
    CBinary Cmd;
    string Title = "";

    // 通过本应用程序可将空气悬架系统置于缩小公差模式，从而执行几何测量或调节
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x90022D6B"), g_GetTxtStringFormHtml("0x90026F00")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x90026F01") + "\n" + "\n" + g_GetTxtStringFormHtml("0x90022F8D"), DF_MB_OKCANCEL, DT_LEFT);
    if (iKey == DF_IDCANCEL)
        return iRet;

    // 菜单选项
    CMenuCtrl uiMenu;
    while (1)
    {
        uiMenu.InitCtrl(g_GetTxtStringFormHtml("0x0000BFD4"));
        uiMenu.AddOneItem(g_GetTxtStringFormHtml("0x9002CF34"));  // 严格公差模式（大灯设置）
        uiMenu.AddOneItem(g_GetTxtStringFormHtml("0x0000B160"));  // 正常模式
        selectmenu = uiMenu.ShowCtrl();
        if (selectmenu == -1)
        {
            return 0;
        }
        else if (selectmenu == 0)
        {
            Cmd = CBinary("\x2E\x3B\x5A\x01", 4);   // 07 10 08 04 2E 3B 5A 01 00 00 00
            Title = g_GetTxtStringFormHtml("0x9002CF34");
            break;
        }
        else if (selectmenu == 1)
        {
            Cmd = CBinary("\x2E\x3B\x5A\x00", 4);  // 07 10 08 04 2E 3B 5A 00 00 00 00
            Title = g_GetTxtStringFormHtml("0x0000B160");
            break;
        }
    }

    // 点火打开
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"));

    //step4
    CMessageBoxCtrl::SetBusyStatus(true);

    FxShowMessageBox(Title, Title + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000B09D"), DF_MB_NOBUTTON, DT_LEFT);
    EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x10\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x0718);
    SendDataComm(CBinary("\x22\xf1\x03", 3));
    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x10\x08\x02\x10\x03\x00\x00\x00\x00\x00", 11), 0x0718);
    if (iRet < 0)
    {
        CMessageBoxCtrl::SetBusyStatus(false);
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        FxShowMessageBox(FxGetStdString(STD_INFO_COMMUNICATION_STATUS), FxGetStdString(STD_INFO_NO_COMMUNICATION_SYS), DF_MB_BACK, DT_LEFT);
        return iRet;
    }
    rfRet = m_rfRet;
    m_binRecive = rfRet.GetFirst();
    if (m_binRecive.GetByteCount())
    {
        m_binRecive = CBinary(m_binRecive.GetBuffer() + 4, m_binRecive.GetByteCount() - 4);
        if (checkIs7f(m_binRecive))
        {
            CMessageBoxCtrl::SetBusyStatus(false);
            sendframe.SetSendFrame(CBinary("\x10\x01", 2));
            rfRet = SendDataComm(sendframe);
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));
            return CErrorCode::EC_ECU_REFUSE;
        }
    }

    //安全访问
    iRet = SafeLogin_Standard3(CBinary("\x27\x03", 2), 0x32BF9E);

    if (m_stropenfileConfigMenu == "module_special_X351_2016.ctv" || m_stropenfileConfigMenu == "module_special_L494_2016.ctv")
    {
        m_pNetLayer->KeepLink(2000, CSendFrame(CBinary("\x3E\x80", 2)));
    }
    if (iRet == CErrorCode::EC_ECU_REFUSE)
    {
        CMessageBoxCtrl::SetBusyStatus(false);
        FxShowMessageBox(FxGetStdString(STD_TTL_MSG_INFORMATION), g_GetTxtStringFormHtml("0x0000B09F"), DF_MB_BACK);
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        return CErrorCode::EC_ECU_REFUSE;
    }
    else if (iRet < 0)
    {
        CMessageBoxCtrl::SetBusyStatus(false);
        FxShowMessageBox(FxGetStdString(STD_INFO_COMMUNICATION_STATUS), FxGetStdString(STD_INFO_NO_COMMUNICATION_SYS), DF_MB_BACK, DT_LEFT);
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        return CErrorCode::EC_TIME_OVER;
    }


    sendframe.SetSendFrame(Cmd);  // 2E 3B 5A
    rfRet = SendDataComm(sendframe);
    m_binRecive = rfRet.GetFirst();
    sendframe.SetSendFrame(CBinary("\x10\x01", 2));
    rfRet = SendDataComm(sendframe);
    m_pNetLayer->KeepLink(0);//打断链路
    CMessageBoxCtrl::SetBusyStatus(false);
    if (m_binRecive.GetByteCount() < 2 || checkIs7f(m_binRecive))
    {
        if (!m_binRecive.GetByteCount())
        {
            FxShowMessageBox(FxGetStdString(STD_INFO_COMMUNICATION_STATUS), FxGetStdString(STD_INFO_NO_COMMUNICATION_SYS), DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_TIME_OVER;
        }
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B0AC"));
        return CErrorCode::EC_TIME_OVER;
    }

    // 完成
    FxShowMessageBox(Title, Title + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000B0A3"));

    // 点火关闭
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml(TXT_HTML_STATE_VALUE_IGNITION_OFF));

    if (selectmenu == 0)  // 严格公差模式（大灯设置）
    {
        // 已将空气悬架系统置于缩小公差模式，可执行几何测量或调节
        FxShowMessageBox(g_GetTxtStringFormHtml("0x90022D6B"), g_GetTxtStringFormHtml("0x900080A6")
            + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BFD6") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BFD1")
            + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OK, DT_LEFT);
    }
    else if (selectmenu == 1)  // 正常模式
    {
        //     已将空气悬架系统置于正常模式
        FxShowMessageBox(g_GetTxtStringFormHtml("0x90022D6B"), g_GetTxtStringFormHtml("0x900080A6") + "\n" + "\n" + g_GetTxtStringFormHtml("0x90026F03")
            + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OK, DT_LEFT);

        // 故障码
        iRet = CheckSysDTCNubCCAF4(PTL_CAN_11_500K, PTL_CAN_11_125K, CBinary("\x07\x10\x08\x03\x19\x02\x0C\x00\x00\x00\x00", 11), CBinary("\x07\xDF\x08\x04\x14\xFF\xFF\xFF\x00\x00\x00", 11), 0x0718, 0x07E7);
    }
    return iRet;


}




// 行驶水平控制模块诊断接口
W_ErrorCode CSeviceFunctionNew::Rlcm_NEW_lansheng_L494_2016()
{
    W_ErrorCode iRet = CErrorCode::EC_SUCCESS;
    CSendFrame sendframe;
    CReceiveFrame rfRet;
    W_I16 iKey = 0;
    string strPormot;
    char charTemp[10];
    W_U32 uStandValue = 0xE7F9D2;
    W_I32 P_table[3][8] = { {0x2E8380,0x702F67,0xC845B9,0xBCB204,0x555D6F,0x82A0B9,0x287805,0x78EB7D},
    {0xD8CC9C,0x99925E,0x1F1CCB,0x1722F1,0x026D84,0x2DC17F,0x77AA89,0xC74E74},
    {0xA6979F,0x601649,0xED04E4,0xF631AE,0xC05A2A,0xA8BE33,0x787710,0xDDC746} };
    BYTE ptlModel = PTL_CAN_11_500K;
    CBinary enterCmd = CBinary("\x07\x10\x08\x02\x10\x03\x00\x00\x00\x00\x00", 11);
    W_U32 uAddPara = 0x0718;
    CBinaryGroup binCmdGroup;

    CBinary left_front_high = CBinary("\x22\x3B\x03", 3);//1  左前角高度
    CBinary left_front_sensor = CBinary("\x22\x3B\x70", 3);//2  左前高度传感器
    CBinary right_front_high = CBinary("\x22\x3B\x04", 3);//3  右前角高度
    CBinary right_front_sensor = CBinary("\x22\x3B\x71", 3);//4  右前高度传感器-电压
    CBinary left_back_high = CBinary("\x22\x3B\x05", 3); //5  左后角高度
    CBinary left_back_sensor = CBinary("\x22\x3B\x73", 3); // 6  左后高度传感器-电压
    CBinary right_back_high = CBinary("\x22\x3B\x06", 3);//7  右后角高度
    CBinary right_back_sensor = CBinary("\x22\x3B\x72", 3); // 8 右后高度传感器-电压
    CBinary flow_stress = CBinary("\x22\x3B\x07", 3); // 9 流道压力
    CBinary stress_sensor = CBinary("\x22\x3B\x6E", 3); //  10 压力传感器
    CBinary     elecmachine_tem = CBinary("\x22\xD1\x1C", 3); //11 电机温度
    CBinary compressor_tem = CBinary("\x22\xD1\x1A", 3); //12 压缩机温度


    //binCmdGroup.Append(CBinary("\x22\x3B\x03",3));//1  左前角高度
    //binCmdGroup.Append(CBinary("\x22\x3B\x70",3));//2  左前高度传感器
    //binCmdGroup.Append(CBinary("\x22\x3B\x04",3));//3  右前角高度
    //binCmdGroup.Append(CBinary("\x22\x3B\x71",3));//4  右前高度传感器-电压
    //binCmdGroup.Append(CBinary("\x22\x3B\x05",3));//5  左后角高度
    //binCmdGroup.Append(CBinary("\x22\x3B\x73",3));//6  左后高度传感器-电压
    //binCmdGroup.Append(CBinary("\x22\x3B\x06",3));//7  右后角高度
    //binCmdGroup.Append(CBinary("\x22\x3B\x72",3));//8  右后高度传感器-电压
    //binCmdGroup.Append(CBinary("\x22\x3B\x07",3));//9  压力
    //binCmdGroup.Append(CBinary("\x22\x3B\x6E",3));//10  压力传感器-电压
    //binCmdGroup.Append(CBinary("\x22\xD1\x1C",3));//11 电机温度
    //binCmdGroup.Append(CBinary("\x22\xD1\x1A",3));//12 压缩机温度

    //binCmdGroup.Append(CBinary("\x2F\x3B\x2C\x03\x00",5));
    //binCmdGroup.Append(CBinary("\x2F\x3B\x2B\x03\x00",5));
    //binCmdGroup.Append(CBinary("\x2F\x3B\x30\x03\x00",5));
    //binCmdGroup.Append(CBinary("\x2F\x3B\x2F\x03\x00",5));
    //binCmdGroup.Append(CBinary("\x2F\x3B\x29\x03\x00",5));
    //binCmdGroup.Append(CBinary("\x2F\x3B\x2A\x03\x00",5));
    //binCmdGroup.Append(CBinary("\x2F\x3B\x2D\x03\x00",5));
    //binCmdGroup.Append(CBinary("\x2F\x3B\x2E\x03\x00",5));
    //binCmdGroup.Append(CBinary("\x2F\x3B\x42\x03\x00\x00\x00\x00\x01\x00\x00\x00",12));

    uAddPara = 0x0718;
    uStandValue = 0x73D1D3;
    W_I32 P_table2[3][8] = { {0xBAAB81,0xE40766,0x5C6DB8,0x289A05,0xC1756E,0x1688B8,0xBC5004,0xECC37C},
    {0x4CE49D,0x0DBA5F,0x8B34CA,0x830AF0,0x964585,0xB9E97E,0xE38288,0x536675},
    {0x32BF9E,0xF43E48,0x792CE5,0x6219AF,0x54722B,0x3C9632,0xEC5F11,0x49EF47} };

    for (int i = 0; i < 3; i++)
        for (int j = 0; j < 8; j++)
            P_table[i][j] = P_table2[i][j];


    //step1
    //'使用此应用程序，可能会影响车辆的调平系统. '
    //'因此，您的动作可导致严重的人身伤害或财产损失. '
    //'为此，只有懂得在使用此应用程序时可能造成的后果的人，或是经过专门训练的，才能使用此应用程序. '        
    //警告!在使用此应用程序时不得在车辆下面工作.
    //警告!此程序可允许使用者执行可能导致车辆改变高度的操作.
    //注意！在使用该应用程序时要格外小心.
    //注意！确保车辆没有任何障碍物.
    //注意！在取出输气管之前，确保流道压力被释放至大气中.

    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BA83"), g_GetTxtStringFormHtml("0x0000BA84") + "\n\n" + g_GetTxtStringFormHtml("0x0000BA85") + "\n\n" + g_GetTxtStringFormHtml("0x0000BA86") + "\n\n" + g_GetTxtStringFormHtml("0x0000BA87")
        + "\n\n" + g_GetTxtStringFormHtml("0x0000BA88") + "\n\n" + g_GetTxtStringFormHtml("0x0000BA89") + "\n\n" + g_GetTxtStringFormHtml("0x0000BA8A") + "\n\n" + g_GetTxtStringFormHtml("0x0000BA8B") + "\n\n" + g_GetTxtStringFormHtml("0x9001E928")
        + "\n\n" + g_GetTxtStringFormHtml("0x9001E921") + "\n\n" + g_GetTxtStringFormHtml("0x9002339E") + "\n\n" + g_GetTxtStringFormHtml("0x9001E93E"), DF_MB_OKCANCEL, DT_LEFT);
    if (DF_IDCANCEL == iKey)
        return iRet;

    // 点火打开
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"), DF_MB_ANYKEYRETURN, DT_LEFT);

    //step3
    //链路
    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);
    EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x10\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x0718);
    iRet = EnterSystem(ptlModel, enterCmd, uAddPara);  //  PTL_CAN_11_500K    22 f1 03    0x0718
    if (iRet)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    rfRet = m_rfRet;
    CBinary binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount() < 5)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    m_binRecive = CBinary(binRecive.GetBuffer() + 4, binRecive.GetByteCount() - 4);
    if (checkIs7f(m_binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"), DF_MB_ANYKEYRETURN, DT_LEFT);//ECU不支持
        return iRet;
    }

    //安全访问
    iRet = SafeLogin_L405_2014_Oil(CBinary("\x27\x01", 2), uStandValue, P_table2);  // 32 BF 9E
    if (CErrorCode::EC_ECU_REFUSE == iRet)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000B09F"), DF_MB_ANYKEYRETURN, DT_LEFT);
        return iRet;
    }
    if (iRet < 0)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }
    //链路保持
    if (m_stropenfileConfigMenu == "module_special_X351_2016.ctv"
        || m_stropenfileConfigMenu == "module_special_X250_2013.ctv"
        || m_stropenfileConfigMenu == "module_special_L494_2016.ctv")
        m_pNetLayer->KeepLink(1000, CSendFrame(CBinary("\x3E\x80", 2)));
    else
        m_pNetLayer->KeepLink(1000, CSendFrame(CBinary("\x3E\x00", 2)));

    //step4
    CActTestCtrl uiActTest;
    uiActTest.InitCtrl(g_GetTxtStringFormHtml("0x0000BA83"));    //标题：行驶水平控制模块诊断接口
    uiActTest.SetFirstRowFixed(false);    //取消首行固定
    uiActTest.AddOneItem(g_GetTxtStringFormHtml("0x0000BA8C"), "mm");  // 左前角高度
    uiActTest.AddOneItem(g_GetTxtStringFormHtml("0x0000BA90"), "V");  // 左前高度传感器
    uiActTest.AddOneItem(g_GetTxtStringFormHtml("0x0000BA8D"), "mm"); //  右前角高度
    uiActTest.AddOneItem(g_GetTxtStringFormHtml("0x0000BA91"), "V");  // 右前高度传感器
    uiActTest.AddOneItem(g_GetTxtStringFormHtml("0x0000BA8E"), "mm"); // 左后角高度
    uiActTest.AddOneItem(g_GetTxtStringFormHtml("0x0000BA92"), "V");    // 左后高度传感器
    uiActTest.AddOneItem(g_GetTxtStringFormHtml("0x0000BA8F"), "mm"); // 右后角高度.
    uiActTest.AddOneItem(g_GetTxtStringFormHtml("0x0000BA93"), "V");  // 右后高度传感器
    uiActTest.AddOneItem(g_GetTxtStringFormHtml("0x0000BA94"), "KPa");        // 流道压力.
    uiActTest.AddOneItem(g_GetTxtStringFormHtml("0x00000A62"), "V");    // 压力传感器
    uiActTest.AddOneItem(g_GetTxtStringFormHtml("0x00001A0A"), FxGetStdString(CBinary("\x4A\xAA\x00\x00\x00\x05", 6)));  // 电机温度
    uiActTest.AddOneItem(g_GetTxtStringFormHtml("0x0000BA95"), FxGetStdString(CBinary("\x4A\xAA\x00\x00\x00\x05", 6)));  // 压缩机温度


    while (1)
    {

        // 左前角高度
        char buf[30];
        string contain_left_front_high = "";
        string my_error = FxGetStdString(CBinary("\x4A\x00\x00\x01\x00\x0B", 6));
        int value_left_front_high;

        sendframe.SetSendFrame(left_front_high);
        rfRet = SendDataComm(sendframe);
        m_binRecive = rfRet.GetFirst();
        binRecive = m_binRecive;
        if (binRecive.GetByteCount() < 3)
        {
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_TIME_OVER;
        }
        if (binRecive[0] != 0x62 || binRecive[1] != 0x3B || binRecive[2] != 0x03)
        {
            contain_left_front_high = my_error;
            //FxShowMessageBox(STD_TTL_MSG_INFORMATION,STD_TXT_MSG_COMMFAIL,DF_MB_BACK,DT_LEFT);
            //return CErrorCode::EC_TIME_OVER;
        }
        else
        {
            value_left_front_high = (binRecive[3] * 256 + binRecive[4]) - 200;
            sprintf(buf, "%d", value_left_front_high);
            contain_left_front_high = buf;
        }


        // 左前角高度传感器
        string contain_left_front_sensor = "";
        float value_left_front_sensor;
        //sendframe.SetSendFrame(left_front_sensor);
        //rfRet=SendDataComm(sendframe);
        //m_binRecive = rfRet.GetFirst();
        m_binRecive = SendDataComm(left_front_sensor);
        binRecive = m_binRecive;
        if (binRecive.GetByteCount() < 3)
        {
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_TIME_OVER;
        }
        if (binRecive[0] != 0x62 || binRecive[1] != 0x3B || binRecive[2] != 0x70)
        {
            contain_left_front_sensor = my_error;
            //FxShowMessageBox(STD_TTL_MSG_INFORMATION,STD_TXT_MSG_COMMFAIL,DF_MB_BACK,DT_LEFT);
            //return CErrorCode::EC_TIME_OVER;
        }
        else
        {
            value_left_front_sensor = (binRecive[3] * 256 + binRecive[4]) * 0.025;
            sprintf(buf, "%.2f", value_left_front_sensor);
            contain_left_front_sensor = buf;
        }


        // 右前角高度
        string contain_right_front_high = "";
        int value_right_front_high;
        sendframe.SetSendFrame(right_front_high);
        rfRet = SendDataComm(sendframe);
        m_binRecive = rfRet.GetFirst();
        binRecive = m_binRecive;
        if (binRecive.GetByteCount() < 3)
        {
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_TIME_OVER;
        }
        if (binRecive[0] != 0x62 || binRecive[1] != 0x3B || binRecive[2] != 0x04)
        {
            contain_right_front_high = my_error;
            //FxShowMessageBox(STD_TTL_MSG_INFORMATION,STD_TXT_MSG_COMMFAIL,DF_MB_BACK,DT_LEFT);
            //return CErrorCode::EC_TIME_OVER;
        }
        else
        {
            value_right_front_high = (binRecive[3] * 256 + binRecive[4]) - 200;
            sprintf(buf, "%d", value_right_front_high);
            contain_right_front_high = buf;
        }


        // 右前角高度传感器
        string contain_right_front_sensor = "";
        float value_right_front_sensor;
        sendframe.SetSendFrame(right_front_sensor);
        rfRet = SendDataComm(sendframe);
        m_binRecive = rfRet.GetFirst();
        binRecive = m_binRecive;
        if (binRecive.GetByteCount() < 3)
        {
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_TIME_OVER;
        }
        if (binRecive[0] != 0x62 || binRecive[1] != 0x3B || binRecive[2] != 0x71)
        {
            contain_right_front_sensor = my_error;
            //Sleep(5000);
            //FxShowMessageBox(STD_TTL_MSG_INFORMATION,STD_TXT_MSG_COMMFAIL,DF_MB_BACK,DT_LEFT);
            //return CErrorCode::EC_TIME_OVER;
        }
        else
        {
            value_right_front_sensor = (binRecive[3] * 256 + binRecive[4]) * 0.025;
            sprintf(buf, "%.2f", value_right_front_sensor);
            contain_right_front_sensor = buf;
        }


        // 左后角高度
        string contain_left_back_high = "";
        int value_left_back_high;
        sendframe.SetSendFrame(left_back_high);
        rfRet = SendDataComm(sendframe);
        m_binRecive = rfRet.GetFirst();
        binRecive = m_binRecive;
        if (binRecive.GetByteCount() < 3)
        {
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_TIME_OVER;
        }
        if (binRecive[0] != 0x62 || binRecive[1] != 0x3B || binRecive[2] != 0x05)
        {
            contain_left_back_high = my_error;
        }
        else
        {
            value_left_back_high = (binRecive[3] * 256 + binRecive[4]) - 200;
            sprintf(buf, "%d", value_left_back_high);
            contain_left_back_high = buf;
        }



        // 左后高度传感器
        string contain_left_back_sensor = "";
        float value_left_back_sensor;
        sendframe.SetSendFrame(left_back_sensor);
        rfRet = SendDataComm(sendframe);
        m_binRecive = rfRet.GetFirst();
        binRecive = m_binRecive;
        if (binRecive.GetByteCount() < 3)
        {
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_TIME_OVER;
        }
        if (binRecive[0] != 0x62 || binRecive[1] != 0x3B || binRecive[2] != 0x73)
        {
            contain_left_back_sensor = my_error;
        }
        else
        {
            value_left_back_sensor = (binRecive[3] * 256 + binRecive[4]) * 0.025;
            sprintf(buf, "%.2f", value_left_back_sensor);
            contain_left_back_sensor = buf;
        }



        // 右后角高度
        string contain_right_back_high = "";
        int value_right_back_high;
        sendframe.SetSendFrame(right_back_high);
        rfRet = SendDataComm(sendframe);
        m_binRecive = rfRet.GetFirst();
        binRecive = m_binRecive;
        if (binRecive.GetByteCount() < 3)
        {
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_TIME_OVER;
        }
        if (binRecive[0] != 0x62 || binRecive[1] != 0x3B || binRecive[2] != 0x06)
        {
            contain_right_back_high = my_error;
        }
        else
        {
            value_right_back_high = (binRecive[3] * 256 + binRecive[4]) - 200;
            sprintf(buf, "%d", value_right_back_high);
            contain_right_back_high = buf;
        }



        // 右后高度传感器
        string contain_right_back_sensor = "";
        float value_right_back_sensor;
        sendframe.SetSendFrame(right_back_sensor);
        rfRet = SendDataComm(sendframe);
        m_binRecive = rfRet.GetFirst();
        binRecive = m_binRecive;
        if (binRecive.GetByteCount() < 3)
        {
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_TIME_OVER;
        }
        if (binRecive[0] != 0x62 || binRecive[1] != 0x3B || binRecive[2] != 0x72)
        {
            contain_right_back_sensor = my_error;
        }
        else
        {
            value_right_back_sensor = (binRecive[3] * 256 + binRecive[4]) * 0.025;
            sprintf(buf, "%.2f", value_right_back_sensor);
            contain_right_back_sensor = buf;
        }



        // 流道压力
        string contain_flow_stress = "";
        int value_flow_stress;
        sendframe.SetSendFrame(flow_stress);
        rfRet = SendDataComm(sendframe);
        m_binRecive = rfRet.GetFirst();
        binRecive = m_binRecive;
        if (binRecive.GetByteCount() < 3)
        {
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_TIME_OVER;
        }
        if (binRecive[0] != 0x62 || binRecive[1] != 0x3B || binRecive[2] != 0x07)
        {
            contain_flow_stress = my_error;
        }
        else
        {
            value_flow_stress = binRecive[3] * 256 + binRecive[4];
            sprintf(buf, "%d", value_flow_stress);
            contain_flow_stress = buf;
        }



        // 压力传感器
        string contain_stress_sensor = "";
        float value_stress_sensor;
        sendframe.SetSendFrame(stress_sensor, 0xff);
        rfRet = SendDataComm(sendframe);
        m_binRecive = rfRet.GetFirst();
        binRecive = m_binRecive;
        if (binRecive.GetByteCount() < 3)
        {
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_TIME_OVER;
        }
        if (binRecive[0] != 0x62 || binRecive[1] != 0x3B || binRecive[2] != 0x6E)
        {
            contain_stress_sensor = my_error;
        }
        else
        {
            value_stress_sensor = (binRecive[3] * 256 + binRecive[4]) * 0.005;
            sprintf(buf, "%.2f", value_stress_sensor);
            contain_stress_sensor = buf;
        }


        // 电机温度
        string contain_elecmachine_tem = "";
        int value_elecmachine_tem;
        sendframe.SetSendFrame(elecmachine_tem);
        rfRet = SendDataComm(sendframe);
        m_binRecive = rfRet.GetFirst();
        binRecive = m_binRecive;
        if (binRecive.GetByteCount() < 3)
        {
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_TIME_OVER;
        }
        if (binRecive[0] != 0x62 || binRecive[1] != 0xD1 || binRecive[2] != 0x1C)
        {
            contain_elecmachine_tem = my_error;
        }
        else
        {
            value_elecmachine_tem = (binRecive[3] * 256 + binRecive[4]) - 40;
            sprintf(buf, "%d", value_elecmachine_tem);
            contain_elecmachine_tem = buf;
        }


        // 压缩机温度
        string contain_compressor_tem = "";
        int value_compressror_tem;
        sendframe.SetSendFrame(compressor_tem);
        rfRet = SendDataComm(sendframe);
        m_binRecive = rfRet.GetFirst();
        binRecive = m_binRecive;
        if (binRecive.GetByteCount() < 3)
        {
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_TIME_OVER;
        }
        if (binRecive[0] != 0x62 || binRecive[1] != 0xD1 || binRecive[2] != 0x1A)
        {
            contain_compressor_tem = my_error;
        }
        else
        {
            value_compressror_tem = (binRecive[3] * 256 + binRecive[4]) - 40;
            sprintf(buf, "%d", value_compressror_tem);
            contain_compressor_tem = buf;
        }


        uiActTest.SetItemValue(0, contain_left_front_high);  // 左前角高度
        uiActTest.SetItemValue(1, contain_left_front_sensor); // 左前角高度传感器
        uiActTest.SetItemValue(2, contain_right_front_high); // 右前角高度
        uiActTest.SetItemValue(3, contain_right_front_sensor); // 右前高度传感器
        uiActTest.SetItemValue(4, contain_left_back_high); // 左后角高度
        uiActTest.SetItemValue(5, contain_left_back_sensor); // 左后高度传感器
        uiActTest.SetItemValue(6, contain_right_back_high); // 右后角高度
        uiActTest.SetItemValue(7, contain_right_back_sensor); // 右后高度传感器
        uiActTest.SetItemValue(8, contain_flow_stress); // 流道压力
        uiActTest.SetItemValue(9, contain_stress_sensor); // 压力传感器
        uiActTest.SetItemValue(10, contain_elecmachine_tem); // 电机温度
        uiActTest.SetItemValue(11, contain_compressor_tem); // 压缩机温度

        iKey = uiActTest.ShowCtrl();
        if (iKey == -1)
        {
            break;
        }
    }

    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_ANYKEYRETURN, DT_LEFT);//关闭点火开关

    return iRet;
}



// 行驶高度控制模块充气(展示厅)
W_ErrorCode CSeviceFunctionNew::Ride_high_New_lansheng_L494_2016()
{
    W_ErrorCode iRet = CErrorCode::EC_SUCCESS;
    CSendFrame sendframe;
    CReceiveFrame rfRet;
    W_I16 iKey = 0;
    BYTE ptlModel1 = PTL_CAN_11_500K;
    BYTE ptlModel2 = PTL_CAN_11_125K;
    CBinary enterCmd = CBinary("\x07\x10\x08\x02\x10\x03\x00\x00\x00\x00\x00", 11);
    CBinary checkCmd = CBinary("\x07\xE0\x08\x03\x22\xF4\x0C\x00\x00\x00\x00", 11);
    CBinary readCmd = CBinary("\x07\x26\x08\x03\x19\x02\x0C\x00\x00\x00\x00", 11);
    CBinary clearCmd = CBinary("\x07\xDF\x08\x04\x14\xFF\xFF\xFF\x00\x00\x00", 11);
    W_U32 clearAddPara = 0x072E;
    W_U32 enterAddPara = 0x0718;
    W_U32 uStandValue = 0x30CC2B;
    W_I32 P_table[3][8] = { {0xBAAB81,0xE40766,0x5C6DB8,0x289A05,0xC1756E,0x1688B8,0xBC5004,0xECC37C},
    {0x4CE49D,0x0DBA5F,0x8B34CA,0x830AF0,0x964585,0xB9E97E,0xE38288,0x536675},
    {0x32BF9E,0xF43E48,0x792CE5,0x6219AF,0x54722B,0x3C9632,0xEC5F11,0x49EF47} };

    //if (!ptl)
    //{
    //    ptlModel1 = PTL_CAN_29_500K;
    //    ptlModel2 = PTL_CAN_29_125K;
    //    enterCmd = CBinary("\x18\xDA\x2B\xF1\x08\x02\x10\x03\x00\x00\x00\x00\x00",13);
    //    checkCmd = CBinary("\x18\xDA\x10\xF1\x08\x03\x22\x12\x8C\x00\x00\x00\x00",13);
    //    readCmd  = CBinary("\x18\xDB\x33\xF1\x08\x03\x19\x02\x0C\x00\x00\x00\x00",13);
    //    clearCmd = CBinary("\x18\xDB\x33\xF1\x08\x04\x14\xFF\xFF\xFF\x00\x00\x00",13);
    //}
    //else if (iValue != 1)
    //{
    //    enterAddPara = 0x0718;
    //    uStandValue = 0x73D1D3;
    //    enterCmd = CBinary("\x07\x10\x08\x02\x10\x03\x00\x00\x00\x00\x00",11);
    //    W_I32 iARR[3][8] = {{0xBAAB81,0xE40766,0x5C6DB8,0x289A05,0xC1756E,0x1688B8,0xBC5004,0xECC37C},
    //    {0x4CE49D,0x0DBA5F,0x8B34CA,0x830AF0,0x964585,0xB9E97E,0xE38288,0x536675},
    //    {0x32BF9E,0xF43E48,0x792CE5,0x6219AF,0x54722B,0x3C9632,0xEC5F11,0x49EF47}};
    //    for (int i = 0;i < 3;i++)
    //        for (int j = 0;j < 8;j++)
    //            P_table[i][j] = iARR[i][j];
    //}

    //step1~5
    iRet = CheckEngineStop(ptlModel1, checkCmd, 0x07E8);
    if (iRet)
        return iRet;

    //step6
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"), DF_MB_ANYKEYRETURN, DT_LEFT);//将点火开关打开

    //该应用程序可用于较长时间暴露在外的车辆的调平，比如说停放在展厅的车辆.
    //如果怀疑异常泄漏，则应通过标准的故障查询程序进行调查.
    //电池需要处于一个良好的状态，或者需要连接一个电力充足的辅助电源.
    //在运行该应用程序前，请确保不存在故障且已正确标定悬架单元.    
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BF1A"), g_GetTxtStringFormHtml("0x0000BC36") + "\n\n" + g_GetTxtStringFormHtml("0x0000BC37")
        + "\n\n" + g_GetTxtStringFormHtml("0x0000BC38") + "\n\n" + g_GetTxtStringFormHtml("0x0000BC39") + "\n\n" + g_GetTxtStringFormHtml("0x9002A1F3"), DF_MB_OKCANCEL, DT_LEFT);
    if (DF_IDCANCEL == iKey)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_ANYKEYRETURN, DT_LEFT);//关闭点火开关
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B8D1"), DF_MB_ANYKEYRETURN, DT_LEFT);//操作人员已中止了此应用程序
        iRet = CheckSysDTCNub_model1(ptlModel1, ptlModel2, readCmd, clearCmd, clearAddPara);
        return iRet;
    }

    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);
    for (W_I16 i = 0; i < 2; i++)
    {
        //step7        step8.1
        EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x10\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x0718);
        iRet = EnterSystem(ptlModel1, enterCmd, enterAddPara);
        if (iRet)
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000BE89"));//未能取得模块的安全访问权
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关
            FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B208"));//过程已完成
            iRet = CheckSysDTCNub_model1(ptlModel1, ptlModel2, readCmd, clearCmd, clearAddPara);
            return iRet;
        }

        rfRet = m_rfRet;
        CBinary binRecive = rfRet.GetFirst();
        if (binRecive.GetByteCount() < 5)
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000BE89"));//未能取得模块的安全访问权
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关
            FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B208"));//过程已完成
            iRet = CheckSysDTCNub_model1(ptlModel1, ptlModel2, readCmd, clearCmd, clearAddPara);
            return iRet;
        }

        m_binRecive = CBinary(binRecive.GetBuffer() + 4, binRecive.GetByteCount() - 4);
        if (checkIs7f(m_binRecive))
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000BE89"));//未能取得模块的安全访问权
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关
            FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B208"));//过程已完成
            iRet = CheckSysDTCNub_model1(ptlModel1, ptlModel2, readCmd, clearCmd, clearAddPara);
            return iRet;
        }

        CBinary binCmd("\x27\x01", 2);
        binCmd.SetByteAt(1, 2 * i + 1);
        //step8        step8.2
        //安全访问
        iRet = SafeLogin_L405_2014_Oil(binCmd, uStandValue, P_table);  // 32 BF 9E
        m_pNetLayer->KeepLink(0);//打断链路
        if (!iRet)
            break;
    }

    if (iRet)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000BE89"));//未能取得模块的安全访问权
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B208"));//过程已完成
        iRet = CheckSysDTCNub_model1(ptlModel1, ptlModel2, readCmd, clearCmd, clearAddPara);
        return iRet;
    }
    ////链路保持
    //m_pNetLayer->KeepLink(1000,CSendFrame(CBinary("\x3E\x00",2)));

    //step9
    sendframe.SetSendFrame(CBinary("\x22\x3B\x3B", 3));  // 07 10 08 03 22 3B 3B 00 00 00 00
    rfRet = SendDataComm(sendframe);
    while (1)
    {
        sendframe.SetSendFrame(CBinary("\x22\x20\x39", 3));  // 07 10 08 03 22 20 39 00 00 00 00
        rfRet = SendDataComm(sendframe);
        m_binRecive = rfRet.GetFirst();
        if (m_binRecive.GetByteCount() > 3 && 0x02 == m_binRecive[3])
            break;

        //正常操作模式未激活    不满足上述提到的进入条件
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000BC3E,0x0000BC3F"), DF_MB_ANYKEYRETURN, DT_LEFT);
        sendframe.SetSendFrame(CBinary("\x2E\x3B\x5A\x00", 4));
        rfRet = SendDataComm(sendframe);
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000BC40"));//不满足初始进入条件
        iRet = CheckSysDTCNub_model1(ptlModel1, ptlModel2, readCmd, clearCmd, clearAddPara);
        return iRet;
    }

    //step10
    sendframe.SetSendFrame(CBinary("\x22\xD1\x19", 3));  // 07 10 08 03 22 D1 19 00 00 00 00
    rfRet = SendDataComm(sendframe);
    m_binRecive = rfRet.GetFirst();
    if (m_binRecive.GetByteCount() < 4 || checkIs7f(m_binRecive) || m_binRecive[3] != 1)
    {
        //ECU未标定    不满足上述提到的进入条件
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000BC41,0x0000BC3F"), DF_MB_ANYKEYRETURN, DT_LEFT);
        sendframe.SetSendFrame(CBinary("\x2E\x3B\x5A\x00", 4));
        rfRet = SendDataComm(sendframe);
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000BC40"));//不满足初始进入条件
        iRet = CheckSysDTCNub_model1(ptlModel1, ptlModel2, readCmd, clearCmd, clearAddPara);
        return iRet;
    }

    ////step11
    //if (1 == iValue)
    //{
    //    sendframe.SetSendFrame(CBinary("\x22\xF4\x42",3));
    //    rfRet = SendDataComm(sendframe);
    //    m_binRecive = rfRet.GetFirst();
    //    if (m_binRecive.GetByteCount() < 5
    //        || checkIs7f(m_binRecive)
    //        || m_binRecive[3] < 0x2C
    //        || (0x2C == m_binRecive[3] && m_binRecive[4] < 0xED))
    //    {
    //        //ECU电压不足以运行测试.请连接电源并重新运行应用程序    不满足上述提到的进入条件
    //        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"),g_GetTxtStringFormHtml("0x0000BF6F,0x0000BC3F"),DF_MB_ANYKEYRETURN,DT_LEFT);
    //        sendframe.SetSendFrame(CBinary("\x2E\x3B\x5A\x00",4));
    //        rfRet = SendDataComm(sendframe);
    //        sendframe.SetSendFrame(CBinary("\x10\x01",2));
    //        rfRet = SendDataComm(sendframe);
    //        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"),g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关
    //        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"),g_GetTxtStringFormHtml("0x0000BC40"));//不满足初始进入条件
    //        iRet = CheckSysDTCNub_model1(ptlModel1,ptlModel2,readCmd,clearCmd,clearAddPara);
    //        return iRet;
    //    }
    //}

    //step12
    iKey = 20;
    string strPormot = "";
    CBinary binCmd = CBinary("\x2F\x3B\x56\x03\x01", 5);//step16指令
    //if (2 == iValue)
    //    binCmd.SetByteAt(4,0);

    while (1)
    {
        CMessageBoxCtrl uiMessage;
        uiMessage.InitCtrl(g_GetTxtStringFormHtml("0x0000BC3B"), g_GetTxtStringFormHtml("0x0000BC42") + "\n" + strPormot + "\n" + g_GetTxtStringFormHtml("0x0000BC3D"), DF_MB_FREE | DF_MB_HAVEBUTTON_DRAW_THEN_RETURN, DT_LEFT);
        uiMessage.AddCustomButton(g_GetTxtStringFormHtml("0x0000BE5B"));
        iKey = uiMessage.ShowCtrl();

        W_U32 uMsStart = GetTickCount();
        W_U32 uMsStop = 0;
        W_U32 uPassMs = 0;
        while (1)
        {
            uMsStop = GetTickCount();
            uPassMs = uMsStop - uMsStart;
            if (uPassMs > 250)
                break;
            if (DF_ID_FREEBTN_0 == iKey)
            {
                sendframe.SetSendFrame(CBinary("\x2E\x3B\x5A\x00", 4));
                rfRet = SendDataComm(sendframe);
                sendframe.SetSendFrame(CBinary("\x10\x01", 2));
                rfRet = SendDataComm(sendframe);
                FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关
                FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B8D1"));//操作人员已中止了此应用程序.
                iRet = CheckSysDTCNub_model1(ptlModel1, ptlModel2, readCmd, clearCmd, clearAddPara);
                return iRet;
            }
        }

        //step13
        sendframe.SetSendFrame(CBinary("\x22\x3B\x3F", 3));  // 07 10 08 03 22 3B 3F 00 00 00 00
        rfRet = SendDataComm(sendframe);
        sendframe.SetSendFrame(CBinary("\x2F\x3B\x3F\x03\x00\x00\x00\x00\x01\x00\x00\x00", 12));  // 07 10 08 10 0C 2F 3B 3F 03 00 00
        rfRet = SendDataComm(sendframe);
        m_binRecive = rfRet.GetFirst();
        if (m_binRecive.GetByteCount() && !checkIs7f(m_binRecive))
        {
            //step14
            sendframe.SetSendFrame(CBinary("\x2E\x3B\x5A\x01", 4));  // 07 10 08 04 2E 3B 5A 01 00 00 00
            rfRet = SendDataComm(sendframe);
            m_binRecive = rfRet.GetFirst();
            if (m_binRecive.GetByteCount() > 2 && !checkIs7f(m_binRecive))
            {
                //step15
                sendframe.SetSendFrame(CBinary("\x2F\xF4\x0C\x03\x0F\xA0", 6));  // 07 10 08 06 2F F4 0C 03 0F A0 00
                rfRet = SendDataComm(sendframe);
                m_binRecive = rfRet.GetFirst();
                if (m_binRecive.GetByteCount() > 2 && !checkIs7f(m_binRecive))
                {
                    //step16
                    sendframe.SetSendFrame(binCmd);
                    rfRet = SendDataComm(sendframe);
                    m_binRecive = rfRet.GetFirst();
                    if (m_binRecive.GetByteCount() > 2 && !checkIs7f(m_binRecive))
                        break;
                }
            }
        }
        sendframe.SetSendFrame(CBinary("\x22\xF4\x42", 3));  // 07 10 08 03 22 F4 42 00 00 00 00
        rfRet = SendDataComm(sendframe);
        m_binRecive = rfRet.GetFirst();
        if (m_binRecive.GetByteCount() && !checkIs7f(m_binRecive))
        {
            //step14
            sendframe.SetSendFrame(CBinary("\x2E\x3B\x5A\x01", 4));  // 07 10 08 04 2E 3B 5A 01 00 00 00
            rfRet = SendDataComm(sendframe);
            m_binRecive = rfRet.GetFirst();
            if (m_binRecive.GetByteCount() > 2 && !checkIs7f(m_binRecive))
            {
                //step15
                sendframe.SetSendFrame(CBinary("\x2F\xF4\x0C\x03\x0F\xA0", 6));  // 07 10 08 06 2F F4 0C 03 0F A0 00
                rfRet = SendDataComm(sendframe);
                m_binRecive = rfRet.GetFirst();
                if (m_binRecive.GetByteCount() > 2 && !checkIs7f(m_binRecive))
                {
                    //step16
                    sendframe.SetSendFrame(binCmd);
                    rfRet = SendDataComm(sendframe);
                    m_binRecive = rfRet.GetFirst();
                    if (m_binRecive.GetByteCount() > 2 && !checkIs7f(m_binRecive))
                        break;
                }
            }
        }
    }

    //step17
    iKey = 20;
    strPormot = "";
    binCmd = CBinary("\x2F\x3B\x56\x03\x01", 5);//step16指令  // 07 10 08 05 2F 3B 56 03 00 00 00
    //if (2 == iValue)
    //    binCmd.SetByteAt(4,0);

    while (1)
    {

        CMessageBoxCtrl uiMessage;
        uiMessage.InitCtrl(g_GetTxtStringFormHtml("0x0000BC3B"), g_GetTxtStringFormHtml("0x0000BC42") + "\n" + strPormot + "\n" + g_GetTxtStringFormHtml("0x0000BC3D"), DF_MB_FREE | DF_MB_HAVEBUTTON_DRAW_THEN_RETURN, DT_LEFT);
        uiMessage.AddCustomButton(g_GetTxtStringFormHtml("0x0000BE5B"));
        iKey = uiMessage.ShowCtrl();

        W_U32 uMsStart = GetTickCount();
        W_U32 uMsStop = 0;
        W_U32 uPassMs = 0;
        while (1)
        {
            uMsStop = GetTickCount();
            uPassMs = uMsStop - uMsStart;
            if (uPassMs > 250)
                break;
            if (DF_ID_FREEBTN_0 == iKey)
            {
                sendframe.SetSendFrame(CBinary("\x2E\x3B\x5A\x00", 4));
                rfRet = SendDataComm(sendframe);
                sendframe.SetSendFrame(CBinary("\x10\x01", 2));
                rfRet = SendDataComm(sendframe);
                FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关
                FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B8D1"));//操作人员已中止了此应用程序.
                iRet = CheckSysDTCNub_model1(ptlModel1, ptlModel2, readCmd, clearCmd, clearAddPara);
                return iRet;
            }
        }

        //step18
        sendframe.SetSendFrame(CBinary("\x22\xF4\x42", 3));
        rfRet = SendDataComm(sendframe);
        sendframe.SetSendFrame(CBinary("\x22\x3B\x39", 3));
        rfRet = SendDataComm(sendframe);
        m_binRecive = rfRet.GetFirst();
        if (m_binRecive.GetByteCount() > 3 && !checkIs7f(m_binRecive))
        {
            if (1 == m_binRecive[3])
            {
                //step19
                strPormot = g_GetTxtStringFormHtml("0x0000BC43");
                uiMessage.InitCtrl(g_GetTxtStringFormHtml("0x0000BC3B"), g_GetTxtStringFormHtml("0x0000BC42") + "\n" + strPormot + "\n" + g_GetTxtStringFormHtml("0x0000BC3D"), DF_MB_FREE | DF_MB_HAVEBUTTON_DRAW_THEN_RETURN, DT_LEFT);
                uiMessage.AddCustomButton(g_GetTxtStringFormHtml("0x0000BE5B"));//终止
                iKey = uiMessage.ShowCtrl();

                sendframe.SetSendFrame(CBinary("\x22\x3B\x3D", 3));
                rfRet = SendDataComm(sendframe);
                m_binRecive = rfRet.GetFirst();
                if (m_binRecive.GetByteCount() > 3 && !checkIs7f(m_binRecive) && 0x2C == m_binRecive[3])
                {
                    //step20
                    sendframe.SetSendFrame(CBinary("\x22\x3B\x50", 3));
                    rfRet = SendDataComm(sendframe);
                    m_binRecive = rfRet.GetFirst();
                    if (m_binRecive.GetByteCount() < 4 || !m_binRecive[3])
                    {
                        sendframe.SetSendFrame(CBinary("\x22\x3B\x08", 3));
                        rfRet = SendDataComm(sendframe);
                    }
                }
            }
            else if (8 == m_binRecive[3])
            {
                //step21
                strPormot = g_GetTxtStringFormHtml("0x0000BC44");
                uiMessage.InitCtrl(g_GetTxtStringFormHtml("0x0000BC3B"), g_GetTxtStringFormHtml("0x0000BC42") + "\n" + strPormot + "\n" + g_GetTxtStringFormHtml("0x0000BC3D"), DF_MB_FREE | DF_MB_HAVEBUTTON_DRAW_THEN_RETURN, DT_LEFT);
                uiMessage.AddCustomButton(g_GetTxtStringFormHtml("0x0000BE5B"));
                iKey = uiMessage.ShowCtrl();

                sendframe.SetSendFrame(CBinary("\x22\x3B\x3D", 3));
                rfRet = SendDataComm(sendframe);
                m_binRecive = rfRet.GetFirst();
                if (m_binRecive.GetByteCount() > 3 && !checkIs7f(m_binRecive) && 0x2C == m_binRecive[3])
                {
                    //step22
                    sendframe.SetSendFrame(CBinary("\x22\x3B\x50", 3));
                    rfRet = SendDataComm(sendframe);
                    m_binRecive = rfRet.GetFirst();
                    if (m_binRecive.GetByteCount() < 4 || !m_binRecive[3])
                    {
                        //step23
                        sendframe.SetSendFrame(CBinary("\x22\x3B\x08", 3));
                        rfRet = SendDataComm(sendframe);
                        if (0 == rfRet.GetByteCount())
                            break;
                        m_binRecive = rfRet.GetFirst();
                        if (m_binRecive.GetByteCount() > 3)
                        {
                            if (!m_binRecive[3])
                                break;
                            else if (1 == m_binRecive[3])
                                strPormot = g_GetTxtStringFormHtml("0x0000BC45");
                        }
                        else if (!checkIs7f(m_binRecive))
                            break;
                    }
                }
            }
            else
            {
                sendframe.SetSendFrame(CBinary("\x2E\x3B\x5A\x00", 4));  // 满足条件，发出退出命令
                rfRet = SendDataComm(sendframe);
                sendframe.SetSendFrame(CBinary("\x10\x01", 2));
                rfRet = SendDataComm(sendframe);
                //满足应用程序入口条件        充气程序已完成
                FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BC3B"), g_GetTxtStringFormHtml("0x0000BC42") + "\n\n" + g_GetTxtStringFormHtml("0x0000BC46"), DF_MB_ANYKEYRETURN, DT_LEFT);

                FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关
                FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B208"));//过程已完成
                iRet = CheckSysDTCNub_model1(ptlModel1, ptlModel2, readCmd, clearCmd, clearAddPara);
                return iRet;
            }
        }
    }


    //step24
    sendframe.SetSendFrame(CBinary("\x2E\x3B\x5A\x00", 4));
    rfRet = SendDataComm(sendframe);
    sendframe.SetSendFrame(CBinary("\x10\x01", 2));
    rfRet = SendDataComm(sendframe);
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B208"));//过程已完成
    //step25~
    iRet = CheckSysDTCNub_model1(ptlModel1, ptlModel2, readCmd, clearCmd, clearAddPara);

    return iRet;
}



// 横向加速计标定
W_ErrorCode CSeviceFunctionNew::Transervse_speed_reset_L494_2016_New_lansheng()
{
    W_ErrorCode iRet = 0;
    W_I16 iKey;
    CSendFrame sendframe;
    CReceiveFrame rfRet;
    CMessageBoxCtrl message;
    CBinary creceive;

    // 确保车辆未处于运输模式，而且达到了正常行驶高度。
    FxShowMessageBox(g_GetTxtStringFormHtml("0x90023630"), g_GetTxtStringFormHtml("0x0000C1A5") + "\n" + "\n" + g_GetTxtStringFormHtml("0x90013017")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x90018702") + "\n" + "\n" + g_GetTxtStringFormHtml("0x90020CC7")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BFB5") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BFB6")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BFB7") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9001DB4A")
        + "\n" + "\n" + "\n" + "\n" + g_GetTxtStringFormHtml("0x90022F2E") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900255B3")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BFBA"), DF_MB_OK, DT_LEFT);

    // 您想继续吗？
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x90023630"), g_GetTxtStringFormHtml("0x0000BFBB"), DF_MB_YESNO, DT_LEFT);
    if (iKey == 7)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B8D1")); // 中止程序
        return iRet;
    }

    // 点火打开
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x9000808A"), DF_MB_OK, DT_LEFT);
    message.InitCtrl(g_GetTxtStringFormHtml("0x0000007A"), g_GetTxtStringFormHtml("0x800015FD,0x0000B09D"), 0, DT_CENTER);//正在初始化系统  请等待
    CMessageBoxCtrl::SetBusyStatus(true);
    message.ShowCtrl();

    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x10\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x0718);
    if (iRet < 0)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }

    sendframe.SetSendFrame(CBinary("\x11\x01", 2));
    rfRet = SendDataComm(sendframe);
    creceive = rfRet.GetFirst();
    if (creceive.GetByteAt(0) != 0x51 || creceive.GetByteCount() == 0)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }

    sendframe.SetSendFrame(CBinary("\x14\xFF\xFF\xFF", 4));
    rfRet = SendDataComm(sendframe);
    creceive = rfRet.GetFirst();
    if (creceive.GetByteCount() == 0 || creceive.GetByteAt(0) != 0x54)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }


    // 系统
    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x73\x08\x02\x11\x01\x00\x00\x00\x00\x00", 11), 0x077B);
    rfRet = m_rfRet;
    if (iRet < 0)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }
    creceive = rfRet.GetFirst();
    if (creceive.GetByteCount() != 6 || creceive[4] != 0x51 || creceive[5] != 0x01)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }



    sendframe.SetSendFrame(CBinary("\x14\xFF\xFF\xFF", 4));
    rfRet = SendDataComm(sendframe);
    creceive = rfRet.GetFirst();
    if (creceive.GetByteCount() == 0 || creceive.GetByteAt(0) != 0x54)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }


    // 系统
    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x10\x08\x02\x10\x03\x00\x00\x00\x00\x00", 11), 0x0718);
    rfRet = m_rfRet;
    if (iRet < 0)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }
    creceive = rfRet.GetFirst();
    if (creceive.GetByteCount() != 6 || creceive[4] != 0x50 || creceive[5] != 0x03)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }



    iRet = SafeLogin_Standard3(CBinary("\x27\x01", 2), 0x32BF9E);  // 32 BF 9E
    if (iRet < 0)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }

    // 系统
    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x73\x08\x02\x10\x03\x00\x00\x00\x00\x00", 11), 0x077B);
    rfRet = m_rfRet;
    if (iRet < 0)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }
    creceive = rfRet.GetFirst();
    if (creceive.GetByteCount() != 6 || creceive[4] != 0x50 || creceive[5] != 0x03)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }


    CMessageBoxCtrl::SetBusyStatus(false);
    // 安全提示
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000007A"), g_GetTxtStringFormHtml("0x9001C268,0x90001B47,0x9001DA2D,0x900124D4,0x9002BDBE"), DF_MB_OK, DT_LEFT);
    // 测试正在进行
    message.InitCtrl(g_GetTxtStringFormHtml("0x0000007A"), g_GetTxtStringFormHtml("0x0000B1C3,0x0000B09D"), 0, DT_CENTER);
    CMessageBoxCtrl::SetBusyStatus(true);
    message.ShowCtrl();



    iRet = SafeLogin_Standard3(CBinary("\x27\x01", 2), 0x73E285);  // 73 E2 85
    if (iRet < 0)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }

    sendframe.SetSendFrame(CBinary("\x2E\x20\x39\x01\x01\x01\x01\x01\x01\x01\x01", 11));
    rfRet = SendDataComm(sendframe);
    m_binRecive = rfRet.GetFirst();
    if (m_binRecive.GetByteCount() == 0 || checkIs7f(m_binRecive))
    {
        CMessageBoxCtrl::SetBusyStatus(0);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000B1B5"));//从菜单中重新运行程序.
        CMessageBoxCtrl::SetBusyStatus(1);
        FxShowMessageBox(FxGetStdString(STD_INFO_COMMUNICATION_STATUS), g_GetTxtStringFormHtml("0x0000B09D"), DF_MB_NOBUTTON, DT_LEFT);
    }


    // 系统
    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x10\x08\x04\x2E\x3B\x5A\x01\x00\x00\x00", 11), 0x0718);
    rfRet = m_rfRet;
    if (iRet < 0)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }
    creceive = rfRet.GetFirst();
    if (creceive.GetByteCount() < 7 || creceive[4] != 0x6E || creceive[5] != 0x3B || creceive[6] != 0x5A)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }


    sendframe.SetSendFrame(CBinary("\x2F\x3B\x56\x03\x00", 5));  // 07 10 08 05 2F 3B 56 03 00 00 00
    rfRet = SendDataComm(sendframe);
    creceive = rfRet.GetFirst();
    if (creceive.GetByteCount() == 0 || creceive.GetByteAt(0) != 0x6F)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }

    sendframe.SetSendFrame(CBinary("\x22\x3B\x3D", 3));
    rfRet = SendDataComm(sendframe);
    creceive = rfRet.GetFirst();   // 07 18 08 04 62 3B 3D 2C 00 00 00
    if (creceive.GetByteCount() != 4 || creceive.GetByteAt(0) != 0x62 || creceive.GetByteAt(1) != 0x3B || creceive.GetByteAt(2) != 0x3D || creceive.GetByteAt(3) != 0x2C)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }

    sendframe.SetSendFrame(CBinary("\x22\x3B\x08", 3));  // 07 10 08 03 22 3B 08 00 00 00 00
    rfRet = SendDataComm(sendframe);
    creceive = rfRet.GetFirst();
    if (creceive.GetByteCount() == 0 || creceive.GetByteAt(0) != 0x62)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }

    sendframe.SetSendFrame(CBinary("\x2F\x3B\x55\x03\x03", 5));  // 07 10 08 05 2F 3B 55 03 03 00 00
    rfRet = SendDataComm(sendframe);
    creceive = rfRet.GetFirst();
    if (creceive.GetByteCount() == 0 || creceive.GetByteAt(0) != 0x6F || creceive.GetByteAt(1) != 0x3B || creceive.GetByteAt(2) != 0x55 || creceive.GetByteAt(3) != 0x03 || creceive.GetByteAt(4) != 0x03)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }

    sendframe.SetSendFrame(CBinary("\x2F\xF4\x0C\x03\x17\x70", 6));  // 07 10 08 06 2F F4 0C 03 17 70 00
    rfRet = SendDataComm(sendframe);
    creceive = rfRet.GetFirst();
    if (creceive.GetByteCount() == 0 || creceive.GetByteAt(0) != 0x6F || creceive.GetByteAt(1) != 0xF4 || creceive.GetByteAt(2) != 0x0C)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }


    // 系统
    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xF4\x0C\x00\x00\x00\x00", 11), 0x07E8);
    rfRet = m_rfRet;
    if (iRet < 0)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }
    creceive = rfRet.GetFirst();
    if (creceive[4] != 0x62 || creceive[5] != 0xF4 || creceive[6] != 0x0C)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }


    // 系统
    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x10\x08\x03\x22\xF4\x0D\x00\x00\x00\x00", 11), 0x0718);  // // 07 E0 08 03 22 F4 0D 00 00 00 00
    rfRet = m_rfRet;
    if (iRet < 0)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }
    creceive = rfRet.GetFirst();
    if (creceive[4] != 0x62 || creceive[5] != 0xF4 || creceive[6] != 0x0D)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }


    // 系统
    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x73\x08\x04\x31\x01\x30\x3E\x00\x00\x00", 11), 0x077B); //  07 73 08 04 31 01 30 3E 00 00 00
    rfRet = m_rfRet;
    if (iRet < 0)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }
    creceive = rfRet.GetFirst();
    if (creceive.GetByteCount() != 11 || creceive[4] != 0x71 || creceive[5] != 0x01 || creceive[6] != 0x30 || creceive[7] != 0x3E)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }




    sendframe.SetSendFrame(CBinary("\x31\x01\x30\x3E", 4)); //  07 73 08 04 31 01 30 3E 00 00 00
    rfRet = SendDataComm(sendframe);
    creceive = rfRet.GetFirst();
    if (creceive.GetByteCount() != 7 || creceive.GetByteAt(0) != 0x71 || creceive.GetByteAt(1) != 0x01 || creceive.GetByteAt(2) != 0x30)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }

    sendframe.SetSendFrame(CBinary("\x31\x03\x30\x3E", 4)); //  07 73 08 04 31 03 30 3E 00 00 00
    rfRet = SendDataComm(sendframe);
    creceive = rfRet.GetFirst();
    if (creceive.GetByteCount() != 7 || creceive.GetByteAt(0) != 0x71 || creceive.GetByteAt(1) != 0x03 || creceive.GetByteAt(2) != 0x30)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }
    char buf[20];
    char buf1[20];
    char buf2[20];
    string str_reveice1, str_reveice2, str_reveice3, str_reveice;
    string sym = "0X";
    int value_send1, value_send2, value_send3;
    value_send1 = creceive[4];
    value_send2 = creceive[5];
    value_send3 = creceive[6];
    sprintf(buf, "%02x", value_send1);
    sprintf(buf1, "%02x", value_send2);
    sprintf(buf2, "%02x", value_send3);
    str_reveice1 = buf;
    str_reveice2 = buf1;
    str_reveice3 = buf2;
    str_reveice1 = sym + str_reveice1 + " ";
    str_reveice2 = sym + str_reveice2 + " ";
    str_reveice3 = sym + str_reveice3 + " ";
    str_reveice = str_reveice1 + str_reveice2 + str_reveice3;




    sendframe.SetSendFrame(CBinary("\x22\x3B\x5D", 3));  // 07 73 08 03 22 3B 5D 00 00 00 00
    rfRet = SendDataComm(sendframe);
    creceive = rfRet.GetFirst();
    if (creceive.GetByteCount() != 7 || creceive.GetByteAt(0) != 0x62 || creceive.GetByteAt(1) != 0x3B || creceive.GetByteAt(2) != 0x5D)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }
    string str_high_deviation;
    float value_high_deviation = creceive[4] * 0.004;
    sprintf(buf, "%.2f", value_high_deviation);
    str_high_deviation = buf;
    str_high_deviation = str_high_deviation + " g";


    sendframe.SetSendFrame(CBinary("\x22\x3B\x61", 3));  // 07 73 08 03 22 3B 61 00 00 00 00
    rfRet = SendDataComm(sendframe);
    creceive = rfRet.GetFirst();
    if (creceive.GetByteCount() != 7 || creceive.GetByteAt(0) != 0x62 || creceive.GetByteAt(1) != 0x3B || creceive.GetByteAt(2) != 0x61)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }
    string str_low_deviation;
    float value_low_deviation = creceive[4] * 0.004;
    sprintf(buf, "%.2f", value_low_deviation);
    str_low_deviation = buf;
    str_low_deviation = str_low_deviation + " g";


    sendframe.SetSendFrame(CBinary("\x22\x3B\x5B", 3));  // 07 73 08 03 22 3B 5B 00 00 00 00
    rfRet = SendDataComm(sendframe);
    creceive = rfRet.GetFirst();
    if (creceive.GetByteCount() != 7 || creceive.GetByteAt(0) != 0x62 || creceive.GetByteAt(1) != 0x3B || creceive.GetByteAt(2) != 0x5B)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }
    string str_high;
    float value_high = creceive[4] * 0.004;
    sprintf(buf, "%.2f", value_high);
    str_high = buf;
    str_high = str_high + " g";


    sendframe.SetSendFrame(CBinary("\x22\x3B\x5B", 3));  // 07 73 08 03 22 3B 5B 00 00 00 00
    rfRet = SendDataComm(sendframe);
    creceive = rfRet.GetFirst();
    if (creceive.GetByteCount() != 7 || creceive.GetByteAt(0) != 0x62 || creceive.GetByteAt(1) != 0x3B || creceive.GetByteAt(2) != 0x5B)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }
    string str_low;
    float value_low = creceive[4] * 0.004;
    sprintf(buf, "%.2f", value_low);
    str_low = buf;
    str_low = str_low + " g";




    sendframe.SetSendFrame(CBinary("\x2E\x20\x39\x02\x02\x02\x02\x02\x02\x02\x02", 11));
    rfRet = SendDataComm(sendframe);
    sendframe.SetSendFrame(CBinary("\x11\x01", 2));
    rfRet = SendDataComm(sendframe);
    CMessageBoxCtrl::SetBusyStatus(0);


    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x10\x08\x02\x10\x03\x00\x00\x00\x00\x00", 11), 0x0718);
    rfRet = m_rfRet;
    if (iRet < 0)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }
    creceive = rfRet.GetFirst();
    if (creceive.GetByteCount() != 6 || creceive[4] != 0x50 || creceive[5] != 0x03)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }



    // 安全访问
    iRet = SafeLogin_Standard3(CBinary("\x27\x01", 2), 0x32BF9E);  // 32 BF 9E
    if (iRet < 0)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }

    sendframe.SetSendFrame(CBinary("\x2E\x3B\x5A\x00", 4));  // 07 10 08 04 2E 3B 5A 00 00 00 00
    rfRet = SendDataComm(sendframe);
    creceive = rfRet.GetFirst();
    if (creceive.GetByteCount() < 4 || creceive.GetByteAt(0) != 0x6E || creceive.GetByteAt(1) != 0x3B || creceive.GetByteAt(2) != 0x5A || creceive.GetByteAt(3) != 0x6E)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }

    sendframe.SetSendFrame(CBinary("\x2F\x3B\x55\x03\x00", 5));  // 07 10 08 05 2F 3B 55 03 00 00 00
    rfRet = SendDataComm(sendframe);
    creceive = rfRet.GetFirst();
    if (creceive.GetByteCount() < 4 || creceive.GetByteAt(0) != 0x6F)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }

    sendframe.SetSendFrame(CBinary("\x2F\x3B\x55\x00", 4));  //07 10 08 04 2F 3B 55 00 00 00 00
    rfRet = SendDataComm(sendframe);
    creceive = rfRet.GetFirst();
    if (creceive.GetByteCount() < 5 || creceive.GetByteAt(0) != 0x6F || creceive.GetByteAt(3) != 0x03)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }

    sendframe.SetSendFrame(CBinary("\x2F\x3B\x56\x03\x00", 5));
    rfRet = SendDataComm(sendframe);
    creceive = rfRet.GetFirst();
    if (creceive.GetByteCount() < 4 || creceive.GetByteAt(0) != 0x6F)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }

    sendframe.SetSendFrame(CBinary("\x2F\x3B\x56\x00", 4));
    rfRet = SendDataComm(sendframe);
    creceive = rfRet.GetFirst();
    if (creceive.GetByteCount() < 5 || creceive.GetByteAt(0) != 0x6F || creceive.GetByteAt(3) != 0x03)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }

    sendframe.SetSendFrame(CBinary("\x10\x01", 2));
    rfRet = SendDataComm(sendframe);
    creceive = rfRet.GetFirst();
    if (creceive.GetByteAt(0) != 0x50 || creceive.GetByteCount() == 0)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }

    // 系统
    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x73\x08\x02\x10\x01\x00\x00\x00\x00\x00", 11), 0x077B);
    rfRet = m_rfRet;
    if (iRet < 0)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }
    creceive = rfRet.GetFirst();
    if (creceive.GetByteCount() != 6 || creceive[4] != 0x50 || creceive[5] != 0x01)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }


    // 系统
    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x10\x08\x04\x14\xFF\xFF\xFF\x00\x00\x00", 11), 0x0718);
    rfRet = m_rfRet;
    if (iRet < 0)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }
    creceive = rfRet.GetFirst();
    if (creceive.GetByteCount() != 8 || creceive[4] != 0x54)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }


    sendframe.SetSendFrame(CBinary("\x19\x01\x0C", 3));  // 07 73 08 03 19 01 0C 00 00 00 00
    rfRet = SendDataComm(sendframe);
    creceive = rfRet.GetFirst();
    if (creceive.GetByteAt(0) != 0x59 || creceive.GetByteCount() != 7 || creceive.GetByteAt(1) != 0x01 || creceive.GetByteAt(2) != 0x0C)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }

    // 系统
    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x73\x08\x03\x19\x01\x0C\x00\x00\x00\x00", 11), 0x077B);
    rfRet = m_rfRet;
    if (iRet < 0)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }
    creceive = rfRet.GetFirst();
    if (creceive.GetByteCount() != 11 || creceive[4] != 0x59 || creceive[5] != 0x01 || creceive[6] != 0x0C)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }




    m_pNetLayer->KeepLink(0); // 断开链路保持

    CMessageBoxCtrl::SetBusyStatus(false);
    // 点火关闭
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);

    // 测试完成
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000007A"), g_GetTxtStringFormHtml("0x0000BE55"), DF_MB_OK, DT_LEFT);


    // CHCMB 电弧校准加速计传感器进程传回的数据
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000C1A6") + "\n" + "\n", g_GetTxtStringFormHtml("0x0000C1A6")
        + "\n" + "\n" + str_reveice + "\n" + "\n" +
        g_GetTxtStringFormHtml("0x0000C1A7") + " = " + str_high_deviation + "\n" + "\n" +
        g_GetTxtStringFormHtml("0x0000C1A8") + " = " + str_low_deviation + "\n" + "\n" +
        g_GetTxtStringFormHtml("0x0000C1A9") + " = " + str_high + "\n" + "\n" +
        g_GetTxtStringFormHtml("0x0000C1AA") + " = " + str_low, DF_MB_OK, DT_LEFT);



    CMessageBoxCtrl::SetBusyStatus(false);

    // 故障码
    iRet = ClearSysDTC_Programme_538(PTL_CAN_11_500K, CBinary("\x07\x36\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x073E);

    return iRet;

}




// 清除自适应数据
W_ErrorCode CSeviceFunctionNew::Clear_speed_value_L494_2016_NEW_lansheng()
{
    W_ErrorCode iRet = 0;
    W_I16 iKey;
    CSendFrame sendframe;
    CReceiveFrame rfRet;
    CMessageBoxCtrl message;
    CBinary creceive;

    // 确保车辆未处于运输模式，而且达到了正常行驶高度。
    FxShowMessageBox(g_GetTxtStringFormHtml("0x90023630"), g_GetTxtStringFormHtml("0x0000BE52") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000C1A5") + "\n" + "\n" + g_GetTxtStringFormHtml("0x90013017")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x90018702") + "\n" + "\n" + g_GetTxtStringFormHtml("0x90020CC7")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BFB5") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BFB6")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BFB7") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9001DB4A")
        + "\n" + "\n" + "\n" + "\n" + g_GetTxtStringFormHtml("0x90022F2E") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900255B3")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BFBA"), DF_MB_OK, DT_LEFT);

    // 您想继续吗？
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x90023630"), g_GetTxtStringFormHtml("0x0000BFBB"), DF_MB_YESNO, DT_LEFT);
    if (iKey == 7)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B8D1")); // 中止程序
        return iRet;
    }

    // 点火打开
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x9000808A"), DF_MB_OK, DT_LEFT);
    message.InitCtrl(g_GetTxtStringFormHtml("0x0000007A"), g_GetTxtStringFormHtml("0x800015FD,0x0000B09D"), 0, DT_CENTER);//正在初始化系统  请等待
    CMessageBoxCtrl::SetBusyStatus(true);
    message.ShowCtrl();

    // 系统
    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x10\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x0718);
    if (iRet < 0)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }

    sendframe.SetSendFrame(CBinary("\x11\x01", 2));
    rfRet = SendDataComm(sendframe);
    creceive = rfRet.GetFirst();
    if (creceive.GetByteAt(0) != 0x51 || creceive.GetByteCount() == 0)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }

    sendframe.SetSendFrame(CBinary("\x14\xFF\xFF\xFF", 4));
    rfRet = SendDataComm(sendframe);
    creceive = rfRet.GetFirst();
    if (creceive.GetByteCount() == 0 || creceive.GetByteAt(0) != 0x54)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }


    // 系统
    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x73\x08\x02\x11\x01\x00\x00\x00\x00\x00", 11), 0x077B);
    if (iRet < 0)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }

    sendframe.SetSendFrame(CBinary("\x14\xFF\xFF\xFF", 4));
    rfRet = SendDataComm(sendframe);
    creceive = rfRet.GetFirst();
    if (creceive.GetByteCount() == 0 || creceive.GetByteAt(0) != 0x54)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }


    // 系统
    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x10\x08\x02\x10\x03\x00\x00\x00\x00\x00", 11), 0x0718);
    if (iRet < 0)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }

    iRet = SafeLogin_Standard3(CBinary("\x27\x01", 2), 0x32BF9E);  // 32 BF 9E
    if (iRet < 0)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }


    // 系统
    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x73\x08\x02\x10\x03\x00\x00\x00\x00\x00", 11), 0x077B);
    if (iRet < 0)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }


    CMessageBoxCtrl::SetBusyStatus(false);
    // 测试正在进行
    message.InitCtrl(g_GetTxtStringFormHtml("0x0000007A"), g_GetTxtStringFormHtml("0x0000B1C3,0x0000B09D"), 0, DT_CENTER);
    CMessageBoxCtrl::SetBusyStatus(true);
    message.ShowCtrl();



    iRet = SafeLogin_Standard3(CBinary("\x27\x01", 2), 0x73E285);  // 73 E2 85
    if (iRet < 0)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }



    // 系统
    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x10\x08\x04\x2E\x3B\x5A\x01\x00\x00\x00", 11), 0x0718);
    if (iRet < 0)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }


    sendframe.SetSendFrame(CBinary("\x2F\x3B\x56\x03\x00", 5));  // 07 10 08 05 2F 3B 56 03 00 00 00
    rfRet = SendDataComm(sendframe);
    creceive = rfRet.GetFirst();
    if (creceive.GetByteCount() == 0 || creceive.GetByteAt(0) != 0x6F)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }

    sendframe.SetSendFrame(CBinary("\x22\x3B\x3D", 3));
    rfRet = SendDataComm(sendframe);
    creceive = rfRet.GetFirst();   // 07 18 08 04 62 3B 3D 2C 00 00 00
    if (creceive.GetByteCount() != 4 || creceive.GetByteAt(0) != 0x62 || creceive.GetByteAt(1) != 0x3B || creceive.GetByteAt(2) != 0x3D || creceive.GetByteAt(3) != 0x2C)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }

    sendframe.SetSendFrame(CBinary("\x22\x3B\x08", 3));  // 07 10 08 03 22 3B 08 00 00 00 00
    rfRet = SendDataComm(sendframe);
    creceive = rfRet.GetFirst();
    if (creceive.GetByteCount() == 0 || creceive.GetByteAt(0) != 0x62)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }

    sendframe.SetSendFrame(CBinary("\x2F\x3B\x55\x03\x03", 5));  // 07 10 08 05 2F 3B 55 03 03 00 00
    rfRet = SendDataComm(sendframe);
    creceive = rfRet.GetFirst();
    if (creceive.GetByteCount() == 0 || creceive.GetByteAt(0) != 0x6F || creceive.GetByteAt(1) != 0x3B || creceive.GetByteAt(2) != 0x55 || creceive.GetByteAt(3) != 0x03 || creceive.GetByteAt(4) != 0x03)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }

    sendframe.SetSendFrame(CBinary("\x2F\xF4\x0C\x03\x17\x70", 6));  // 07 10 08 06 2F F4 0C 03 17 70 00
    rfRet = SendDataComm(sendframe);
    creceive = rfRet.GetFirst();
    if (creceive.GetByteCount() == 0 || creceive.GetByteAt(0) != 0x6F || creceive.GetByteAt(1) != 0xF4 || creceive.GetByteAt(2) != 0x0C)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }


    // 系统
    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xF4\x0C\x00\x00\x00\x00", 11), 0x07E8);
    if (iRet < 0)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }


    // 系统
    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x10\x08\x03\x22\xF4\x0D\x00\x00\x00\x00", 11), 0x0718);  // // 07 E0 08 03 22 F4 0D 00 00 00 00
    if (iRet < 0)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }


    // 系统
    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x73\x08\x05\x31\x01\x04\x0E\xFF\x00\x00", 11), 0x077B); // 07 73 08 05 31 01 04 0E FF 00 00
    if (iRet < 0)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }


    sendframe.SetSendFrame(CBinary("\x22\x3B\x5D", 3));  // 07 73 08 03 22 3B 5D 00 00 00 00
    rfRet = SendDataComm(sendframe);
    creceive = rfRet.GetFirst();
    if (creceive.GetByteCount() != 7 || creceive.GetByteAt(0) != 0x62 || creceive.GetByteAt(1) != 0x3B || creceive.GetByteAt(2) != 0x5D)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }


    sendframe.SetSendFrame(CBinary("\x22\x3B\x61", 3));  // 07 73 08 03 22 3B 61 00 00 00 00
    rfRet = SendDataComm(sendframe);
    creceive = rfRet.GetFirst();
    if (creceive.GetByteCount() != 7 || creceive.GetByteAt(0) != 0x62 || creceive.GetByteAt(1) != 0x3B || creceive.GetByteAt(2) != 0x61)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }


    sendframe.SetSendFrame(CBinary("\x22\x3B\x5B", 3));  // 07 73 08 03 22 3B 5B 00 00 00 00
    rfRet = SendDataComm(sendframe);
    creceive = rfRet.GetFirst();
    if (creceive.GetByteCount() != 7 || creceive.GetByteAt(0) != 0x62 || creceive.GetByteAt(1) != 0x3B || creceive.GetByteAt(2) != 0x5B)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }


    sendframe.SetSendFrame(CBinary("\x22\x3B\x5B", 3));  // 07 73 08 03 22 3B 5B 00 00 00 00
    rfRet = SendDataComm(sendframe);
    creceive = rfRet.GetFirst();
    if (creceive.GetByteCount() != 7 || creceive.GetByteAt(0) != 0x62 || creceive.GetByteAt(1) != 0x3B || creceive.GetByteAt(2) != 0x5B)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }

    sendframe.SetSendFrame(CBinary("\x11\x01", 2));
    rfRet = SendDataComm(sendframe);
    CMessageBoxCtrl::SetBusyStatus(0);


    // 系统
    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x10\x08\x02\x10\x03\x00\x00\x00\x00\x00", 11), 0x0718);
    if (iRet < 0)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }



    // 安全访问
    iRet = SafeLogin_Standard3(CBinary("\x27\x01", 2), 0x32BF9E);  // 32 BF 9E
    if (iRet < 0)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }

    sendframe.SetSendFrame(CBinary("\x2E\x3B\x5A\x00", 4));  // 07 10 08 04 2E 3B 5A 00 00 00 00
    rfRet = SendDataComm(sendframe);
    creceive = rfRet.GetFirst();
    if (creceive.GetByteCount() < 4 || creceive.GetByteAt(0) != 0x6E || creceive.GetByteAt(1) != 0x3B || creceive.GetByteAt(2) != 0x5A || creceive.GetByteAt(3) != 0x6E)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }

    sendframe.SetSendFrame(CBinary("\x2F\x3B\x55\x03\x00", 5));  // 07 10 08 05 2F 3B 55 03 00 00 00
    rfRet = SendDataComm(sendframe);
    creceive = rfRet.GetFirst();
    if (creceive.GetByteCount() < 4 || creceive.GetByteAt(0) != 0x6F)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }

    sendframe.SetSendFrame(CBinary("\x2F\x3B\x55\x00", 4));  //07 10 08 04 2F 3B 55 00 00 00 00
    rfRet = SendDataComm(sendframe);
    creceive = rfRet.GetFirst();
    if (creceive.GetByteCount() < 5 || creceive.GetByteAt(0) != 0x6F || creceive.GetByteAt(3) != 0x03)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }

    sendframe.SetSendFrame(CBinary("\x2F\x3B\x56\x03\x00", 5));
    rfRet = SendDataComm(sendframe);
    creceive = rfRet.GetFirst();
    if (creceive.GetByteCount() < 4 || creceive.GetByteAt(0) != 0x6F)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }

    sendframe.SetSendFrame(CBinary("\x2F\x3B\x56\x00", 4));
    rfRet = SendDataComm(sendframe);
    creceive = rfRet.GetFirst();
    if (creceive.GetByteCount() < 5 || creceive.GetByteAt(0) != 0x6F || creceive.GetByteAt(3) != 0x03)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }

    sendframe.SetSendFrame(CBinary("\x10\x01", 2));
    rfRet = SendDataComm(sendframe);
    creceive = rfRet.GetFirst();
    if (creceive.GetByteAt(0) != 0x50 || creceive.GetByteCount() == 0)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }

    // 系统
    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x73\x08\x02\x10\x01\x00\x00\x00\x00\x00", 11), 0x077B);
    if (iRet < 0)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }


    // 系统
    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x10\x08\x04\x14\xFF\xFF\xFF\x00\x00\x00", 11), 0x0718);
    if (iRet < 0)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }


    sendframe.SetSendFrame(CBinary("\x19\x01\x0C", 3));  // 07 73 08 03 19 01 0C 00 00 00 00
    rfRet = SendDataComm(sendframe);
    creceive = rfRet.GetFirst();
    if (creceive.GetByteAt(0) != 0x59 || creceive.GetByteCount() != 7 || creceive.GetByteAt(1) != 0x01 || creceive.GetByteAt(2) != 0x0C)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }

    // 系统
    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x73\x08\x03\x19\x01\x0C\x00\x00\x00\x00", 11), 0x077B);
    if (iRet < 0)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x90001281"), DF_MB_OK, DT_LEFT);
        return iRet;
    }


    m_pNetLayer->KeepLink(0); // 断开链路保持

    CMessageBoxCtrl::SetBusyStatus(false);
    // 点火关闭
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_OK, DT_LEFT);

    // 测试完成
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000007A"), g_GetTxtStringFormHtml("0x0000BE55"), DF_MB_OK, DT_LEFT);


    CMessageBoxCtrl::SetBusyStatus(false);

    // 故障码
    iRet = ClearSysDTC_Programme_538(PTL_CAN_11_500K, CBinary("\x07\x36\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x073E);

    return iRet;

}














// 驻车辅助控制模块复位
W_ErrorCode CSeviceFunctionNew::PCM_reset_NEW_lansheng_L494_2016()
{
    W_ErrorCode iRet = CErrorCode::EC_SUCCESS;
    W_I16 iKey = 0;

    CSendFrame sendframe;
    CReceiveFrame rfRet;
    CBinary binRecive;
    CVehicleComm ecuInter;

    //step01 这个例行程序将进行一次驻车辅助控制模块复位和清零。
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x90025400"), g_GetTxtStringFormHtml("0x9002711D") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002711E") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BBAB"), DF_MB_OKCANCEL, DT_LEFT);

    if (DF_IDCANCEL == iKey)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B8D1"), DF_MB_ANYKEYRETURN, DT_LEFT);    //操作人员已中止了此应用程序
        return CErrorCode::EC_DATA;
    }

    //step02 点火打开、发动机、电压、点火关闭
    iRet = CheckEngineStop(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xF4\x0C\x00\x00\x00\x00", 11), 0x07E8, CBinary("\x01\x00", 2));
    if (iRet)
        return CErrorCode::EC_DATA;

    //step03 点火打开
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"), DF_MB_ANYKEYRETURN, DT_LEFT);
    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通信中
    Sleep(800);

    iKey = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x36\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x073E);

    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\xDF\x08\x02\x01\x00\x00\x00\x00\x00\x00", 11), 0x07E7); // OBD进系统 （发动机）
    sendframe.SetSendFrame(CBinary("\x14\xff\xff\xff", 4)); // 清码
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    if (iKey < 0)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }
    if (0 == rfRet.GetByteCount())
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }
    if (binRecive.GetByteCount() < 2)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_DATA;
    }
    if (checkIs7f(binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"), DF_MB_ANYKEYRETURN, DT_LEFT);    //ECU不支持    
        return CErrorCode::EC_ECU_REFUSE;
    }

    //关闭点火开关（位置 0）.
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml(TXT_HTML_STATE_VALUE_IGNITION_OFF));

    // 点火打开
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"), DF_MB_ANYKEYRETURN, DT_LEFT);

    iKey = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x36\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x073E);
    SendDataComm(CBinary("\x22\xf1\x03", 3));
    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x36\x08\x02\x10\x03\x00\x00\x00\x00\x00", 11), 0x073E);
    if (iRet < 0)
    {
        CMessageBoxCtrl::SetBusyStatus(false);
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        FxShowMessageBox(FxGetStdString(STD_INFO_COMMUNICATION_STATUS), FxGetStdString(STD_INFO_NO_COMMUNICATION_SYS), DF_MB_BACK, DT_LEFT);
        return iRet;
    }

    CBinary cmd_reset = CBinary("\x31\x01\x04\x0E", 4);  // 07 36 08 04 31 01 04 0E 00 00 00
    sendframe.SetSendFrame(cmd_reset);
    rfRet = SendDataComm(sendframe);
    m_binRecive = rfRet.GetFirst();
    if (0 == rfRet.GetByteCount())
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }
    if (checkIs7f(m_binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"), DF_MB_ANYKEYRETURN, DT_LEFT);    //ECU不支持    
        return CErrorCode::EC_ECU_REFUSE;
    }
    else if (m_binRecive.GetByteCount() < 4 || m_binRecive[0] != 0x71 || m_binRecive[1] != 1 || m_binRecive[2] != cmd_reset[2] || m_binRecive[3] != cmd_reset[3])
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BCF0"), g_GetTxtStringFormHtml("0x0000B21F"), DF_MB_ANYKEYRETURN, DT_LEFT);    //失败
        FxShowMessageBox(g_GetTxtStringFormHtml("@STATE_IGNITIONP"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_ANYKEYRETURN, DT_LEFT);//关闭点火开关
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000069"), g_GetTxtStringFormHtml("0x0000006A,0x0000B105"), DF_MB_ANYKEYRETURN, DT_LEFT);//程序未能完成  必须调查该问题
        return CErrorCode::EC_DATA;
    }

    m_pNetLayer->KeepLink(3000, CSendFrame(CBinary("\x3E\x80", 2)));    // 打开链路保持
    PleaseWait_xS_haveTTL(5000, g_GetTxtStringFormHtml("0x0000B09D"), g_GetTxtStringFormHtml("0x90025400"));//驻车辅助控制模块复位-请等待
    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通信中
    Sleep(800);
    SendDataComm(CBinary("\x10\x01", 2));
    m_pNetLayer->KeepLink(0); // 断开链路保持

    // 驻车辅助控制模块复位完成
    FxShowMessageBox(g_GetTxtStringFormHtml("0x90025400"), g_GetTxtStringFormHtml("0x900080A6") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002709F") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OK, DT_LEFT);
    SendDataComm(CBinary("\x22\xF1\x03", 3));
    ecuInter.SendReceive(CBinary("\x40\x00\x07\xDF\x01\x00", 6));
    ecuInter.SendReceive(CBinary("\x40\x00\x07\xDF\x11\x81", 6));

    //step04 无条件重置模块-完成
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000004C"), g_GetTxtStringFormHtml("0x0000005A") + "\n" + "\n" + g_GetTxtStringFormHtml("0x90001288"), DF_MB_NOBUTTON);
    CMessageBoxCtrl::SetBusyStatus(true); //漏斗打开
    Sleep(1000);
    CMessageBoxCtrl::SetBusyStatus(false);//漏斗关闭

    //step05 模块初始化
    PleaseWait_xS_haveTTL(5000, g_GetTxtStringFormHtml("0x00000066"), g_GetTxtStringFormHtml("0x90020AA1"));

    //step06 关闭开关
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));

    //step07 点火打开
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"));

    //step07 模块初始化
    PleaseWait_xS_haveTTL(5000, g_GetTxtStringFormHtml("0x00000066"), g_GetTxtStringFormHtml("0x90020AA1"));

    //step08 控制模块程序成功完成
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000069"), g_GetTxtStringFormHtml("0x0000B0C7"), DF_MB_OK);


    //step08 故障码
    iRet = ClearSysDTC_Programme_538(PTL_CAN_11_500K, CBinary("\x07\x36\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x073E);

    return iRet;
}



// 驻车辅助控制模块复位配置状态
W_ErrorCode CSeviceFunctionNew::PCM_reset_cencter_NEW_lansheng_L494_2016()
{
    W_ErrorCode iRet = CErrorCode::EC_SUCCESS;
    W_I16 iKey = 0;

    CSendFrame sendframe;
    CReceiveFrame rfRet;
    CBinary binRecive;
    CVehicleComm ecuInter;

    //step01 此例行程序将使驻车辅助控制模块中心配置状态复位。
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x90013270"), g_GetTxtStringFormHtml("0x90027116") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BBAB"), DF_MB_OKCANCEL, DT_LEFT);
    if (DF_IDCANCEL == iKey)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B8D1"), DF_MB_ANYKEYRETURN, DT_LEFT);    //操作人员已中止了此应用程序
        return CErrorCode::EC_DATA;
    }

    //step02 点火打开、发动机、电压、点火关闭
    iRet = CheckEngineStop(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xF4\x0C\x00\x00\x00\x00", 11), 0x07E8, CBinary("\x01\x00", 2));
    if (iRet)
        return CErrorCode::EC_DATA;

    //step03 点火打开
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"), DF_MB_ANYKEYRETURN, DT_LEFT);
    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通信中
    Sleep(800);


    SendDataComm(CBinary("\x22\xF1\x03", 3));
    ecuInter.SendReceive(CBinary("\x40\x00\x07\xDF\x01\x00", 6));  // 07 DF 08 02 01 00 00 00 00 00 00
    ecuInter.SendReceive(CBinary("\x40\x00\x07\xDF\x11\x81", 6));  // 07 DF 08 02 11 81 00 00 00 00 00

    //step04 无条件重置模块-完成
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000004C"), g_GetTxtStringFormHtml("0x0000005A,0x0000B0A1"), DF_MB_NOBUTTON);
    CMessageBoxCtrl::SetBusyStatus(true); //漏斗打开
    Sleep(1000);
    CMessageBoxCtrl::SetBusyStatus(false);//漏斗关闭

    //step05 模块初始化
    PleaseWait_xS_haveTTL(5000, g_GetTxtStringFormHtml("0x00000066"), g_GetTxtStringFormHtml("0x90020AA1"));
    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通信中
    Sleep(800);


    iKey = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x36\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x073E);
    SendDataComm(CBinary("\x22\xf1\x03", 3));
    sendframe.SetSendFrame(CBinary("\x10\x03", 2));
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    if (iKey < 0)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }
    if (0 == rfRet.GetByteCount())
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }
    if (binRecive.GetByteCount() < 2)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_DATA;
    }
    if (checkIs7f(binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"), DF_MB_ANYKEYRETURN, DT_LEFT);    //ECU不支持    
        return CErrorCode::EC_ECU_REFUSE;
    }


    CBinary cmd_reset = CBinary("\x31\x01\x0E\x08", 4);
    sendframe.SetSendFrame(cmd_reset);
    rfRet = SendDataComm(sendframe);
    m_binRecive = rfRet.GetFirst();
    if (0 == rfRet.GetByteCount())
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }
    if (checkIs7f(m_binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"), DF_MB_ANYKEYRETURN, DT_LEFT);    //ECU不支持    
        return CErrorCode::EC_ECU_REFUSE;
    }
    else if (m_binRecive.GetByteCount() < 4 || m_binRecive[0] != 0x71 || m_binRecive[1] != 1 || m_binRecive[2] != cmd_reset[2] || m_binRecive[3] != cmd_reset[3])
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BCF0"), g_GetTxtStringFormHtml("0x0000B21F"), DF_MB_ANYKEYRETURN, DT_LEFT);    //失败
        FxShowMessageBox(g_GetTxtStringFormHtml("@STATE_IGNITIONP"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_ANYKEYRETURN, DT_LEFT);//关闭点火开关
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000069"), g_GetTxtStringFormHtml("0x0000006A,0x0000B105"), DF_MB_ANYKEYRETURN, DT_LEFT);//程序未能完成  必须调查该问题
        return CErrorCode::EC_DATA;
    }
    m_pNetLayer->KeepLink(3000, CSendFrame(CBinary("\x3E\x80", 2)));    // 打开链路保持
    PleaseWait_xS_haveTTL(5000, g_GetTxtStringFormHtml("0x0000B09D"), g_GetTxtStringFormHtml("0x90025400"));//驻车辅助控制模块复位-请等待
    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通信中
    Sleep(800);
    SendDataComm(CBinary("\x10\x01", 2));
    m_pNetLayer->KeepLink(0); // 断开链路保持

    //step06 重新读入中央配置数据
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x90013270"), g_GetTxtStringFormHtml("0x900080A6") + "\n" + "\n" + g_GetTxtStringFormHtml("0x90027115")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BBAB"), DF_MB_OKCANCEL, DT_LEFT);
    if (DF_IDCANCEL == iKey)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B8D1"), DF_MB_ANYKEYRETURN, DT_LEFT);    //操作人员已中止了此应用程序
        return CErrorCode::EC_DATA;
    }

    //step07 模块初始化
    PleaseWait_xS_haveTTL(5000, g_GetTxtStringFormHtml("0x00000066"), g_GetTxtStringFormHtml("0x90020AA1"));

    //step08 控制模块程序成功完成
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000069"), g_GetTxtStringFormHtml("0x0000B0C7"), DF_MB_OK);

    //step08 故障码
    iRet = ClearSysDTC_Programme_538(PTL_CAN_11_500K, CBinary("\x07\x36\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x073E);

    return iRet;
}



// 验证钥匙
//W_ErrorCode CSeviceFunctionNew::Verify_keys_NEW_lansheng_L494_2016()
//{
//    W_ErrorCode iRet=0;
//    W_I16 iKey=0;
//    CSendFrame sendframe;
//    CReceiveFrame rfRet;
//    //step1  
//    string strOpenFile = m_stropenfileConfigMenu;    
//    CJLRStringOperate strOpt;    
//    strOpt.Replace(strOpenFile,".ctv","");    
//
//    // 此应用程序将验证/测试已编程设置的钥匙的功能.
//    iKey=FxShowMessageBox(FxGetStdString(STD_TTL_MSG_INFORMATION),g_GetTxtStringFormHtml("0x0000B22F")+"\n"+"\n"+
//            g_GetTxtStringFormHtml("0x0000B230")+"\n"+"\n"+g_GetTxtStringFormHtml("0x0000BBAB"),DF_MB_OKCANCEL,DT_LEFT);
//    if(iKey==DF_IDCANCEL)
//        return iRet;
//
//    // 将所有已拿到的现有（已编程的）钥匙放入车内换档杆周边。
//    iKey=FxShowMessageBox(FxGetStdString(STD_TTL_MSG_INFORMATION),g_GetTxtStringFormHtml("0x0000B203"),DF_MB_OKCANCEL,DT_LEFT);
//    if(iKey==DF_IDCANCEL)
//        return iRet;
//
//    // 确保关闭点火开关
//    FxShowMessageBox(FxGetStdString(STD_TTL_MSG_INFORMATION),g_GetTxtStringFormHtml("0x00000065"),DF_MB_OK,DT_LEFT);
//
//    // 下列应用程序将自动控制车辆点火.
//    FxShowMessageBox(FxGetStdString(STD_TTL_MSG_INFORMATION),g_GetTxtStringFormHtml("0x0000B0C8"),DF_MB_OK,DT_LEFT);
//
//    
//    iKey = EnterSystem(PTL_CAN_11_500K,CBinary("\x07\x26\x08\x03\x22\xf1\x03\x00\x00\x00\x00",11),0x072E);
//    if (iKey < 0)
//    {
//        FxShowMessageBox(STD_TTL_MSG_INFORMATION,STD_TXT_MSG_COMMFAIL,DF_MB_BACK,DT_LEFT);
//        return CErrorCode::EC_TIME_OVER;
//    }
//
//    // 进入系统 + 安全访问( 88 70 3A ) + 07 26 08 05 31 01 20 38 01 00 00
//    iRet=BCM_TurnOnIgnition_L322_2010();
//    if(iRet<0)
//        return iRet;
//
//    // 钥匙数量输入框
//    BYTE iInputKeyNum=0;
//    iRet=InputKeyNum(g_GetTxtStringFormHtml("0x0000B231"),iInputKeyNum);  // 请输入您准备验证的钥匙数量，并将其准备好.
//    if(iRet<0)
//        return iRet;
//
//    //step7
//    FxShowMessageBox(STD_TTL_MSG_INFORMATION,STD_TXT_MSG_ESTABILISHCOMM,DF_MB_NOBUTTON);
//    iKey = EnterSystem(PTL_CAN_11_500K,CBinary("\x07\x26\x08\x03\x22\xf1\x03\x00\x00\x00\x00",11),0x072E);
// iRet=EnterSystem(PTL_CAN_11_125K,CBinary("\x07\x26\x08\x02\x10\x03\x00\x00\x00\x00\x00",11),0x072E);
//    if (iKey < 0)
//    {
//        FxShowMessageBox(STD_TTL_MSG_INFORMATION,STD_TXT_MSG_COMMFAIL,DF_MB_BACK,DT_LEFT);
//        return CErrorCode::EC_TIME_OVER;
//    }
//    if(iRet<0)
//    {
//        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
//        return iRet;
//    }
//    iRet=SafeLogin_Standard3(CBinary("\x27\x09",2),0xD80F13);
//    if(iRet==CErrorCode::EC_ECU_REFUSE)
//    {
//        FxShowMessageBox(FxGetStdString(STD_TTL_MSG_INFORMATION),g_GetTxtStringFormHtml("0x0000B09F"),DF_MB_BACK);
//        return CErrorCode::EC_ECU_REFUSE;
//    }
//    else if(iRet<0)
//    {
//        FxShowMessageBox(STD_TTL_MSG_INFORMATION,STD_TXT_MSG_COMMFAIL,DF_MB_BACK,DT_LEFT);
//        return CErrorCode::EC_TIME_OVER;
//    }
//    //step8
//    sendframe.SetSendFrame(CBinary("\x31\x01\x80\x04",4));
//    rfRet =SendDataComm(sendframe);
//    if(rfRet.GetByteCount()==0)
//    {
//        FxShowMessageBox(STD_TTL_MSG_INFORMATION,STD_TXT_MSG_COMMFAIL,DF_MB_BACK,DT_LEFT);
//        return CErrorCode::EC_TIME_OVER;
//    }
//    //step9
//    sendframe.SetSendFrame(CBinary("\x31\x03\x80\x04",4));
//    rfRet =SendDataComm(sendframe);
//    if(rfRet.GetByteCount()==0)
//    {
//        FxShowMessageBox(STD_TTL_MSG_INFORMATION,STD_TXT_MSG_COMMFAIL,DF_MB_BACK,DT_LEFT);
//        return CErrorCode::EC_TIME_OVER;
//    }
//    m_binResponse=rfRet.GetFirst();
//    BYTE iNumProgram=0;
//    BYTE iNumFound=0;
//    if(m_binResponse.GetByteCount()>6)
//        iNumProgram=m_binResponse[6];
//    if(m_binResponse.GetByteCount()>7)
//        iNumFound=m_binResponse[7];
//    //step10
//    if(iNumFound!=iInputKeyNum)
//    {
//        string str0=g_GetTxtStringFormHtml("0x0000B232");
//        string strMask2=g_GetTxtStringFormHtml("0x0000B206");
//        string strMask3=g_GetTxtStringFormHtml("0x0000B233");
//        char charTemp[500]="";
//        sprintf(charTemp,strMask2.c_str(),iNumFound);
//        string strItem2=charTemp;
//        sprintf(charTemp,strMask3.c_str(),iInputKeyNum);
//        string strItem3=charTemp;
//        string strAll=str0+"\n"+strItem2+"\n"+strItem3;
//        FxShowMessageBox(FxGetStdString(STD_TTL_MSG_INFORMATION),strAll,DF_MB_OK,DT_LEFT);
//        //step18
//        iRet=BCM_TurnOnIgnition_L322_2010();
//        if(iRet<0)
//            return iRet;
//        //step19
//        FxShowMessageBox(STD_TTL_MSG_INFORMATION,STD_TXT_MSG_ESTABILISHCOMM,DF_MB_NOBUTTON);
//        iRet=EnterSystem(PTL_CAN_11_125K,CBinary("\x07\x31\x08\x02\x10\x03\x00\x00\x00\x00\x00",11),0x0739);
//        if(iRet<0)
//        {
//            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
//            return iRet;
//        }
//        iRet=SafeLogin_Standard3(CBinary("\x27\x09",2),0xD80F13);
//        if(iRet==CErrorCode::EC_ECU_REFUSE)
//        {
//            FxShowMessageBox(FxGetStdString(STD_TTL_MSG_INFORMATION),g_GetTxtStringFormHtml("0x0000B09F"),DF_MB_BACK);
//            return CErrorCode::EC_ECU_REFUSE;
//        }
//        else if(iRet<0)
//        {
//            FxShowMessageBox(STD_TTL_MSG_INFORMATION,STD_TXT_MSG_COMMFAIL,DF_MB_BACK,DT_LEFT);
//            return CErrorCode::EC_TIME_OVER;
//        }
//        //step20
//        FxShowMessageBox(FxGetStdString(STD_TTL_MSG_INFORMATION),g_GetTxtStringFormHtml("0x0000B234,0x0000B20C"),DF_MB_OK,DT_LEFT);
//        //step21
//        iRet=Verify_XKey_Step21_L319_2010(iNumFound,iInputKeyNum);
//        if(iRet<0) return iRet;
//        //step22
//        //执行Step11~Step17
//    }
//    else
//    {
//        string strMask1=g_GetTxtStringFormHtml("0x0000B205");
//        string strMask2=g_GetTxtStringFormHtml("0x0000B206");
//        string strMask3=g_GetTxtStringFormHtml("0x0000B233");
//        char charTemp[500]="";
//        sprintf(charTemp,strMask1.c_str(),iNumProgram);
//        string strItem1=charTemp;
//        sprintf(charTemp,strMask2.c_str(),iNumFound);
//        string strItem2=charTemp;
//        sprintf(charTemp,strMask3.c_str(),iInputKeyNum);
//        string strItem3=charTemp;
//        string strAll=strItem1+"\n"+strItem2+"\n"+strItem3;
//        FxShowMessageBox(FxGetStdString(STD_TTL_MSG_INFORMATION),strAll,DF_MB_OK,DT_LEFT);
//    }
//
//    //step11
//    FxShowMessageBox(STD_TTL_MSG_INFORMATION,STD_TXT_MSG_ESTABILISHCOMM,DF_MB_NOBUTTON);
//    sendframe.SetSendFrame(CBinary("\x10\x01",2));
//    rfRet =SendDataComm(sendframe);
//    if(rfRet.GetByteCount()==0)
//    {
//        FxShowMessageBox(STD_TTL_MSG_INFORMATION,STD_TXT_MSG_COMMFAIL,DF_MB_BACK,DT_LEFT);
//        return CErrorCode::EC_TIME_OVER;
//    }
//    //step12
//    iRet=BCM_TurnOnIgnition_L322_2010();
//    if(iRet<0)
//        return iRet;
//    //step13
//    sendframe.SetSendFrame(CBinary("\x10\x01",2));
//    rfRet =SendDataComm(sendframe);
//    if(rfRet.GetByteCount()==0)
//    {
//        FxShowMessageBox(STD_TTL_MSG_INFORMATION,STD_TXT_MSG_COMMFAIL,DF_MB_BACK,DT_LEFT);
//        return CErrorCode::EC_TIME_OVER;
//    }
//    //step14
//    if (strOpenFile == "module_special_L550_2017")    //L550_2017车型
//    {
//        sendframe.SetSendFrame(CBinary("\x22\xf1\x03",3));
//        rfRet =SendDataComm(sendframe);
//    }
//    else
//    {
//        sendframe.SetSendFrame(CBinary("\x10\x03",2));
//        rfRet =SendDataComm(sendframe);
//        if(rfRet.GetByteCount()==0)
//        {
//            FxShowMessageBox(STD_TTL_MSG_INFORMATION,STD_TXT_MSG_COMMFAIL,DF_MB_BACK,DT_LEFT);
//            return CErrorCode::EC_TIME_OVER;
//        }
//        iRet=SafeLogin_Standard3(CBinary("\x27\x21",2),0x88703A);
//        if(iRet==CErrorCode::EC_ECU_REFUSE)
//        {
//            FxShowMessageBox(FxGetStdString(STD_TTL_MSG_INFORMATION),g_GetTxtStringFormHtml("0x0000B09F"),DF_MB_BACK);
//            return CErrorCode::EC_ECU_REFUSE;
//        }
//        else if(iRet<0)
//        {
//            FxShowMessageBox(STD_TTL_MSG_INFORMATION,STD_TXT_MSG_COMMFAIL,DF_MB_BACK,DT_LEFT);
//            return CErrorCode::EC_TIME_OVER;
//        }
//    }
//    //step15
//    Verify_XKey_Step15_L319_2010(iNumFound,iInputKeyNum);
//    //step17
//    FxShowMessageBox(FxGetStdString(STD_TTL_MSG_INFORMATION),g_GetTxtStringFormHtml(TXT_HTML_STATE_VALUE_IGNITION_ON));
//    if (strOpenFile == "module_special_L550_2017")    //L550_2017车型
//        iRet=ClearSysDTC_Mode_0722(00,CBinary("\x07\x26\x08\x03\x19\x02\x0C\x00\x00\x00\x00",11),0x072E);
//    return iRet;    
//
//}



// 后排座椅校准
W_ErrorCode CSeviceFunctionNew::Driver_seat_NEW_lansheng_L494_2016(int value)
{
    W_ErrorCode eRct = CErrorCode::EC_SUCCESS;
    W_I16 iRet, iKey;

    CSendFrame sendframe;
    CReceiveFrame rfRet;
    string strTemp;
    CBinary m_binRecive;

    // 500K
    // 判断电压
    iRet = CheckEngineStop(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xF4\x0C\x00\x00\x00\x00", 11), 0x07E8, CBinary("\x01\x00", 2));
    if (iRet)
        return iRet;

    if (value == 0x00F015CD)
        EnterSystem(PTL_CAN_11_125K, CBinary("\x07\x44\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x074C);
    else if (value == 0x00F015CE)
        EnterSystem(PTL_CAN_11_125K, CBinary("\x07\xA3\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x07AB);


    CMessageBoxCtrl::SetBusyStatus(true);
    // 配置测试仪以选择正确的软件
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000C045"), g_GetTxtStringFormHtml("0x0000C100") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002A16C")
        , DF_MB_NOBUTTON, DT_LEFT);//完成
    Sleep(3000);
    CMessageBoxCtrl::SetBusyStatus(false);


    // 点火打开
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"));


    //执行随需自检将会使相关控制模块执行预定义的测试，这将导致任何相关的故障代码被记录（如果存在故障）
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B8FF"), g_GetTxtStringFormHtml("0x9001537C") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9001C263")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OKCANCEL, DT_LEFT);
    if (DF_IDCANCEL == iKey)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B8D1"));//操作人员已中止了次应用程序
        return iRet;
    }

    if (value == 0x00F015CD)
        EnterSystem(PTL_CAN_11_125K, CBinary("\x07\x44\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x074C);
    else if (value == 0x00F015CE)
        EnterSystem(PTL_CAN_11_125K, CBinary("\x07\xA3\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x07AB);

    SendDataComm(CBinary("\x22\xF1\x03", 3));
    sendframe.SetSendFrame(CBinary("\x10\x03", 2));
    rfRet = SendDataComm(sendframe);
    sendframe.SetSendFrame(CBinary("\x31\x01\x02\x02", 4));  // 07 44 08 04 31 01 02 02 00 00 00
    rfRet = SendDataComm(sendframe);

    if (0 == rfRet.GetByteCount())
    {

        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    m_binRecive = rfRet.GetFirst();
    if (checkIs7f(m_binRecive))
    {

        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return CErrorCode::EC_ECU_REFUSE;
    }

    if (m_binRecive.GetByteCount() < 4
        || m_binRecive[0] != 0x71
        || m_binRecive[1] != 0x01
        || m_binRecive[2] != 0x02
        || m_binRecive[3] != 0x02)
    {

        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000C045"), g_GetTxtStringFormHtml("0x0000B21F"));//失败
        return CErrorCode::EC_DATA;
    }
    sendframe.SetSendFrame(CBinary("\x31\x03\x02\x02", 4));  // 07 44 08 04 31 03 02 02 00 00 00
    rfRet = SendDataComm(sendframe);
    if (0 == rfRet.GetByteCount())
    {

        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    m_binRecive = rfRet.GetFirst();
    if (checkIs7f(m_binRecive))
    {

        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return CErrorCode::EC_ECU_REFUSE;
    }

    if (m_binRecive.GetByteCount() < 4
        || m_binRecive[0] != 0x71
        || m_binRecive[1] != 0x03
        || m_binRecive[2] != 0x02
        || m_binRecive[3] != 0x02)
    {

        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000C045"), g_GetTxtStringFormHtml("0x0000B21F"));//失败
        return CErrorCode::EC_DATA;
    }

    sendframe.SetSendFrame(CBinary("\x10\x01", 2));
    rfRet = SendDataComm(sendframe);

    // 随需自检模式
    PleaseWait_xS_haveTTL(5000, g_GetTxtStringFormHtml("0x9001537C"), g_GetTxtStringFormHtml("0x0000005F"));

    // 随需自检模式 完成  
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B8FF") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002A16C")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OK, DT_LEFT);

    //下述例行程序将让驾驶员座椅模块的所有座椅轴线值恢复到默认值
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x9000E8F8"), g_GetTxtStringFormHtml("0x90022310") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BF03")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OKCANCEL, DT_LEFT);
    if (DF_IDCANCEL == iKey)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B8D1"));//操作人员已中止了次应用程序
        return iRet;
    }

    if (value == 0x00F015CD)
        EnterSystem(PTL_CAN_11_125K, CBinary("\x07\x44\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x074C);
    else if (value == 0x00F015CE)
        EnterSystem(PTL_CAN_11_125K, CBinary("\x07\xA3\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x07AB);

    SendDataComm(CBinary("\x22\xf1\x03", 3));
    sendframe.SetSendFrame(CBinary("\x10\x03", 2));
    rfRet = SendDataComm(sendframe);
    sendframe.SetSendFrame(CBinary("\x31\x01\x04\x06", 4));  // 07 44 08 04 31 01 04 06 00 00 00
    rfRet = SendDataComm(sendframe);
    if (0 == rfRet.GetByteCount())
    {

        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    m_binRecive = rfRet.GetFirst();
    if (checkIs7f(m_binRecive))
    {

        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return CErrorCode::EC_ECU_REFUSE;
    }

    if (m_binRecive.GetByteCount() < 4
        || m_binRecive[0] != 0x71
        || m_binRecive[1] != 0x01
        || m_binRecive[2] != 0x04
        || m_binRecive[3] != 0x06)
    {

        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000C045"), g_GetTxtStringFormHtml("0x0000B21F"));//失败
        return CErrorCode::EC_DATA;
    }

    sendframe.SetSendFrame(CBinary("\x10\x01", 2));
    rfRet = SendDataComm(sendframe);

    // 重置所有自适应
    PleaseWait_xS_haveTTL(5000, g_GetTxtStringFormHtml("0x90022310"), g_GetTxtStringFormHtml("0x0000005F"));

    // 重置完成
    FxShowMessageBox(g_GetTxtStringFormHtml("0x9000E8F8"), g_GetTxtStringFormHtml("0x90022310") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9000128B")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OK, DT_LEFT);


    if (value == 0x00F015CD)
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x00000069,0x9002ADE7,0x0000B931"), DF_MB_OK, DT_LEFT);
    else if (value == 0x00F015CE)
        FxShowMessageBox(g_GetTxtStringFormHtml("0x9000E8F9"), g_GetTxtStringFormHtml("0x00000069,0x900210C4,0x0000B931"), DF_MB_OK, DT_LEFT);

    //  下述程序将执行座椅校准，在此操作过程中座椅可能会移动。
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x9000E8F8"), g_GetTxtStringFormHtml("0x9002ADE7") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002252F")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OKCANCEL, DT_LEFT);
    if (DF_IDCANCEL == iKey)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x00000069m"));//操作人员已中止了次应用程序
        return iRet;
    }

    if (value == 0x00F015CD)
        EnterSystem(PTL_CAN_11_125K, CBinary("\x07\x44\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x074C);
    else if (value == 0x00F015CE)
        EnterSystem(PTL_CAN_11_125K, CBinary("\x07\xA3\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x07AB);

    SendDataComm(CBinary("\x22\xf1\x03", 3));
    sendframe.SetSendFrame(CBinary("\x10\x03", 2));
    rfRet = SendDataComm(sendframe);
    sendframe.SetSendFrame(CBinary("\x31\x01\x20\x5F", 4));  // 07 44 08 04 31 01 20 5F 00 00 00
    rfRet = SendDataComm(sendframe);
    if (0 == rfRet.GetByteCount())
    {

        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    m_binRecive = rfRet.GetFirst();
    if (checkIs7f(m_binRecive))
    {

        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return CErrorCode::EC_ECU_REFUSE;
    }

    if (m_binRecive.GetByteCount() < 4
        || m_binRecive[0] != 0x71
        || m_binRecive[1] != 0x01
        || m_binRecive[2] != 0x20
        || m_binRecive[3] != 0x5F)
    {

        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000C045"), g_GetTxtStringFormHtml("0x0000B21F"));//失败
        return CErrorCode::EC_DATA;
    }

    sendframe.SetSendFrame(CBinary("\x31\x03\x20\x5F", 4));  // 07 44 08 04 31 03 20 5F 00 00 00
    rfRet = SendDataComm(sendframe);
    if (0 == rfRet.GetByteCount())
    {

        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    m_binRecive = rfRet.GetFirst();
    if (checkIs7f(m_binRecive))
    {

        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return CErrorCode::EC_ECU_REFUSE;
    }

    if (m_binRecive.GetByteCount() < 4
        || m_binRecive[0] != 0x71
        || m_binRecive[1] != 0x03
        || m_binRecive[2] != 0x20
        || m_binRecive[3] != 0x5F)
    {

        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000C045"), g_GetTxtStringFormHtml("0x0000B21F"));//失败
        return CErrorCode::EC_DATA;
    }

    sendframe.SetSendFrame(CBinary("\x10\x01", 2));
    rfRet = SendDataComm(sendframe);

    if (value == 0x00F015CD)
        // 驾驶员一侧
        PleaseWait_xS_haveTTL(10000, g_GetTxtStringFormHtml("0x0000B90D"), g_GetTxtStringFormHtml("0x0000005F"));
    else
        // 乘客一侧
        PleaseWait_xS_haveTTL(10000, g_GetTxtStringFormHtml("0x900210C4"), g_GetTxtStringFormHtml("0x0000005F"));


    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关

    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011")); // 点火打开

    // 后座校准
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x900080A6") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002CFD3")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000B930") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OK, DT_LEFT);

    if (value == 0x00F015CD)
        // 右侧标定
        iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000A262") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002252F")
            + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OKCANCEL, DT_LEFT);
    else if (value == 0x00F015CE)
        // 左侧标定
        iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000A263") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002252F")
            + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OKCANCEL, DT_LEFT);

    if (DF_IDCANCEL == iKey)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x00000069m"));//操作人员已中止了次应用程序
        return iRet;
    }

    if (value == 0x00F015CD)
        EnterSystem(PTL_CAN_11_125K, CBinary("\x07\x44\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x074C);
    else if (value == 0x00F015CE)
        EnterSystem(PTL_CAN_11_125K, CBinary("\x07\xA3\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x07AB);

    sendframe.SetSendFrame(CBinary("\x10\x03", 2));
    rfRet = SendDataComm(sendframe);
    sendframe.SetSendFrame(CBinary("\x31\x01\x20\x55", 4));
    rfRet = SendDataComm(sendframe);
    if (0 == rfRet.GetByteCount())
    {

        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    m_binRecive = rfRet.GetFirst();
    if (checkIs7f(m_binRecive))
    {

        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return CErrorCode::EC_ECU_REFUSE;
    }

    if (m_binRecive.GetByteCount() < 4
        || m_binRecive[0] != 0x71
        || m_binRecive[1] != 0x01
        || m_binRecive[2] != 0x20
        || m_binRecive[3] != 0x55)
    {

        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000C045"), g_GetTxtStringFormHtml("0x0000B21F"));//失败
        return CErrorCode::EC_DATA;
    }
    sendframe.SetSendFrame(CBinary("\x31\x03\x20\x55", 4));
    rfRet = SendDataComm(sendframe);
    if (0 == rfRet.GetByteCount())
    {

        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    m_binRecive = rfRet.GetFirst();
    if (checkIs7f(m_binRecive))
    {

        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return CErrorCode::EC_ECU_REFUSE;
    }

    if (m_binRecive.GetByteCount() < 4
        || m_binRecive[0] != 0x71
        || m_binRecive[1] != 0x03
        || m_binRecive[2] != 0x20
        || m_binRecive[3] != 0x55)
    {

        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000C045"), g_GetTxtStringFormHtml("0x0000B21F"));//失败
        return CErrorCode::EC_DATA;
    }
    sendframe.SetSendFrame(CBinary("\x10\x01", 2));
    rfRet = SendDataComm(sendframe);

    if (value == 0x00F015CD)
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B90D") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002A16C")
            + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OK, DT_LEFT);

    else if (value == 0x00F015CE)
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x900210C4") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002A16C")
            + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OK, DT_LEFT);

    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关
    iRet = ClearAllFaultCodes2(PTL_CAN_11_125K, CBinary("\x07\x44\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x074C, g_GetTxtStringFormHtml("0x0000005F"));
    return iRet;




}







// 前照灯水平调整高度传感器校准
W_ErrorCode CSeviceFunctionNew::Head_lamp_NEW_lansheng_L494_2016()
{
    W_ErrorCode iRet = 0;
    W_I16 iKey = 0;
    CSendFrame sendframe;
    CReceiveFrame rfRet;
    CVehicleComm ecuInter;
    string strOpenFile = m_stropenfileConfigMenu;
    CJLRStringOperate strOpt;
    strOpt.Replace(strOpenFile, ".ctv", "");

    // 如果更换了任何前照灯部件，则必须运行本例行应用程序.
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x90026EA9"), g_GetTxtStringFormHtml("0x0000B2E8") + "\n" + "\n" + g_GetTxtStringFormHtml("0x90022F8D"), DF_MB_OKCANCEL, DT_LEFT);
    if (iKey == DF_IDCANCEL)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B8D1"));
        return iRet;
    }

    // 点火打开
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"));

    // 确保前灯系统无故障，汽车处于静止状态.   下一步骤将执行系统校准运行.
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x90026EA9"), g_GetTxtStringFormHtml("0x0000B2E9") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000B2EA")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OKCANCEL, DT_LEFT);
    if (iKey == DF_IDCANCEL)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B8D1"));
        return iRet;
    }

    //step04
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), FxGetStdString(STD_INFO_ESTAB_VEH_COMMUNICATION), DF_MB_NOBUTTON);
    ecuInter.SendReceive(CBinary("\x40\x00\x07\x26\x22\xF1\x03", 7));
    EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x26\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x072E);
    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x26\x08\x02\x10\x03\x00\x00\x00\x00\x00", 11), 0x072E);
    iRet = EnterCheck(iRet);  // 判断条件
    if (iRet < 0)
        return iRet;
    iKey = SafeLogin_Standard3(CBinary("\x27\x03", 2), 0xE8E241);
    if (iKey < 0)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }
    m_pNetLayer->KeepLink(600, CSendFrame(CBinary("\x3E\x80", 2)));//打开链路
    sendframe.SetSendFrame(CBinary("\x31\x01\x20\x0D", 4));   // 07 26 08 04 31 01 20 0D 00 00 00
    rfRet = SendDataComm(sendframe);
    m_binRecive = rfRet.GetFirst();
    if (AcquireDataByIndex(m_binRecive, 0, 4) != 0x7101200D)
    {
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        if (!m_binRecive.GetByteCount())
        {
            FxShowMessageBox(FxGetStdString(STD_INFO_COMMUNICATION_STATUS), FxGetStdString(STD_INFO_NO_COMMUNICATION_SYS), DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_TIME_OVER;
        }
        if (checkIs7f(m_binRecive))
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));
            return CErrorCode::EC_ECU_REFUSE;
        }
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000043"), g_GetTxtStringFormHtml("0x0000B21F"));
        return CErrorCode::EC_DATA;
    }

    //step05
    PleaseWait_xS_haveTTL(3000, g_GetTxtStringFormHtml("0x0000B09D"), g_GetTxtStringFormHtml("0x00000043"));
    sendframe.SetSendFrame(CBinary("\x10\x01", 2));
    rfRet = SendDataComm(sendframe);
    m_pNetLayer->KeepLink(0);//打断链路
    if (strOpenFile == "module_special_X760_2016" || strOpenFile == "module_special_X260_2016" || strOpenFile == "module_special_L494_2016")//车型X760_2016
    {
        iRet = ClearAllFaultCodes1(PTL_CAN_11_500K, CBinary("\x07\x26\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 13), 0x072E, g_GetTxtStringFormHtml("0x90026EA9"), 0x07E8);
        return iRet;
    }
    else
    {
        //step06
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000043"), g_GetTxtStringFormHtml("0x0000B0A3"));// 完成
        PleaseWait_xS_haveTTL(2000, g_GetTxtStringFormHtml("0x00000066"), g_GetTxtStringFormHtml("0x0000005F"));//模块初始化

        //step08 读故障码
        iRet = ReadSysDTCNub_538(PTL_CAN_11_500K, PTL_CAN_11_125K, CBinary("\x07\x26\x08\x03\x19\x02\x0C\x00\x00\x00\x00", 11), 0x072E);

        //step09 清故障码
        iRet = ClearSysDTC_538(PTL_CAN_11_500K, PTL_CAN_11_125K);
        if (iRet > -1)
        {
            iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x26\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x072E);
            sendframe.SetSendFrame(CBinary("\x19\x02\x0C", 3));
            rfRet = SendDataComm(sendframe);
            FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B0C7"));// 控制模块程序成功完成
        }

        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x90008087"));//关闭点火开关（位置 0）.

        return iRet;
    }


}





// 自动远光灯摄像头校准
W_ErrorCode CSeviceFunctionNew::Auto_lamp_NEW_lansheng_L494_2016()
{
    W_ErrorCode iRet = 0;
    W_I16 iKey = 0;
    CSendFrame sendframe;
    CReceiveFrame rfRet;
    W_U32 uMsStart;
    W_U32 uMsStop = 0;
    //step1
    string strOpenfileConfigMenu = m_stropenfileConfigMenu;
    CJLRStringOperate strOpt;
    strOpt.Replace(strOpenfileConfigMenu, ".ctv", "");

    // 请注意：在下列应用程序运行期间，若要成功校准自动远光灯摄像头，需要进行 3 - 5 分钟的驱动循环.
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BEBE"), g_GetTxtStringFormHtml("0x90026FE6") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BBAB"), DF_MB_OKCANCEL, DT_LEFT);
    if (iKey == DF_IDCANCEL)
        return iRet;

    iRet = CheckEngineStop(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xF4\x0C\x00\x00\x00\x00", 11), 0x07E8, CBinary("\x01\x00", 2));
    if (iRet != 0)
        return 0;

    // 点火打开
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"));

    //step7
    PleaseWait_xS_haveTTL(5000, g_GetTxtStringFormHtml("0x00000066"), g_GetTxtStringFormHtml("0x0000B8FE"));

    // 以下屏幕将为您提供一个说明列表，该列表对于校准常规程序在驱动循环期间的运行至关重要.因此，请您务必在继续执行此应用程序之前阅读并理解此说明列表.
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BEBE"), g_GetTxtStringFormHtml("0x900080A6") + "\n" + "\n" +
        g_GetTxtStringFormHtml("0x0000BEB4") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BEBC")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OK, DT_LEFT);

    // 要开始校准常规程序，车速必须超过 60 公里/小时（40 英里/小时）.
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BEBE"), g_GetTxtStringFormHtml("0x9002CF12") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BEB6")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BEB7") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BEB8")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BEB9") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BEBA")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BEBB") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OK, DT_LEFT);

    // 照相机校准
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BEBE"), g_GetTxtStringFormHtml("0x9001FE2C") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BE61")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OK, DT_LEFT);
    PleaseWait_xS_haveTTL(5000, g_GetTxtStringFormHtml("0x0000BE38"), g_GetTxtStringFormHtml("0x0000BE38"));


    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x06\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x070E);
    SendDataComm(CBinary("\x22\xf1\x03", 3));
    sendframe.SetSendFrame(CBinary("\x10\x03", 2));
    rfRet = SendDataComm(sendframe);

    sendframe.SetSendFrame(CBinary("\x31\x01\x80\x0C", 4));  // 07 06 08 04 31 01 80 0C 00 00 00
    rfRet = SendDataComm(sendframe);
    m_binRecive = rfRet.GetFirst();
    if (AcquireDataByIndex(m_binRecive, 0, 4) != 0x7101800C)
    {
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B21F"));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml(TXT_HTML_STATE_VALUE_IGNITION_OFF));
        return CErrorCode::EC_DATA;
    }
    uMsStart = GetTickCount();
    while (1)
    {
        if (GetTickCount() - uMsStart > 599999)
        {
            sendframe.SetSendFrame(CBinary("\x31\x02\x80\x0C", 4));
            rfRet = SendDataComm(sendframe);
            m_binRecive = rfRet.GetFirst();
            if (AcquireDataByIndex(m_binRecive, 0, 4) != 0x7102800C)
            {
                sendframe.SetSendFrame(CBinary("\x10\x01", 2));
                rfRet = SendDataComm(sendframe);
                FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B21F"));
                FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml(TXT_HTML_STATE_VALUE_IGNITION_OFF));
                return CErrorCode::EC_DATA;
            }
            sendframe.SetSendFrame(CBinary("\x10\x01", 2));
            rfRet = SendDataComm(sendframe);
            FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B918"));
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml(TXT_HTML_STATE_VALUE_IGNITION_OFF));
            return CErrorCode::EC_DATA;
        }
        if (GetTickCount() - uMsStart > 2999)
        {
            sendframe.SetSendFrame(CBinary("\x31\x03\x80\x0C", 4));  // 07 06 08 04 31 03 80 0C 00 00 00
            rfRet = SendDataComm(sendframe);
            m_binRecive = rfRet.GetFirst();
            if (AcquireDataByIndex(m_binRecive, 0, 4) != 0x7103800C || (m_binRecive.GetByteCount() > 4 && (m_binRecive[4] & 0xF) == 1))
            {
                sendframe.SetSendFrame(CBinary("\x10\x01", 2));
                rfRet = SendDataComm(sendframe);
                FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B21F"));
                FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml(TXT_HTML_STATE_VALUE_IGNITION_OFF));
                return CErrorCode::EC_DATA;
            }
            if (m_binRecive.GetByteCount() <= 4 || (m_binRecive[4] & 0xF) != 2)
            {
                sendframe.SetSendFrame(CBinary("\x10\x01", 2));
                rfRet = SendDataComm(sendframe);
                break;
            }
        }

        W_U32 uMsStop = GetTickCount();
        W_U32 uPassMs = uMsStop - uMsStart;
        //         if(uPassMs>599999)
        //         {
        //             break;
        //         }
        FxProgressBar(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B09D"), uPassMs * 100 / 599999);
    }

    // 完成校准
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BEBE"), g_GetTxtStringFormHtml("0x9001FE2C") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9000128B")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OK, DT_LEFT);

    //step12
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml(TXT_HTML_STATE_VALUE_IGNITION_OFF));

    iRet = ClearAllFaultCodes1(PTL_CAN_11_500K, CBinary("\x07\x06\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 13), 0x070E, g_GetTxtStringFormHtml("0x00F00105"), 0x07E8);
    return iRet;

}




// 代客泊车模式重置
W_ErrorCode CSeviceFunctionNew::Valet_reset_NEW_lansheng_L494_2016()
{
    W_ErrorCode iRet = 0;
    W_I16 iKey = 0;

    CSendFrame sendframe;
    CReceiveFrame rfRet;
    CBinary binAns;
    CBinary binRecive;

    //step01 点火打开、发动机、电压、点火关闭
    iRet = CheckEngineStop(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xF4\x0C\x00\x00\x00\x00", 11), 0x07E8, CBinary("\x01\x00", 2));
    if (iRet)
    {
        return iRet;
    }

    //step02 点火打开
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"));

    //Step03 代客泊车模式重置
    iRet = FxShowMessageBox(g_GetTxtStringFormHtml("0x90023312"), g_GetTxtStringFormHtml("0x90023313") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OKCANCEL, DT_LEFT);
    if (DF_IDCANCEL == iRet)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000BE88"));
        return iRet;
    }
    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通信中
    Sleep(800);

    EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x26\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x072E);
    SendDataComm(CBinary("\x22\xF1\x03", 3));
    sendframe.SetSendFrame(CBinary("\x10\x03", 2));
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    if (checkIs7f(binRecive))
    {
        SendDataComm(CBinary("\x10\x01", 2));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"), DF_MB_ANYKEYRETURN, DT_LEFT);    //ECU不支持
        return CErrorCode::EC_ECU_REFUSE;
    }

    //安全访问
    iRet = SafeLogin_Standard3(CBinary("\x27\x03", 2), 0xE8E241, CBinary("\x3E\x80", 2));
    if (iRet == CErrorCode::EC_ECU_REFUSE)
    {
        FxShowMessageBox(FxGetStdString(STD_TTL_MSG_INFORMATION), g_GetTxtStringFormHtml("0x0000B09F"), DF_MB_BACK);
        return CErrorCode::EC_ECU_REFUSE;
    }
    else if (iRet < 0)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }
    m_pNetLayer->KeepLink(0);//断开链路保持

    binAns = SendDataComm(CBinary("\x31\x01\x04\x0E\x0E", 5));  // 07 26 08 05 31 01 04 0E 0E 00 00
    if (!binAns.GetByteCount())
    {
        SendDataComm(CBinary("\x10\x01", 2));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), FxGetStdString(CBinary("\xFF\x07\x00\x00\x00\x3A", 6)));    //通讯失败
        return 0;
    }
    if (binAns.GetByteCount() < 4 || (binAns[0] != 0x71 || binAns[1] != 0x01 || binAns[2] != 0x04 || binAns[3] != 0x0E))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B8E8"), g_GetTxtStringFormHtml("0x0000B21F"));//失败
        SendDataComm(CBinary("\x10\x01", 2));
        return 0;
    }
    m_pNetLayer->KeepLink(3000, CSendFrame(CBinary("\x3E\x80", 2)));    // 打开链路保持
    PleaseWait_xS_haveTTL(8000, g_GetTxtStringFormHtml("0x0000B09D"), g_GetTxtStringFormHtml("0x0000B8E8"));//代客泊车模式重置-请等待
    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通信中
    Sleep(800);
    SendDataComm(CBinary("\x10\x01", 2));
    m_pNetLayer->KeepLink(0); // 断开链路保持

    //Step04 代客泊车模式重置-完成
    FxShowMessageBox(g_GetTxtStringFormHtml("0x90023312"), g_GetTxtStringFormHtml("0x9000128B") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4")
        , DF_MB_OK, DT_LEFT);

    //Step05 故障码
    iRet = ClearSysDTC_Programme_538(PTL_CAN_11_500K, CBinary("\x07\x26\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x072E);

    return iRet;

}



// 点火循环计数器重置
W_ErrorCode CSeviceFunctionNew::Fire_reset_NEW_lansheng_L494_2016()
{
    W_ErrorCode iRet = 0;
    W_I16 iKey = 0;

    CSendFrame sendframe;
    CReceiveFrame rfRet;
    CBinary binAns, binCmd;
    CBinary binRecive;

    //step01 点火打开、发动机、电压、点火关闭
    iRet = CheckEngineStop(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xF4\x0C\x00\x00\x00\x00", 11), 0x07E8, CBinary("\x01\x00", 2));
    if (iRet != 0)
        return CErrorCode::EC_DATA;

    //step02 以下例行程序将重置中央接线盒点火循环计数器    
    iRet = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BCAD"), g_GetTxtStringFormHtml("0x0000C05F") + "\n" + "\n" + g_GetTxtStringFormHtml("0x90022F8D"), DF_MB_OKCANCEL, DT_LEFT);
    if (iRet == DF_IDCANCEL)
        return 0;

    //step03 点火打开
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"));

    //step04 按下确定继续
    iRet = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BCAD"), g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OKCANCEL, DT_LEFT);
    if (iRet == DF_IDCANCEL)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000BE88"));
        return iRet;
    }
    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通信中
    Sleep(800);

    EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x26\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x072E);
    SendDataComm(CBinary("\x22\xF1\x03", 3));
    sendframe.SetSendFrame(CBinary("\x10\x03", 2));
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    if (checkIs7f(binRecive))
    {
        SendDataComm(CBinary("\x10\x01", 2));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"), DF_MB_ANYKEYRETURN, DT_LEFT);    //ECU不支持
        return CErrorCode::EC_ECU_REFUSE;
    }

    binAns = SendDataComm(CBinary("\x31\x01\x20\x5E", 4));  // 07 26 08 04 31 01 20 5E 00 00 00
    if (!binAns.GetByteCount())
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), FxGetStdString(CBinary("\xFF\x07\x00\x00\x00\x3A", 6)));    //通讯失败
        return 0;
    }
    else if (binAns.GetByteCount() < 4 || binAns[0] != 0x71 || binAns[1] != 0x01 || binAns[2] != 0x20 || binAns[3] != 0x5E)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BCAD"), g_GetTxtStringFormHtml("0x0000B21F"));//失败
        return 0;
    }
    m_pNetLayer->KeepLink(3000, CSendFrame(CBinary("\x3E\x80", 2)));    // 打开链路保持
    PleaseWait_xS_haveTTL(8000, g_GetTxtStringFormHtml("0x0000B09D"), g_GetTxtStringFormHtml("0x0000C045"));//学习车辆标识号-请等待
    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通信中
    Sleep(800);
    SendDataComm(CBinary("\x10\x01", 2));
    m_pNetLayer->KeepLink(0); // 断开链路保持

    //Step05 点火循环计数器重置-完成
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BCAD"), g_GetTxtStringFormHtml("0x9000128B") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330")
        , DF_MB_OKCANCEL, DT_LEFT);

    //Step06 模块初始化
    PleaseWait_xS_haveTTL(5000, g_GetTxtStringFormHtml("0x00000066"), g_GetTxtStringFormHtml("0x0000B8FE"));

    //step07 点火关闭
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));

    //Step08 故障码
    iRet = ClearSysDTC_Programme_538(PTL_CAN_11_500K, CBinary("\x07\x26\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x072E);

    return iRet;

}



// 执行器端点止动器检测
W_ErrorCode CSeviceFunctionNew::Actuator_test_NEW_lansheng_L494_2016()
{
    W_ErrorCode iRet = CErrorCode::EC_SUCCESS;
    CSendFrame sendframe;
    CReceiveFrame rfRet;
    W_I16 iKey = 0;

    //此程序将驱动基于本地互联网络的所有执行器从端部止动位置运动到端部止动位置，以检测气候遥控单元的工作范围
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B94A"), g_GetTxtStringFormHtml("0x0000B94B") + "\n" + "\n" + g_GetTxtStringFormHtml("0x90022F8D"), DF_MB_ANYKEYRETURN, DT_LEFT);

    // 判断电压
    iRet = CheckEngineStop(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xF4\x0C\x00\x00\x00\x00", 11), 0x07E8, CBinary("\x01\x00", 2));
    if (iRet)
        return iRet;

    //将点火开关打开
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"), DF_MB_ANYKEYRETURN, DT_LEFT);

    // 模块初始化
    PleaseWait_xS_haveTTL(5000, g_GetTxtStringFormHtml("0x00000066"), g_GetTxtStringFormHtml("0x0000B8FE"));


    //此程序将驱动基于本地互联网络的所有执行器从端部止动位置运动到端部止动位置，以检测气候遥控单元的工作范围
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B94A"), g_GetTxtStringFormHtml("0x0000B949") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000B94B")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000005F"), DF_MB_OKCANCEL, DT_LEFT);
    if (DF_IDCANCEL == iKey)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_ANYKEYRETURN, DT_LEFT);//关闭点火开关
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B8D1"), DF_MB_ANYKEYRETURN, DT_LEFT);//操作人员已中止了此应用程序
        return iRet;
    }

    // 风门电机端点止动器检测
    PleaseWait_xS_haveTTL(5000, g_GetTxtStringFormHtml("0x0000B949"), g_GetTxtStringFormHtml("0x0000B94A"));


    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_TXT_MSG_PLEASE_WAIT, DF_MB_NOBUTTON);

    //链路：11位can125k
    EnterSystem(PTL_CAN_11_125K, CBinary("\x07\x33\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x073B);
    SendDataComm(CBinary("\x22\xf1\x03", 3));
    iRet = EnterSystem(PTL_CAN_11_125K, CBinary("\x07\x33\x08\x02\x10\x03\x00\x00\x00\x00\x00", 11), 0x073B);
    if (iRet)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    rfRet = m_rfRet;
    CBinary binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount() < 5)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    m_binRecive = CBinary(binRecive.GetBuffer() + 4, binRecive.GetByteCount() - 4);
    if (checkIs7f(m_binRecive))
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }


    //安全访问
    iRet = SafeLogin_Standard3(CBinary("\x27\x03", 2), 0x60C5B5);
    if (iRet == CErrorCode::EC_ECU_REFUSE)
    {
        FxShowMessageBox(FxGetStdString(STD_TTL_MSG_INFORMATION), g_GetTxtStringFormHtml("0x0000B09F"), DF_MB_BACK);
        return CErrorCode::EC_ECU_REFUSE;
    }
    else if (iRet < 0)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }
    m_pNetLayer->KeepLink(0);//链路断开

    sendframe.SetSendFrame(CBinary("\x31\x01\x90\x0C\xFF\xFF", 6));  // 07 33 08 06 31 01 90 0C FF FF 00
    rfRet = SendDataComm(sendframe);
    if (0 == rfRet.GetByteCount())
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    m_binRecive = rfRet.GetFirst();
    if (m_binRecive.GetByteCount() < 6 || m_binRecive[0] != 0x71 || m_binRecive[1] != 0x01 || m_binRecive[2] != 0x90 || m_binRecive[3] != 0x0C)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B21F"), DF_MB_ANYKEYRETURN, DT_LEFT);//失败
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_ANYKEYRETURN, DT_LEFT);//关闭点火开关
        return iRet;
    }

    sendframe.SetSendFrame(CBinary("\x31\x03\x90\x0C", 4));  // 07 33 08 04 31 03 90 0C 00 00 00
    rfRet = SendDataComm(sendframe);
    if (0 == rfRet.GetByteCount())
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    m_binRecive = rfRet.GetFirst();
    if (m_binRecive.GetByteCount() < 4 || m_binRecive[0] != 0x71 || m_binRecive[1] != 0x03 || m_binRecive[2] != 0x90 || m_binRecive[3] != 0x0C)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B21F"), DF_MB_ANYKEYRETURN, DT_LEFT);//失败
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_ANYKEYRETURN, DT_LEFT);//关闭点火开关
        return iRet;
    }

    SendDataComm(CBinary("\x10\x01", 2));




    // 检测完成
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B94A"), g_GetTxtStringFormHtml("0x0000B949") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9000128B")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000005F"), DF_MB_OK, DT_LEFT);

    //关闭点火开关
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));


    iRet = CheckSysDTCNub_model1(PTL_CAN_11_125K, PTL_CAN_11_500K, CBinary("\x07\x33\x08\x03\x19\x02\x0C\x00\x00\x00\x00", 11), CBinary("\x07\xA5\x08\x04\x14\xFF\xFF\xFF\x00\x00\x00", 11), 0x073B);

    return iRet;

}



// 蒸发器和加热器测试
W_ErrorCode CSeviceFunctionNew::Evaporator_heater_test_NEW_lansheng_L494_2016()
{
    W_ErrorCode iRet = CErrorCode::EC_SUCCESS;
    CSendFrame sendframe;
    CReceiveFrame rfRet;
    W_I16 iKey = 0;
    W_U32 uStandValue2 = 0x21ABF8;
    W_I32 P_table2[3][8] = { {0xE8D1AA,0xB67D4D,0x0E1793,0x7AE02E,0x930F45,0x44F293,0xEE2A2F,0xBEB957},
    {0x1E9EB6,0x5FC074,0xD94EE1,0xD170DB,0xC43FAE,0xEB9355,0xB1F8A3,0x011C5E},
    {0x60C5B5,0xA64463,0x2B56CE,0x306384,0x060800,0x6EEC19,0xBE253A,0x1B956C} };


    //此程序将测试气候遥控系统蒸发器和加热器.  如果制冷剂回路受到干扰则需要进行此操作
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x900024FD")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x90022F8D"), DF_MB_OKCANCEL, DT_LEFT);
    if (DF_IDCANCEL == iKey)
        return iRet;

    // 判断电压 500K
    iRet = CheckEngineStop(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xF4\x0C\x00\x00\x00\x00", 11), 0x07E8, CBinary("\x01\x00", 2));


    // 确保打开了点火开关
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000062"), DF_MB_ANYKEYRETURN, DT_LEFT);

    // 模块初始化
    PleaseWait_xS_haveTTL(5000, g_GetTxtStringFormHtml("0x00000066"), g_GetTxtStringFormHtml("0x0000B8FE"));

    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B916"), g_GetTxtStringFormHtml("0x0000B09D"), DF_MB_NOBUTTON);

    //链路：11位can125k

    EnterSystem(PTL_CAN_11_125K, CBinary("\x07\x33\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x073B);
    SendDataComm(CBinary("\x22\xf1\x03", 3));
    iRet = EnterSystem(PTL_CAN_11_125K, CBinary("\x07\x33\x08\x04\x14\xFF\xFF\xFF\x00\x00\x00", 11), 0x073B);

    if (iRet)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B916"), g_GetTxtStringFormHtml("0x0000B21F"), DF_MB_ANYKEYRETURN, DT_LEFT);//失败
        return iRet;
    }

    rfRet = m_rfRet;
    CBinary binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount() < 5)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B916"), g_GetTxtStringFormHtml("0x0000B21F"), DF_MB_ANYKEYRETURN, DT_LEFT);//失败
        return iRet;
    }

    m_binRecive = CBinary(binRecive.GetBuffer() + 4, binRecive.GetByteCount() - 4);
    if (checkIs7f(m_binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B916"), g_GetTxtStringFormHtml("0x0000B21F"), DF_MB_ANYKEYRETURN, DT_LEFT);//失败
        return iRet;
    }


    //step10
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B916"), g_GetTxtStringFormHtml("0x0000B0A3"), DF_MB_ANYKEYRETURN, DT_LEFT);//完成
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000065"), DF_MB_ANYKEYRETURN, DT_LEFT);//确定关闭了点火开关
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B93D"), g_GetTxtStringFormHtml("0x00000096"), DF_MB_ANYKEYRETURN, DT_LEFT);//确保发动机在运转
    PleaseWait_xS_haveTTL(5000, g_GetTxtStringFormHtml("0x0000B8FE"), g_GetTxtStringFormHtml("0x0000B8FE"));


    //此程序将测试气候遥控系统蒸发器和加热器.  如果制冷剂回路受到干扰则需要进行此操作
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BFA9"), g_GetTxtStringFormHtml("0x0000BFA7") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OKCANCEL, DT_LEFT);
    if (DF_IDCANCEL == iKey)
        return iRet;



    //链路：11位can125k
    EnterSystem(PTL_CAN_11_125K, CBinary("\x07\x33\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x073B);
    SendDataComm(CBinary("\x22\xf1\x03", 3));
    iRet = EnterSystem(PTL_CAN_11_125K, CBinary("\x07\x33\x08\x02\x10\x03\x00\x00\x00\x00\x00", 11), 0x073B);


    if (iRet < 0)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_ANYKEYRETURN, DT_LEFT);//关闭点火开关
        //程序未能完成    必须调查该问题
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000069"), g_GetTxtStringFormHtml("0x0000006A,0x0000B105"), DF_MB_ANYKEYRETURN, DT_LEFT);
        return iRet;
    }

    rfRet = m_rfRet;
    binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount() < 5)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_ANYKEYRETURN, DT_LEFT);//关闭点火开关
        //程序未能完成    必须调查该问题
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000069"), g_GetTxtStringFormHtml("0x0000006A,0x0000B105"), DF_MB_ANYKEYRETURN, DT_LEFT);
        return iRet;
    }

    m_binRecive = CBinary(binRecive.GetBuffer() + 4, binRecive.GetByteCount() - 4);
    if (checkIs7f(m_binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B9E8"), DF_MB_ANYKEYRETURN, DT_LEFT);//不支持
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_ANYKEYRETURN, DT_LEFT);//关闭点火开关
        //程序未能完成    必须调查该问题
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000069"), g_GetTxtStringFormHtml("0x0000006A,0x0000B105"), DF_MB_ANYKEYRETURN, DT_LEFT);
        return iRet;
    }


    //安全访问
    iRet = SafeLogin_L405_2014_Oil(CBinary("\x27\x03", 2), uStandValue2, P_table2);

    if (CErrorCode::EC_ECU_REFUSE == iRet || iRet < 0)
    {
        if (iRet != CErrorCode::EC_ECU_REFUSE)
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        else
            FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B09F"), DF_MB_ANYKEYRETURN, DT_LEFT);//安全访问失败

        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_ANYKEYRETURN, DT_LEFT);//关闭点火开关
        //程序未能完成    必须调查该问题
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000069"), g_GetTxtStringFormHtml("0x0000006A,0x0000B105"), DF_MB_ANYKEYRETURN, DT_LEFT);
        return iRet;
    }
    //链路保持
    m_pNetLayer->KeepLink(1000, CSendFrame(CBinary("\x3E\x00", 2)));

    sendframe.SetSendFrame(CBinary("\x31\x01\x90\x0B\x01", 5));  // 07 33 08 05 31 01 90 0B 01 00 00
    rfRet = SendDataComm(sendframe);
    m_binRecive = rfRet.GetFirst();
    if (0 == m_binRecive.GetByteCount()
        || checkIs7f(m_binRecive)
        || m_binRecive.GetByteCount() < 4
        || (m_binRecive.GetByteCount() > 4 && 2 == m_binRecive[4]))
    {
        if (0 == m_binRecive.GetByteCount())
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        else if (checkIs7f(m_binRecive))
            FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B9E8"), DF_MB_ANYKEYRETURN, DT_LEFT);//不支持

        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BFA9"), g_GetTxtStringFormHtml("0x0000B21F"), DF_MB_ANYKEYRETURN, DT_LEFT);//失败

        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_ANYKEYRETURN, DT_LEFT);//关闭点火开关
        //程序未能完成    必须调查该问题
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000069"), g_GetTxtStringFormHtml("0x0000006A,0x0000B105"), DF_MB_ANYKEYRETURN, DT_LEFT);
        return iRet;
    }


    sendframe.SetSendFrame(CBinary("\x31\x03\x90\x0B", 4));  //07 33 08 04 31 03 90 0B 00 00 00
    rfRet = SendDataComm(sendframe);
    if (0 == rfRet.GetByteCount())
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_ANYKEYRETURN, DT_LEFT);//关闭点火开关
        return iRet;
    }

    m_binRecive = rfRet.GetFirst();
    if (checkIs7f(m_binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B9E8"), DF_MB_ANYKEYRETURN, DT_LEFT);//不支持
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_ANYKEYRETURN, DT_LEFT);//关闭点火开关
        return iRet;
    }

    if (m_binRecive.GetByteCount() < 4)
    {
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BFA9"), g_GetTxtStringFormHtml("0x0000B21F"), DF_MB_ANYKEYRETURN, DT_LEFT);//失败
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_ANYKEYRETURN, DT_LEFT);//关闭点火开关

        //程序未能完成    必须调查该问题
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000069"), g_GetTxtStringFormHtml("0x0000006A,0x0000B105"), DF_MB_ANYKEYRETURN, DT_LEFT);
        return iRet;
    }


    //step15
    sendframe.SetSendFrame(CBinary("\x10\x01", 2));
    rfRet = SendDataComm(sendframe);
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BFA9"), g_GetTxtStringFormHtml("0x0000BFA9") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OK, DT_LEFT);//完成


    m_pNetLayer->KeepLink(0);//链路断开
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_ANYKEYRETURN, DT_LEFT);//关闭点火开关

    //step16~
    iRet = CheckSysDTCNub_model1(PTL_CAN_11_125K, PTL_CAN_11_500K, CBinary("\x07\x33\x08\x03\x19\x02\x0C\x00\x00\x00\x00", 11), CBinary("\x07\xA5\x08\x04\x14\xFF\xFF\xFF\x00\x00\x00", 11), 0x073B);

    // 记录了故障诊断代码
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000069"), g_GetTxtStringFormHtml("0x0000B12F") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000B130"), DF_MB_OK, DT_LEFT);
    return iRet;

}


// 复位压缩机保护计数器
W_ErrorCode CSeviceFunctionNew::Reset_compressor_protect_NEW_lansheng_L494_2016()
{
    W_ErrorCode iRet = CErrorCode::EC_SUCCESS;
    W_I16 iKey = 0;

    CSendFrame sendframe;
    CReceiveFrame rfRet;
    CBinary binRecive;

    // 此程序将重置气候控制压缩机保护计数器。  如果制冷剂回路受到干       扰则需要进行此操作。
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x90022313"), g_GetTxtStringFormHtml("0x9000250E") + "\n" + "\n" + g_GetTxtStringFormHtml("0x90022F8D "), DF_MB_OKCANCEL, DT_LEFT);
    if (DF_IDCANCEL == iKey)
        return iRet;

    // 点火打开、发动机、电压、点火关闭
    iRet = CheckEngineStop(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xF4\x0C\x00\x00\x00\x00", 11), 0x07E8, CBinary("\x01\x00", 2));
    if (iRet)
    {
        return iRet;
    }

    // 确保发动机在运转
    FxShowMessageBox(g_GetTxtStringFormHtml("0x9000CD25"), g_GetTxtStringFormHtml("0x9001251C"));

    // 模块初始化
    PleaseWait_xS_haveTTL(5000, g_GetTxtStringFormHtml("0x900126DD"), g_GetTxtStringFormHtml("0x0000BFA6"));//请等待

    // 此程序将重置气候控制压缩机保护计数器
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x90022313"), g_GetTxtStringFormHtml("0x9000250E") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OKCANCEL, DT_LEFT);
    if (DF_IDCANCEL == iKey)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B8D1"));//操作人员已中止了此应用程序
        return iRet;
    }

    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通讯中
    Sleep(800);

    EnterSystem(PTL_CAN_11_125K, CBinary("\x07\x33\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x073B);
    SendDataComm(CBinary("\x22\xF1\x03", 3));
    sendframe.SetSendFrame(CBinary("\x10\x03", 2));
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount() < 2)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }
    if (checkIs7f(binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return CErrorCode::EC_ECU_REFUSE;
    }

    iRet = SafeLogin_Standard3(CBinary("\x27\x03", 2), 0x60C5B5);
    if (iRet == CErrorCode::EC_ECU_REFUSE)//否定应答
    {
        FxShowMessageBox(FxGetStdString(STD_TTL_MSG_INFORMATION), g_GetTxtStringFormHtml("0x0000B09F"), DF_MB_BACK);//安全访问失败
        return CErrorCode::EC_ECU_REFUSE;
    }
    else if (iRet < 0)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    sendframe.SetSendFrame(CBinary("\x31\x01\x90\x0F", 4));  // 07 33 08 04 31 01 90 0F 00 00 00
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    if (0 == rfRet.GetByteCount())
    {
        SendDataComm(CBinary("\x10\x01", 2));
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }
    if (checkIs7f(binRecive))
    {
        SendDataComm(CBinary("\x10\x01", 2));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return CErrorCode::EC_ECU_REFUSE;
    }
    if (binRecive.GetByteCount() < 4 || binRecive[0] != 0x71 || binRecive[1] != 0x01 || binRecive[2] != 0x90 || binRecive[3] != 0x0F)
    {
        SendDataComm(CBinary("\x10\x01", 2));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B8FF"), g_GetTxtStringFormHtml("0x0000B21F"));//失败
        return CErrorCode::EC_DATA;
    }
    m_pNetLayer->KeepLink(3000, CSendFrame(CBinary("\x3E\x80", 2)));
    PleaseWait_xS_haveTTL(5000, g_GetTxtStringFormHtml("0x0000B09D"), g_GetTxtStringFormHtml("0x0000BFA6"));//复位压缩机保护计数器-请等待
    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通信中
    Sleep(800);
    SendDataComm(CBinary("\x10\x01", 2));
    m_pNetLayer->KeepLink(0);

    // 复位压缩机保护计数器-完成
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BFA6"), g_GetTxtStringFormHtml("0x9000128B") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4")
        , DF_MB_OK, DT_LEFT);

    // 点火关闭
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));

    // 故障码
    iRet = CheckSysDTCNub_model1(PTL_CAN_11_125K, PTL_CAN_11_500K, CBinary("\x07\x33\x08\x03\x19\x02\x0C\x00\x00\x00\x00", 11), CBinary("\x07\xA5\x08\x04\x14\xFF\xFF\xFF\x00\x00\x00", 11), 0x073B);

    return iRet;

}



// 辅助加热器常规准备
W_ErrorCode CSeviceFunctionNew::Auxiliary_heater_NEW_lansheng_L494_2016()
{
    W_ErrorCode iRet = CErrorCode::EC_SUCCESS;
    CSendFrame sendframe;
    CReceiveFrame rfRet;
    W_I16 iKey = 0;


    //此程序将通过在给定时间内从燃油箱向辅助加热器泵入燃油来完成辅助加热器燃油预注
    //警告        确保工作区通风良好
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B950") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000B951")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002D4D7") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002D4D8")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000B952") + "\n" + "\n" + g_GetTxtStringFormHtml("0x90022F8D")
        , DF_MB_OKCANCEL, DT_LEFT);
    if (DF_IDCANCEL == iKey)
        return iRet;


    // 判断电压
    iRet = CheckEngineStop(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xF4\x0C\x00\x00\x00\x00", 11), 0x07E8, CBinary("\x01\x00", 2));
    if (iRet)
        return iRet;

    bool iFlag = false;
    while (1)
    {
        // 将点火开关打开
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"), DF_MB_ANYKEYRETURN, DT_LEFT);

        // 模块初始化
        PleaseWait_xS_haveTTL(5000, g_GetTxtStringFormHtml("0x00000066"), g_GetTxtStringFormHtml("0x0000B8FE"));


        //此程序将通过在给定时间内从燃油箱向辅助加热器泵入燃油来完成辅助加热器燃油预注
        iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B94F"), g_GetTxtStringFormHtml("0x0000B950")
            + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OKCANCEL, DT_LEFT);
        if (DF_IDCANCEL == iKey)
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_ANYKEYRETURN, DT_LEFT);//关闭点火开关
            FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B8D1"), DF_MB_ANYKEYRETURN, DT_LEFT);//应用程序被用户中止
            return iRet;
        }

        // 请等待
        PleaseWait_xS_haveTTL(5000, g_GetTxtStringFormHtml("0x0000B11C"), g_GetTxtStringFormHtml("0x0000B8FE"));

        //step10
        FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);
        //链路：11位can125k

        EnterSystem(PTL_CAN_11_125K, CBinary("\x07\x33\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x073B);
        SendDataComm(CBinary("\x22\xF1\x03", 3));
        iRet = EnterSystem(PTL_CAN_11_125K, CBinary("\x07\x33\x08\x02\x10\x03\x00\x00\x00\x00\x00", 11), 0x073B);


        if (!iRet)
        {
            rfRet = m_rfRet;
            CBinary binRecive = rfRet.GetFirst();
            if (binRecive.GetByteCount() > 4)
            {
                m_binRecive = CBinary(binRecive.GetBuffer() + 4, binRecive.GetByteCount() - 4);
                if (!checkIs7f(m_binRecive))
                {
                    //安全访问        
                    iRet = SafeLogin_Standard3(CBinary("\x27\x03", 2), 0x60C5B5);

                    if (!iRet)
                    {
                        m_pNetLayer->KeepLink(1000, CSendFrame(CBinary("\x3E\x00", 2)));//链路保持

                        sendframe.SetSendFrame(CBinary("\x31\x01\x90\x09\x5A", 5));
                        rfRet = SendDataComm(sendframe);
                        m_binRecive = rfRet.GetFirst();

                        if (m_binRecive.GetByteCount() > 3 && !checkIs7f(m_binRecive))
                        {
                            Sleep(3000);
                            sendframe.SetSendFrame(CBinary("\x31\x03\x90\x09", 4));
                            rfRet = SendDataComm(sendframe);
                            SendDataComm(CBinary("\x10\x01", 2));
                            m_pNetLayer->KeepLink(0);//断开链路

                            m_binRecive = rfRet.GetFirst();
                            if (m_binRecive.GetByteCount() > 3 && !checkIs7f(m_binRecive) && (4 == m_binRecive.GetByteCount() || !m_binRecive[4]))
                                break;
                        }

                    }
                }
            }
        }

        iRet = Auxiliary_Heater_00F00030_L319_2010_Step24_25(iFlag);
        iFlag = true;
        if (iRet)
            return iRet;
    }

    while (1)
    {
        // 完成
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B94F"), g_GetTxtStringFormHtml("0x9000128B") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4")
            , DF_MB_OK, DT_LEFT);

        //关闭点火开关
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_ANYKEYRETURN, DT_LEFT);

        // 确保发动机在运转
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B93D"), g_GetTxtStringFormHtml("0x00000096"), DF_MB_ANYKEYRETURN, DT_LEFT);

        // 模块初始化
        PleaseWait_xS_haveTTL(5000, g_GetTxtStringFormHtml("0x00000066"), g_GetTxtStringFormHtml("0x0000B8FE"));

        // 此程序将执行一项测试，以确保辅助加热器当前具备所需的燃油液位       并具有足够的冷却液流量进入设备.
        iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B94F"), g_GetTxtStringFormHtml("0x9001F724") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BF5E")
            + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OKCANCEL, DT_LEFT);
        if (DF_IDCANCEL == iKey)
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_ANYKEYRETURN, DT_LEFT);//关闭点火开关
            FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B8D1"), DF_MB_ANYKEYRETURN, DT_LEFT);//应用程序被用户中止
            return iRet;
        }

        // 蒸发器加热器测试
        PleaseWait_xS_haveTTL(5000, g_GetTxtStringFormHtml("0x0000BFA9"), g_GetTxtStringFormHtml("0x0000B8FE"));

        //step16
        FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);

        SendDataComm(CBinary("\x22\xf1\x03", 3));
        SendDataComm(CBinary("\x22\xf1\x03", 3));
        sendframe.SetSendFrame(CBinary("\x10\x03", 2));
        rfRet = SendDataComm(sendframe);
        m_binRecive = rfRet.GetFirst();
        if (m_binRecive.GetByteCount() > 0 && !checkIs7f(m_binRecive))
        {
            //安全访问
            iRet = SafeLogin_Standard3(CBinary("\x27\x03", 2), 0x60C5B5);

            if (!iRet)
            {
                sendframe.SetSendFrame(CBinary("\x31\x01\x90\x0A", 4));
                rfRet = SendDataComm(sendframe);
                m_binRecive = rfRet.GetFirst();

                //if (m_binRecive.GetByteCount() > 3 && !checkIs7f(m_binRecive))
                //{
                //    Sleep(3000);
                //    //step18
                //    sendframe.SetSendFrame(CBinary("\x31\x03\x90\x13",4));
                //    rfRet = SendDataComm(sendframe);
                //    m_binRecive = rfRet.GetFirst();
                //    if (m_binRecive.GetByteCount() > 3 && !checkIs7f(m_binRecive)&&(4 == m_binRecive.GetByteCount() || !m_binRecive[4]))
                //        break;
                //}

                if (m_binRecive.GetByteCount() > 3 && m_binRecive[0] == 0x71 && m_binRecive[1] == 0x01 && m_binRecive[2] == 0x90 && m_binRecive[3] == 0x0A)
                {
                    break;
                }


            }
        }

        iRet = Auxiliary_Heater_00F00030_L319_2010_Step24_25(iFlag);
        iFlag = true;
        if (iRet)
            return iRet;
    }

    //step19
    sendframe.SetSendFrame(CBinary("\x10\x01", 2));
    rfRet = SendDataComm(sendframe);
    m_pNetLayer->KeepLink(0);//断开链路

    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B94F"), g_GetTxtStringFormHtml("0x0000B0A1"), DF_MB_ANYKEYRETURN, DT_LEFT);//完成
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_ANYKEYRETURN, DT_LEFT);//关闭点火开关


    // 故障码
    iRet = CheckSysDTCNub_model2(PTL_CAN_11_125K, PTL_CAN_11_500K, CBinary("\x07\x33\x08\x03\x19\x02\x0C\x00\x00\x00\x00", 11), CBinary("\x07\xA5\x08\x04\x14\xFF\xFF\xFF\x00\x00\x00", 11), CBinary("\x07\xDF\x08\x03\x19\x02\x0C\x00\x00\x00\x00", 11), 0x07EB);

    return iRet;

}



// 辅助加热器运行检查
W_ErrorCode CSeviceFunctionNew::Auxiliary_heater_check_NEW_lansheng_L494_2016()
{
    W_ErrorCode iRet = CErrorCode::EC_SUCCESS;
    CSendFrame sendframe;
    CReceiveFrame rfRet;
    W_I16 iKey = 0;
    W_U32 uStandValue1 = 0x21ABF8;
    W_I32 P_table1[3][8] = { {0xE8D1AA,0xB67D4D,0x0E1793,0x7AE02E,0x930F45,0x44F293,0xEE2A2F,0xBEB957},
    {0x1E9EB6,0x5FC074,0xD94EE1,0xD170DB,0xC43FAE,0xEB9355,0xB1F8A3,0x011C5E},
    {0x60C5B5,0xA64463,0x2B56CE,0x306384,0x060800,0x6EEC19,0xBE253A,0x1B956C} };


    string strOpenfileConfigMenu = m_stropenfileConfigMenu;
    CJLRStringOperate strOpt;
    strOpt.Replace(strOpenfileConfigMenu, ".ctv", "");

    //此程序将执行一项测试，以确保辅助加热器当前具备所需的燃油液位并具有足够的冷却液流量进入设备
    //警告！        确保工作区通风良好.

    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000BF5E") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000B951")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000B952") + "\n" + "\n" + g_GetTxtStringFormHtml("0x90022F8D"), DF_MB_OKCANCEL, DT_LEFT);
    if (DF_IDCANCEL == iKey)
        return iRet;


    // 判断电压
    iRet = CheckEngineStop(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xF4\x0C\x00\x00\x00\x00", 11), 0x07E8, CBinary("\x01\x00", 2));


    // 确保发动机在运转
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B93D"), g_GetTxtStringFormHtml("0x00000096"), DF_MB_ANYKEYRETURN, DT_LEFT);//确保发动机在运转

    // 模块初始化
    PleaseWait_xS_haveTTL(5000, g_GetTxtStringFormHtml("0x00000066"), g_GetTxtStringFormHtml("0x0000B8FE"));


    //此程序将执行一项测试，以确保辅助加热器当前具备所需的燃油液位并具有足够的冷却液流量进入设备
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x9001FB20"), g_GetTxtStringFormHtml("0x9001F724") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BF5E")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OKCANCEL, DT_LEFT);
    if (DF_IDOK == iKey)
    {
        //step10
        FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);

        //链路：11位can125k
        EnterSystem(PTL_CAN_11_125K, CBinary("\x07\x33\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x073B);
        SendDataComm(CBinary("\x22\xf1\x03", 3));
        iRet = EnterSystem(PTL_CAN_11_125K, CBinary("\x07\x33\x08\x02\x10\x03\x00\x00\x00\x00\x00", 11), 0x073B);

        if (!iRet)
        {
            rfRet = m_rfRet;
            CBinary binRecive = rfRet.GetFirst();
            if (binRecive.GetByteCount() > 4)
            {
                m_binRecive = CBinary(binRecive.GetBuffer() + 4, binRecive.GetByteCount() - 4);
                if (!checkIs7f(m_binRecive))
                {
                    //安全访问
                    iRet = SafeLogin_L405_2014_Oil(CBinary("\x27\x03", 2), uStandValue1, P_table1);

                    if (CErrorCode::EC_ECU_REFUSE == iRet)
                    {
                        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000B09F"), DF_MB_ANYKEYRETURN, DT_LEFT);//安全访问失败
                        return iRet;
                    }
                    if (iRet < 0)
                    {
                        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_ANYKEYRETURN, DT_LEFT);
                        return CErrorCode::EC_TIME_OVER;
                    }

                    //链路保持
                    if ("module_special_X760_2016" == strOpenfileConfigMenu || "module_special_X260_2016" == strOpenfileConfigMenu)
                        m_pNetLayer->KeepLink(1000, CSendFrame(CBinary("\x3E\x80", 2)));
                    else
                        m_pNetLayer->KeepLink(1000, CSendFrame(CBinary("\x3E\x00", 2)));
                }

                //step12
                sendframe.SetSendFrame(CBinary("\x31\x01\x90\x0A", 4));
                rfRet = SendDataComm(sendframe);
                m_binRecive = rfRet.GetFirst();
                if (m_binRecive.GetByteCount() > 3 && 0x71 == m_binRecive[0] && 1 == m_binRecive[1] && 0x90 == m_binRecive[2] && 0x0A == m_binRecive[3])
                {
                    //step13
                    PleaseWait_xS_haveTTL(5000, g_GetTxtStringFormHtml("0x0000B09D"), g_GetTxtStringFormHtml("0x0000005F"));
                    sendframe.SetSendFrame(CBinary("\x10\x01", 2));
                    rfRet = SendDataComm(sendframe);

                    m_pNetLayer->KeepLink(0);//断开链路

                    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BFA9"), g_GetTxtStringFormHtml("0x0000B0A3"), DF_MB_ANYKEYRETURN, DT_LEFT);//完成
                    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_ANYKEYRETURN, DT_LEFT);//关闭点火开关

                    // 故障码
                    iRet = CheckSysDTCNub_model1(PTL_CAN_11_125K, PTL_CAN_11_500K, CBinary("\x07\x33\x08\x03\x19\x02\x0C\x00\x00\x00\x00", 11), CBinary("\x07\xA5\x08\x04\x14\xFF\xFF\xFF\x00\x00\x00", 11), 0x073B);
                    return iRet;
                }
            }
        }
    }
    sendframe.SetSendFrame(CBinary("\x10\x01", 2));

    rfRet = SendDataComm(sendframe);
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BFA9"), g_GetTxtStringFormHtml("0x0000B21F"), DF_MB_ANYKEYRETURN, DT_LEFT);//失败


// 蒸发器和加热器测试
    PleaseWait_xS_haveTTL(5000, g_GetTxtStringFormHtml("0x9001F724"), g_GetTxtStringFormHtml("0x0000B8FE"));

    // 按下取消:
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_ANYKEYRETURN, DT_LEFT);//关闭点火开关

    // 故障码
    iRet = CheckSysDTCNub_model1(PTL_CAN_11_125K, PTL_CAN_11_500K, CBinary("\x07\x33\x08\x03\x19\x02\x0C\x00\x00\x00\x00", 11), CBinary("\x07\xA5\x08\x04\x14\xFF\xFF\xFF\x00\x00\x00", 11), 0x073B);

    return iRet;

}



// 辅助加热器燃油输送测试
W_ErrorCode CSeviceFunctionNew::Auxiliary_heater_send_NEW_lansheng_L494_2016()
{
    W_ErrorCode iRet = CErrorCode::EC_SUCCESS;
    CSendFrame sendframe;
    CReceiveFrame rfRet;
    W_I16 iKey = 0;
    BYTE ptlMode = PTL_CAN_11_125K;
    CBinary binCmd1 = CBinary("\x07\x33\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11);//进系统指令
    CBinary binCmd2 = CBinary("\x07\x33\x08\x02\x10\x03\x00\x00\x00\x00\x00", 11);//进系统指令


    iRet = CheckEngineStop(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xF4\x0C\x00\x00\x00\x00", 11), 0x07E8, CBinary("\x01\x00", 2));
    if (iRet)
        return iRet;

    //EnterSystem(PTL_CAN_11_125K,CBinary("\x07\xE3\x08\x03\x22\xf1\x03\x00\x00\x00\x00",11),0x07EB);
    //SendDataComm(CBinary("\x22\xf1\x03",3));


    //此测试程序将检查输送到燃油型加热器的燃油量.   这将涉及断开燃油管路以及将燃油收集到合适的容器中.   请认真遵照所有说明操作.
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B958") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000B951")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002D4D5") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002D4D6")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000C0A2") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000B952")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x80001618"), DF_MB_OKCANCEL, DT_LEFT);
    if (DF_IDCANCEL == iKey)
        return iRet;


    // 小心地从燃油型加热器上拆下燃油压力管（见图 1），然后将其末端       放入合适的测量容器（25 毫升以下）.
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B957"), g_GetTxtStringFormHtml("0x900080A6") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000B959")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000C0A3") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000C0A2")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000C0A4") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4")
        , DF_MB_ANYKEYRETURN, DT_LEFT);


    bool iFlag = false;//是否已经执行过
    bool iFlag2 = false;
    W_I32 iCount = 0;//计数
    while (1)
    {
        if (!iFlag)
        {
            //将点火开关打开    
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"), DF_MB_ANYKEYRETURN, DT_LEFT);

            //此程序将强制燃油型加热器的燃油输送泵持续供应燃油达到给定的一段时间.   在此期间请监测燃油输送情况以确保将燃油收集到合适的测量容器内
            iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B957"), g_GetTxtStringFormHtml("0x0000B95A"), DF_MB_OKCANCEL, DT_LEFT);
            if (DF_IDCANCEL == iKey)
                return iRet;
        }

        //step9        step13
        FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);

        //链路：根据车型来

        EnterSystem(PTL_CAN_11_125K, CBinary("\x07\x33\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x073B);
        SendDataComm(CBinary("\x22\xf1\x03", 3));

        rfRet = m_rfRet;
        CBinary binRecive = rfRet.GetFirst();
        if (binRecive.GetByteCount() < 5)
        {
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_TIME_OVER;
        }

        m_binRecive = CBinary(binRecive.GetBuffer() + 4, binRecive.GetByteCount() - 4);
        if (checkIs7f(m_binRecive))
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"), DF_MB_ANYKEYRETURN, DT_LEFT);//ECU不支持
            return iRet;
        }

        iRet = EnterSystem(PTL_CAN_11_125K, CBinary("\x07\x33\x08\x02\x10\x03\x00\x00\x00\x00\x00", 11), 0x073B);
        if (iRet)
        {
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_TIME_OVER;
        }

        //安全访问
        iRet = SafeLogin_Standard3(CBinary("\x27\x03", 2), 0x60C5B5);
        if (CErrorCode::EC_ECU_REFUSE == iRet)
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000B09F"), DF_MB_ANYKEYRETURN, DT_LEFT);//安全访问失败
            return iRet;
        }
        if (iRet < 0)
        {
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_TIME_OVER;
        }

        //if (!iFlag)
        //{
        //    //step10
        //    iFlag = true;
        //    iCount = 60000;
        //    sendframe.SetSendFrame(CBinary("\x31\x01\x20\x26\x3C",5));
        //    rfRet = SendDataComm(sendframe);
        //    m_binRecive = rfRet.GetFirst();
        //}
        //else
        //{
        //    //step14
        //    iFlag = false;
        //    iCount = 90000;
        //    sendframe.SetSendFrame(CBinary("\x31\x01\x20\x26\x5A",5));
        //    rfRet = SendDataComm(sendframe);
        //    m_binRecive = rfRet.GetFirst();
        //}

        sendframe.SetSendFrame(CBinary("\x31\x01\x90\x09\x5A", 5));
        rfRet = SendDataComm(sendframe);
        m_binRecive = rfRet.GetFirst();
        if (m_binRecive.GetByteCount() < 5 || m_binRecive[0] != 0x71 || m_binRecive[1] != 0x01 || m_binRecive[2] != 0x90)
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B957"), g_GetTxtStringFormHtml("0x0000B21F"), DF_MB_ANYKEYRETURN, DT_LEFT);//失败
            FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B90E"), DF_MB_ANYKEYRETURN, DT_LEFT);//一般故障 - 请勿重新操作程序
            return iRet;
        }


        //step11    step15
        PleaseWait_xS_haveTTL(5000, g_GetTxtStringFormHtml("0x0000B09D"), g_GetTxtStringFormHtml("0x0000B957"));
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);

        // 辅助加热器常规准备完成
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B957"), g_GetTxtStringFormHtml("0x0000B94F") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9000128B")
            + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_ANYKEYRETURN, DT_LEFT);//完成

        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_ANYKEYRETURN, DT_LEFT);//关闭点火开关

        if (iFlag)
        {
            //在燃油输送期间，是否可以看到少量燃油从燃油管的末端泄放到测量容器中？  这表示燃油管通风良好且充满燃油.
            iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B95B"), DF_MB_OKCANCEL, DT_LEFT);
            if (DF_IDCANCEL == iKey)
            {
                //燃油输送时流量不均匀、不稳定的，管道不完全通风且未充满燃油的，请重新启动此应用程序，然后遵照提供的所有说明操作
                FxShowMessageBox(g_GetTxtStringFormHtml("0x00000069"), g_GetTxtStringFormHtml("0x0000B95C"), DF_MB_ANYKEYRETURN, DT_LEFT);
                return iRet;
            }

            //step12
            //请丢弃测量容器中的燃油，并彻底清洗.   把压力管放回测量容器内以备在测试程序的下一阶段使用
            //注意  -  确保在测试过程的下一阶段无燃油丢失.
            //完成后，请将测量容器置于水平平面上，并准确记录输送的燃油量
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00000069"), g_GetTxtStringFormHtml("0x0000B95D,0x0000B95E,0x0000B95F"), DF_MB_ANYKEYRETURN, DT_LEFT);

            FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"), DF_MB_ANYKEYRETURN, DT_LEFT);//将点火开关打开
            //此程序将强制燃油型加热器的燃油输送泵持续供应燃油达到给定的一段时间.   在此期间请监测燃油输送情况以确保将燃油收集到合适的测量容器内
            FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B957"), g_GetTxtStringFormHtml("0x0000B95A"), DF_MB_ANYKEYRETURN, DT_LEFT);
        }
        else
        {
            // 汽油，柴油机选择
            CMenuCtrl menu;
            menu.InitCtrl(g_GetTxtStringFormHtml("0x0000B957"));
            menu.AddOneItem(g_GetTxtStringFormHtml("0x0001DA87")); // 汽油
            menu.AddOneItem(g_GetTxtStringFormHtml("0x90001512"));  // 柴油
            iKey = menu.ShowCtrl();
            if (iKey == -1)
            {
                return iRet;
            }
            if (iKey == 0)  // 汽油
            {
                //step16
                CMenuCtrl uiMenu;
                uiMenu.InitCtrl(g_GetTxtStringFormHtml("0x0000B960"));//将测量容器中的燃油量与下面的值进行比较并做出选择.
                uiMenu.AddOneItem(g_GetTxtStringFormHtml("0x0000BC12"));//17.49 ~ 22.14
                uiMenu.AddOneItem(g_GetTxtStringFormHtml("0x0000BC13"));// <17.49
                uiMenu.AddOneItem(g_GetTxtStringFormHtml("0x0000BC14"));// >22.14

                iKey = uiMenu.ShowCtrl();
                if (-1 == iKey)
                    return iRet;
                if (!iFlag2)
                {
                    iFlag2 = true;
                    if (!iKey)
                    {
                        //燃油输送量介于正确的限值之间，燃油输送测试通过，请重新连接燃油管.
                        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000069"), g_GetTxtStringFormHtml("0x0000B961"), DF_MB_ANYKEYRETURN, DT_LEFT);
                        return iRet;
                    }
                    else if (1 == iKey)
                    {
                        //输送的燃油量小于最小限值.下面是可能的原因清单.
                        //压力管受阻／堵塞    
                        //压力管泄漏            
                        //定量配送泵性能问题    
                        //吸油管受阻／堵塞    
                        //燃油箱供油管受阻／堵塞    
                        //燃油粘度问题
                        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000069"), g_GetTxtStringFormHtml("0x0000B965,0x0000B966,0x0000B967")
                            + "\n" + g_GetTxtStringFormHtml("0x0000B968,0x0000B969,0x0000B96A,0x0000B96B"), DF_MB_ANYKEYRETURN, DT_LEFT);
                        //请丢弃收集到的燃油，并清洗测量容器，以备在此应用程序下一阶段使用
                        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000069"), g_GetTxtStringFormHtml("0x0000B96C"), DF_MB_ANYKEYRETURN, DT_LEFT);

                        //从计量泵中拆下燃油压力管.将一端插入合适的测量容器中（小于25毫升）
                        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000069"), g_GetTxtStringFormHtml("0x0000BF7A"), DF_MB_ANYKEYRETURN, DT_LEFT);
                    }
                    else
                    {
                        //燃油输送量大于最大限值，请更换泵，然后从头重新运行此应用程序
                        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000069"), g_GetTxtStringFormHtml("0x0000B964"), DF_MB_ANYKEYRETURN, DT_LEFT);
                        return iRet;
                    }
                }
                else
                {
                    if (!iKey)
                    {
                        //燃油输送量介于正确的限值之间，请检查压力管是否存在堵塞／受阻或泄漏等
                        //请重新连接车辆前部或后部的所有已断开的燃油管
                        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000069"), g_GetTxtStringFormHtml("0x0000B962,0x0000B963"), DF_MB_ANYKEYRETURN, DT_LEFT);
                        return iRet;
                    }
                    else if (1 == iKey)
                    {
                        //输送的燃油量小于最小限值.下面是可能的原因清单.
                        //压力管受阻／堵塞    
                        //压力管泄漏            
                        //定量配送泵性能问题    
                        //吸油管受阻／堵塞    
                        //燃油箱供油管受阻／堵塞    
                        //燃油粘度问题
                        //下面是纠正措施清单    
                        //检查吸油管是否存在堵塞／受阻或漏气    
                        //更换定量配送泵        
                        //重复执行燃油输送程序，确认输送的燃油量介于所需的限值之间    
                        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000069"), g_GetTxtStringFormHtml("0x0000B965,0x0000B966,0x0000B967")
                            + "\n" + g_GetTxtStringFormHtml("0x0000B968,0x0000B969,0x0000B96A,0x0000B96B,0x0000B96E")
                            + "\n" + g_GetTxtStringFormHtml("0x0000B96F,0x0000B970,0x0000B971"), DF_MB_ANYKEYRETURN, DT_LEFT);
                        return iRet;
                    }
                    else
                    {
                        //燃油输送量大于最大限值，请更换泵，然后从头重新运行此应用程序
                        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000069"), g_GetTxtStringFormHtml("0x0000B964"), DF_MB_ANYKEYRETURN, DT_LEFT);
                        return iRet;
                    }
                }
            }
            else if (iKey == 1)
            {
                FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B957"), g_GetTxtStringFormHtml("0x900080A6") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000B961")
                    + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OK, DT_LEFT);
                return 0;
            }
        }
    }

    return iRet;


}





// 轮胎压力监控轮胎压力传感器测试
W_ErrorCode CSeviceFunctionNew::TCM_test_NEW_lansheng_L494_2016()
{
    W_ErrorCode iRet = CErrorCode::EC_SUCCESS;
    CSendFrame sendframe;
    CReceiveFrame rfRet;
    W_I16 iKey = 0;
    char charTemp[50] = "";
    string strFormat;
    string strPormot;
    W_U32 uStandValue = 0xC91E77;
    W_I32 P_table[3][8] = { {0x006425,0x5EC8C2,0xE6A21C,0x9255A1,0x7BBACA,0xAC471C,0x069FA0,0x560CD8},
    {0xF62B39,0xB775FB,0x31FB6E,0x39C554,0x2C8A21,0x0326DA,0x594D2C,0xE9A9D1},
    {0x88703A,0x4EF1EC,0xC3E341,0xD8D60B,0xEEBD8F,0x865996,0x5690B5,0xF320E3} };

    string strOpenFile = m_stropenfileConfigMenu;
    CJLRStringOperate strOpt;
    strOpt.Replace(strOpenFile, ".ctv", "");

    /*
    如果轮胎压力监控系统接收器和启动器出现故障，不要完成轮胎压力传感器诊断测试        //@MCP_TPMS_WHL_SEN_TEST_1
    车辆必须停驻 5 分钟    //@MCP_TPMS_WHL_SEN_TEST_2
    如果不能从轮胎压力传感器处获得任何信号，将车轮旋转 90 度并再次测试，以确保诊断正确        //@MCP_TPMS_WHL_SEN_TEST_3
    */
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B984"), g_GetTxtStringFormHtml("0x0000B984") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000B985")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000B986") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000B987")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BBAB"), DF_MB_OKCANCEL, DT_LEFT);
    if (DF_IDCANCEL == iKey)
    {
        return iRet;
    }

    //在这个过程中, 需要用到一个已经校准过的压力表来校准压力。 是否继续？
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B984"), g_GetTxtStringFormHtml("0x9002C18C"), DF_MB_YESNO, DT_LEFT);
    if (DF_IDNO == iKey)
    {
        return iRet;
    }

    // 空测试表
    CActTestCtrl uiActTest;
    strFormat = g_GetTxtStringFormHtml("0x0000BC15");
    uiActTest.InitCtrl(g_GetTxtStringFormHtml("0x9002D0BE")); // 标题: 注意：如果接收器和初启程序存在故障，请勿进行车轮单元诊断测试。
    uiActTest.SetColumnWid(60, 20, 20); // 2列比例
    uiActTest.m_bLockFirstRow = false;

    //uiActTest.AddOneItem(g_GetTxtStringFormHtml("0x9002D0DF"));    // TPM模块状态:
    //uiActTest.AddOneItem(g_GetTxtStringFormHtml("0x9002D0E0")); // ABS模块状态:
    //uiActTest.AddOneItem(" ");
    //uiActTest.AddOneItem(g_GetTxtStringFormHtml("0x9002D0D2")); // TPM 车轮单元 ID1:XXXXXXXX
    //uiActTest.AddOneItem(g_GetTxtStringFormHtml("0x9002D0D3")); // TPM 车轮单元 ID2:XXXXXXXX


    //uiActTest.AddOneItem(g_GetTxtStringFormHtml("0x9002D0D4")); // TPM 车轮单元 ID3:XXXXXXXX
    //uiActTest.AddOneItem(g_GetTxtStringFormHtml("0x9002D0D5")); // TPM 车轮单元 ID4:XXXXXXXX
    //uiActTest.AddOneItem(g_GetTxtStringFormHtml("0x9002D0D6")); // TPM 车轮单元 ID5:XXXXXXXX



    vector<string> iItemVec;//第一列显示
    vector<string> unitVec;//第3列显示
    vector<string> valueVec;//第2列显示
    for (int i = 0; i < 5; i++)
    {//添加项目
        sprintf(charTemp, strFormat.c_str(), i + 1);
        strPormot = charTemp;
        strPormot += "XXXXXXXX";
        uiActTest.AddOneItem(strPormot, "");
        uiActTest.SetItemValue(i, "PSI");

        iItemVec.push_back(strPormot);
        valueVec.push_back("PSI");
        unitVec.push_back("");
    }

    uiActTest.AddOneItem(g_GetTxtStringFormHtml("0x9002D0DF"));
    uiActTest.AddOneItem(g_GetTxtStringFormHtml("0x9002D0E0"));
    uiActTest.AddOneBtn(g_GetTxtStringFormHtml("0x0000BEE5")); // 启动按钮
    uiActTest.SetItemValue(5, g_GetTxtStringFormHtml("0x0000B989"));
    uiActTest.SetItemValue(6, g_GetTxtStringFormHtml("0x0000B989"));
    iKey = 1000;
    while (1)
    {
        iKey = uiActTest.ShowCtrl();
        if (-1 == iKey)
        {
            return iRet; //按下回退
        }
        if (!iKey)
        {
            break; // 按下启动
        }
    }


    //链路：11位can500k 6# 14#
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B0FA"), DF_MB_NOBUTTON);//测试正在进行
    EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x26\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x072E);
    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x26\x08\x02\x10\x03\x00\x00\x00\x00\x00", 11), 0x072E);

    if (iRet < 0)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    rfRet = m_rfRet;
    CBinary binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount() < 5)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_DATA;
    }

    m_binRecive = CBinary(binRecive.GetBuffer() + 4, binRecive.GetByteCount() - 4);
    if (checkIs7f(m_binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"), DF_MB_ANYKEYRETURN, DT_LEFT);//ECU不支持
        return iRet;
    }

    //安全访问
    Sleep(100);
    iRet = SafeLogin_L405_2014_Oil(CBinary("\x27\x21", 2), uStandValue, P_table);  // 88 70 3A
    if (CErrorCode::EC_ECU_REFUSE == iRet)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000B09F"), DF_MB_ANYKEYRETURN, DT_LEFT);//安全访问失败
        return iRet;
    }

    if (iRet < 0)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    //step6
    m_pNetLayer->KeepLink(1000, CSendFrame(CBinary("\x3E\x00", 2)));//链路保持
    sendframe.SetSendFrame(CBinary("\x31\x01\x20\x38\x01", 5));  // 07 26 08 05 31 01 20 38 01 00 00
    rfRet = SendDataComm(sendframe);
    if (0 == rfRet.GetByteCount())
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }


    m_binRecive = rfRet.GetFirst();
    if (m_binRecive.GetByteCount() < 4 || m_binRecive[0] != 0x71 || m_binRecive[1] != 1 || m_binRecive[2] != 0x20 || m_binRecive[3] != 0x38)
    {
        iKey = 1000;
        uiActTest.SetBtnText(0, g_GetTxtStringFormHtml("0x0000BA5C"));//将第一个按钮改为 退出
        while (1)
        {
            iKey = uiActTest.ShowCtrl();
            if (-1 == iKey)
            {
                return iRet;
            }
            if (!iKey)
            {
                break;
            }
        }
    }
    else
    {
        Sleep(1000);
        m_pNetLayer->KeepLink(0);//断开链路

        //链路：11位can500k 6# 14#

        iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\xE6\x08\x03\x19\x01\x0C\x00\x00\x00\x00", 11), 0x07EE);
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);

        //链路：11位can500k 6# 14#
        Sleep(1000);
        EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x51\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x0759);
        iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x51\x08\x02\x10\x03\x00\x00\x00\x00\x00", 11), 0x0759);

        if (iRet < 0)
        {
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_TIME_OVER;
        }

        rfRet = m_rfRet;
        binRecive = rfRet.GetFirst();
        if (binRecive.GetByteCount() < 5)
        {
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_DATA;
        }

        m_binRecive = CBinary(binRecive.GetBuffer() + 4, binRecive.GetByteCount() - 4);
        if (checkIs7f(m_binRecive))
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"), DF_MB_ANYKEYRETURN, DT_LEFT);//ECU不支持
            return iRet;
        }

        //step8
        sendframe.SetSendFrame(CBinary("\x31\x01\x02\x02", 4));  // 07 51 08 04 31 01 02 02 00 00 00
        rfRet = SendDataComm(sendframe);
        if (0 == rfRet.GetByteCount())
        {
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_TIME_OVER;
        }

        m_binRecive = rfRet.GetFirst();
        if (checkIs7f(m_binRecive))
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"), DF_MB_ANYKEYRETURN, DT_LEFT);//ECU不支持
            return iRet;
        }

        if (m_binRecive.GetByteCount() < 4 || m_binRecive[0] != 0x71 || m_binRecive[1] != 1 || m_binRecive[2] != 2 || m_binRecive[3] != 2)
        {
            sendframe.SetSendFrame(CBinary("\x31\x01\x02\x02\x01", 5));
            rfRet = SendDataComm(sendframe);
            if (0 == rfRet.GetByteCount())
            {
                FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_ANYKEYRETURN, DT_LEFT);
                return iRet;
            }

            m_binRecive = rfRet.GetFirst();
            if (checkIs7f(m_binRecive))
            {
                FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"), DF_MB_ANYKEYRETURN, DT_LEFT);//ECU不支持
                return iRet;
            }
        }
        else
        {
            //step9
            if (strOpenFile == "module_special_L550_2017")    //L550_2017车型 read 433信号
            {
                sendframe.SetSendFrame(CBinary("\x19\x01\x0C", 3));
                rfRet = SendDataComm(sendframe);
            }

            while (1)
            {
                sendframe.SetSendFrame(CBinary("\x31\x03\x02\x02", 4));  // 07 51 08 04 31 03 02 02 00 00 00
                rfRet = SendDataComm(sendframe);
                if (0 == rfRet.GetByteCount())
                {
                    FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
                    return CErrorCode::EC_TIME_OVER;
                }

                m_binRecive = rfRet.GetFirst();
                if (checkIs7f(m_binRecive))
                {
                    FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"), DF_MB_ANYKEYRETURN, DT_LEFT);//ECU不支持
                    return iRet;
                }

                if (m_binRecive.GetByteCount() > 3 && m_binRecive[0] == 0x71 && m_binRecive[1] == 0x03 && m_binRecive[2] == 0x02 && m_binRecive[3] == 0x02)
                {
                    break;
                }
                Sleep(800);
            }
        }

        //
        CBinaryGroup binGroup;
        CBinary binCmd("\x22\x2A\x00", 3);
        for (int i = 0; i < 5; i++) //read ID
        {
            binCmd.SetByteAt(2, i);
            CBinary iTempBinary("\x00\x00\x00\x00\x00", 5);//前4BYTE个保存传感器编号，最后一个BYTE用来判断第一列 打印不支持（0xFF） 还是传感器编号（0x00）
            sendframe.SetSendFrame(binCmd);
            rfRet = SendDataComm(sendframe);
            if (0 == rfRet.GetByteCount())
            {
                FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
                return CErrorCode::EC_TIME_OVER;
            }

            m_binRecive = rfRet.GetFirst();
            if (m_binRecive.GetByteCount() > 2 && m_binRecive[0] == 0x62 && m_binRecive[1] == 0x2A && m_binRecive[2] == i)
            {//保存传感器编号
                iTempBinary.SetByteAt(4, 0x00);
                for (int j = 0; j < 3; j++)
                {//去掉3字节，接下来4字节表示传感器编号
                    m_binRecive.DeleteByte(0);
                }
                W_I16 itemp;
                if (m_binRecive.GetByteCount() > 3)
                    itemp = 4;
                else
                    itemp = m_binRecive.GetByteCount();

                for (int j = itemp; j > 0; j--)
                {//长度不够4字节的，前面补0
                    iTempBinary.SetByteAt(j - 1, m_binRecive[j - 1]);
                }
            }
            else
            {//不支持
                iTempBinary.SetByteAt(4, 0xFF);
            }
            binGroup.Append(iTempBinary);
        }

        strFormat = g_GetTxtStringFormHtml("0x0000BC15");
        vector<string> strVec;
        for (int i = 0; i < 5; i++)
        {
            if (0 == binGroup.GetByteAt(i).GetByteAt(4))
            {
                sprintf(charTemp, strFormat.c_str(), i + 1);
                strPormot = charTemp;
                for (int j = 0; j < 4; j++)
                {
                    sprintf(charTemp, "%02X", binGroup.GetByteAt(i).GetByteAt(j));
                    strPormot += charTemp;
                }
            }
            else
            {
                strPormot = g_GetTxtStringFormHtml("0x0000C0C2");
            }
            strVec.push_back(strPormot);//用来初始化第一列
        }

        W_I16 istore[5] = { -1,-1,-1,-1,-1 };
        W_I16 iUpdata[5] = { 0,0,0,0,0 };
        string resulit[5];
        bool iFlag = false;
        vector<string> unitinit;
        unitinit.push_back(g_GetTxtStringFormHtml("0x0000C0BB"));
        unitinit.push_back(g_GetTxtStringFormHtml("0x0000C0BC"));
        unitinit.push_back(g_GetTxtStringFormHtml("0x0000C0BD"));
        unitinit.push_back(g_GetTxtStringFormHtml("0x0000C0BE"));
        unitinit.push_back(g_GetTxtStringFormHtml("0x0000C0BF"));

        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000000E"), g_GetTxtStringFormHtml("0x0000BFB8,0x9002D0B5,0x9002D0B8,0x9002D0B6,0x9002D0B9,0x9002D0E2,0x9002D0E3,0x9002D0E4,0x9002D0E5,0x9002D0B7,0x9002D0BA,0x9002D0BB,0x9002D0BC"), DF_MB_YES, DT_LEFT);
        while (1)
        {
            for (int i = 5; i < 10; i++)
            {
                //判断是否需更新
                if (!iUpdata[i - 5])
                {
                    binCmd.SetByteAt(2, i);
                    sendframe.SetSendFrame(binCmd);
                    rfRet = SendDataComm(sendframe);
                    if (0 == rfRet.GetByteCount())
                    {
                        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
                        return CErrorCode::EC_TIME_OVER;
                    }

                    m_binRecive = rfRet.GetFirst();
                    if (checkIs7f(m_binRecive))
                    {
                        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"), DF_MB_ANYKEYRETURN, DT_LEFT);//ECU不支持
                        return iRet;
                    }
                    if (m_binRecive.GetByteCount() > 2 && m_binRecive[0] == 0x62 && m_binRecive[1] == 0x2A && m_binRecive[2] == i)
                    {
                        iItemVec[i - 5] = strVec[i - 5];//第一列
                        if (m_binRecive.GetByteCount() > 3)
                        {
                            sprintf(charTemp, "%.2f", m_binRecive[3] * 0.199);
                            if (istore[i - 5] < 0)
                                istore[i - 5] = m_binRecive[3];//保存第二列初值
                            else if (istore[i - 5] - m_binRecive[3] > 40 || istore[i - 5] - m_binRecive[3] < -40)
                            {
                                iUpdata[i - 5] = 1;//达到条件，以后不再更新
                                unitVec[i - 5] = unitinit[i - 5];//第三列
                                resulit[i - 5] = g_GetTxtStringFormHtml("0x0000B989");
                            }
                        }
                        else
                            sprintf(charTemp, "%.2f", 0.00);
                        strPormot = charTemp;
                        valueVec[i - 5] = strPormot;//第二列
                    }
                }
                uiActTest.SetItemName(i - 5, iItemVec[i - 5]);
                uiActTest.SetItemUnit(i - 5, unitVec[i - 5]);
                uiActTest.SetItemValue(i - 5, valueVec[i - 5]);
            }
            iKey = 1000;
            iFlag = false;
            for (int j = 0; j < 5; j++)
            {
                if (!iUpdata[j])
                {//用来确定按钮是 跳过 或 继续
                    iFlag = true;
                }
            }
            if (iFlag)
                uiActTest.SetBtnText(0, g_GetTxtStringFormHtml("0x0000C0B9"));
            else
                break;//按钮为继续，退出循环

            iKey = uiActTest.ShowCtrl();
            if (-1 == iKey)
            {
                return iRet;//按了 回退
            }
            if (!iKey)
            {//按了 跳过
                for (int j = 0; j < 5; j++)
                {
                    if (!iUpdata[j])
                    {
                        iUpdata[j] = 1;
                        unitVec[j] = g_GetTxtStringFormHtml("0x0000C0BA");  // 未传输
                        resulit[j] = g_GetTxtStringFormHtml("0x0000C0C0"); // 未变速
                        break;
                    }
                }
            }

            Sleep(500);
        }
        uiActTest.SetBtnText(0, g_GetTxtStringFormHtml("0x0000BC0D"));
        iKey = 1000;
        while (1)
        {
            iKey = uiActTest.ShowCtrl(); //#
            if (!iKey)
            {
                break;
            }
            if (-1 == iKey)
            {
                return iRet;
            }
            Sleep(500);
        }

        //step12
        sendframe.SetSendFrame(CBinary("\x19\x01\x0C", 3));
        rfRet = SendDataComm(sendframe);
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);

        //链路：11位can500k
        iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x26\x08\x05\x31\x01\x20\x38\x01\x00\x00", 11), 0x072E);
        if (iRet < 0)
        {
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_TIME_OVER;
        }
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);

        /*
        Front Left:     //@FRANT_LEFT    “:”
        iStatu1    TPM WHEEL UNIT ID1(%d): iNum1
        右前:    //@FRANT_RIGHT    “:”
        iStatu2    TPM WHEEL UNIT ID2(%d): iNum1
        Rear Right:    //@REAR_RIGHT    “:”
        iStatu3    TPM WHEEL UNIT ID3(%d): iNum1
        左后:    //@REAR_LEFT    “:”
        iStatu4    TPM WHEEL UNIT ID4(%d): iNum1
        Spare Type:    //@SPARE_TYPE    “:”
        */

        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000C0C1"),
            g_GetTxtStringFormHtml("0x0000C0BB") + ":" + "\n" + resulit[0] + "\t" + iItemVec[0] + "\n"
            + g_GetTxtStringFormHtml("0x0000C0BC") + ":" + "\n" + resulit[1] + "\t" + iItemVec[1] + "\n"
            + g_GetTxtStringFormHtml("0x0000C0BD") + ":" + "\n" + resulit[2] + "\t" + iItemVec[2] + "\n"
            + g_GetTxtStringFormHtml("0x0000C0BE") + ":" + "\n" + resulit[3] + "\t" + iItemVec[3] + "\n"
            + g_GetTxtStringFormHtml("0x0000C0BF") + ":" + "\n" + resulit[4] + "\t" + iItemVec[4], DF_MB_ANYKEYRETURN, DT_LEFT);
    }

    //step13~16
    if (strOpenFile == "module_special_L550_2017")    //L550_2017车型
        iRet = ClearSysDTC_Mode_0722(0x00, CBinary("\x07\x26\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x070B);
    else
        iRet = CheckSysDTCNub_model2(PTL_CAN_11_500K, PTL_CAN_11_125K, CBinary("\x07\x26\x08\x03\x19\x02\x0C\x00\x00\x00\x00", 11), CBinary("\x07\xDF\x08\x04\x14\xFF\xFF\xFF\x00\x00\x00", 11), CBinary("\x07\xDF\x08\x03\x19\x02\x0C\x00\x00\x00\x00", 11), 0x072E);

    return iRet;

}



// 远程通信-操作模式
W_ErrorCode CSeviceFunctionNew::Tele_run_mode_NEW_lansheng_L494_2016()
{
    W_ErrorCode iRet = 0;
    W_I16 iKey = 0;

    CSendFrame sendframe;
    CReceiveFrame rfRet;
    CBinary binAns, binCmd;
    CBinary binRecive;


    // 此应用程序将检查远程控制模块的操作模式.
    iKey = FxShowMessageBox(FxGetStdString(CBinary("\x4A\x90\x00\x01\x59\x6F", 6)), g_GetTxtStringFormHtml("0x0000C0EA") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BBAB")
        , DF_MB_OKCANCEL, DT_LEFT);
    if (iKey == DF_IDCANCEL)
    {
        return iRet;
    }

    iRet = CheckEngineStop(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xF4\x0C\x00\x00\x00\x00", 11), 0x07E8, CBinary("\x01\x00", 2));
    if (iRet != 0)
        return CErrorCode::EC_DATA;

    // 点火打开
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"));

    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通信中
    Sleep(800);
    EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x54\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x075C);
    SendDataComm(CBinary("\x22\xf1\x03", 3));
    sendframe.SetSendFrame(CBinary("\x10\x03", 2));
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    if (checkIs7f(binRecive))
    {
        SendDataComm(CBinary("\x10\x01", 2));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"), DF_MB_ANYKEYRETURN, DT_LEFT);    //ECU不支持
        return CErrorCode::EC_ECU_REFUSE;
    }
    SendDataComm(CBinary("\x10\x01", 2));

    // 点火关闭
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));

    // 故障码
    iRet = ClearSysDTC_Programme_538(PTL_CAN_11_500K, CBinary("\x07\x26\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x072E);

    return iRet;
}



// 保养消息重置
W_ErrorCode CSeviceFunctionNew::Service_reset_NEW_lansheng_L494_2016()
{
    // D
    W_ErrorCode iRet = 0;
    W_I16 iKey = 0;

    CSendFrame sendframe;
    CReceiveFrame rfRet;
    CBinary binRecive;
    CMessageBoxCtrl uiMessage;

    //step01 点火打开、发动机、电压、点火关闭
    iRet = CheckEngineStop(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xF4\x0C\x00\x00\x00\x00", 11), 0x07E8, CBinary("\x01\x00", 2));
    if (iRet)
    {
        return iRet;
    }

    //step02 点火打开
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"));
    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通信中
    Sleep(800);

    // 柴油进

    FxShowMessageBox(g_GetTxtStringFormHtml("0x900019A5"), g_GetTxtStringFormHtml("0x900019A5") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000B0A3"), DF_MB_NOBUTTON);//执行诊断命令-完成
    CMessageBoxCtrl::SetBusyStatus(true); //漏斗打开
    Sleep(1000);
    CMessageBoxCtrl::SetBusyStatus(false);//漏斗关闭
    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通讯中
    Sleep(500);

    FxShowMessageBox(g_GetTxtStringFormHtml("0x9002D467"), g_GetTxtStringFormHtml("0x9002D467") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000B0A3"), DF_MB_NOBUTTON);//读取距离下次保养的里程-完成
    CMessageBoxCtrl::SetBusyStatus(true); //漏斗打开
    Sleep(1000);
    CMessageBoxCtrl::SetBusyStatus(false);//漏斗关闭
    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通讯中
    Sleep(800);


    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x07E8);
    SendDataComm(CBinary("\x22\xf1\x03", 3));
    sendframe.SetSendFrame(CBinary("\x10\x01", 2));
    rfRet = SendDataComm(sendframe);
    sendframe.SetSendFrame(CBinary("\x22\x03\x96", 3));  // 07 E0 08 03 22 03 96 00 00 00 00
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount() < 4 || binRecive[0] != 0x62 || binRecive[1] != 0x03 || binRecive[2] != 0x96)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x900019A5"), g_GetTxtStringFormHtml("0x9000D1CE"), DF_MB_OK);
        return CErrorCode::EC_TIME_OVER;
    }

    // 至下次保养的里程
    FxShowMessageBox(g_GetTxtStringFormHtml("0x9002D468"), g_GetTxtStringFormHtml("0x9002D468,0x0000B0A3"), DF_MB_NOBUTTON);//读取距离下次保养的里程初始值-完成
    CMessageBoxCtrl::SetBusyStatus(true); //漏斗打开
    Sleep(1000);
    CMessageBoxCtrl::SetBusyStatus(false);//漏斗关闭
    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通讯中
    Sleep(800);

    sendframe.SetSendFrame(CBinary("\x22\xF1\x03", 3));
    SendDataComm(CBinary("\x22\xf1\x03", 3));
    rfRet = SendDataComm(sendframe);
    sendframe.SetSendFrame(CBinary("\x10\x01", 2));
    rfRet = SendDataComm(sendframe);
    sendframe.SetSendFrame(CBinary("\x22\x05\x90", 3));  // 07 E0 08 03 22 05 90 00 00 00 00
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount() < 4 || binRecive[0] != 0x62 || binRecive[1] != 0x05 || binRecive[2] != 0x90)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x900019A5"), g_GetTxtStringFormHtml("0x9000D1CE"), DF_MB_OK);
        return CErrorCode::EC_TIME_OVER;
    }
    // 至下次保养的里程
    char buf[20];
    int value_kil;
    string str_kil;
    string contain_kil = g_GetTxtStringFormHtml("0x9002D14B") += ":        ";
    value_kil = binRecive[3];
    sprintf(buf, "%d", value_kil);
    str_kil = buf;
    str_kil += FxGetStdString(CBinary("\x4A\x90\x00\x00\xC3\x5D", 6));  // 公里
    contain_kil += str_kil;



    FxShowMessageBox(g_GetTxtStringFormHtml("0x9002D465"), g_GetTxtStringFormHtml("0x9002D465,0x0000B0A3"), DF_MB_NOBUTTON);//读取自上次机油更换以来的累积里程-完成
    CMessageBoxCtrl::SetBusyStatus(true); //漏斗打开
    Sleep(1000);
    CMessageBoxCtrl::SetBusyStatus(false);//漏斗关闭
    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通讯中
    Sleep(800);

    sendframe.SetSendFrame(CBinary("\x22\xF1\x03", 3));
    SendDataComm(CBinary("\x22\xf1\x03", 3));
    rfRet = SendDataComm(sendframe);
    sendframe.SetSendFrame(CBinary("\x10\x01", 2));
    rfRet = SendDataComm(sendframe);
    sendframe.SetSendFrame(CBinary("\x22\x05\x42", 3));  // 07 E0 08 03 22 05 42 00 00 00 00
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount() < 4 || binRecive[0] != 0x62 || binRecive[1] != 0x05 || binRecive[2] != 0x42)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x900019A5"), g_GetTxtStringFormHtml("0x9000D1CE"), DF_MB_OK);
        return CErrorCode::EC_TIME_OVER;
    }


    // 机油稀释值
    FxShowMessageBox(g_GetTxtStringFormHtml("0x9002D46A"), g_GetTxtStringFormHtml("0x9002D46A,0x0000B0A3"), DF_MB_NOBUTTON);//正在读取影响机油品质的燃油稀释因素 - 推断-完成
    CMessageBoxCtrl::SetBusyStatus(true); //漏斗打开
    Sleep(1000);
    CMessageBoxCtrl::SetBusyStatus(false);//漏斗关闭
    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通讯中
    Sleep(800);

    sendframe.SetSendFrame(CBinary("\x22\xF1\x03", 3));
    SendDataComm(CBinary("\x22\xf1\x03", 3));
    rfRet = SendDataComm(sendframe);
    sendframe.SetSendFrame(CBinary("\x10\x01", 2));
    rfRet = SendDataComm(sendframe);
    sendframe.SetSendFrame(CBinary("\x22\x03\xE1", 3));  // 07 E0 08 03 22 03 E1 00 00 00 00
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount() < 4 || binRecive[0] != 0x62 || binRecive[1] != 0x03 || binRecive[2] != 0xE1)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x900019A5"), g_GetTxtStringFormHtml("0x9000D1CE"), DF_MB_OK);
        return CErrorCode::EC_TIME_OVER;
    }
    // 机油稀释值
    float value_oil;
    string str_oil;
    string contain_oil = g_GetTxtStringFormHtml("0x9002D503") += ":    ";
    value_oil = binRecive[3] * 0.39;
    sprintf(buf, "%.1f", value_oil);
    str_oil = buf;
    str_oil += "%";
    contain_oil += str_oil;



    FxShowMessageBox(g_GetTxtStringFormHtml("0x9002D46C"), g_GetTxtStringFormHtml("0x9002D46C,0x0000B0A3"), DF_MB_NOBUTTON);//读取距离下次保养的时间初始值-完成
    CMessageBoxCtrl::SetBusyStatus(true); //漏斗打开
    Sleep(1000);
    CMessageBoxCtrl::SetBusyStatus(false);//漏斗关闭
    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通讯中
    Sleep(800);

    sendframe.SetSendFrame(CBinary("\x22\xF1\x03", 3));
    SendDataComm(CBinary("\x22\xf1\x03", 3));
    rfRet = SendDataComm(sendframe);
    sendframe.SetSendFrame(CBinary("\x10\x01", 2));
    rfRet = SendDataComm(sendframe);
    sendframe.SetSendFrame(CBinary("\x22\x05\x8F", 3));  // 07 E0 08 03 22 05 8F 00 00 00 00
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount() < 4 || binRecive[0] != 0x62 || binRecive[1] != 0x05 || binRecive[2] != 0x8F)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x900019A5"), g_GetTxtStringFormHtml("0x9000D1CE"), DF_MB_OK);
        return CErrorCode::EC_TIME_OVER;
    }


    // 至下次保养的时间
    FxShowMessageBox(g_GetTxtStringFormHtml("0x9002D466"), g_GetTxtStringFormHtml("0x9002D466,0x0000B0A3"), DF_MB_NOBUTTON);//读取自上次机油更换以来的累计时间-完成
    CMessageBoxCtrl::SetBusyStatus(true); //漏斗打开
    Sleep(1000);
    CMessageBoxCtrl::SetBusyStatus(false);//漏斗关闭
    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通讯中
    Sleep(800);

    sendframe.SetSendFrame(CBinary("\x22\xF1\x03", 3));
    SendDataComm(CBinary("\x22\xf1\x03", 3));
    rfRet = SendDataComm(sendframe);
    sendframe.SetSendFrame(CBinary("\x10\x01", 2));
    rfRet = SendDataComm(sendframe);
    sendframe.SetSendFrame(CBinary("\x22\x05\x3F", 3));  // 07 E0 08 03 22 05 3F 00 00 00 00
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount() < 4 || binRecive[0] != 0x62 || binRecive[1] != 0x05 || binRecive[2] != 0x3F)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x900019A5"), g_GetTxtStringFormHtml("0x9000D1CE"), DF_MB_OK);//执行诊断命令。测试失败
        return CErrorCode::EC_TIME_OVER;
    }
    // 至下次保养的时间
    float value_time;
    string str_time;
    string contain_time = g_GetTxtStringFormHtml("0x9002D529") += ":        ";
    value_time = binRecive[3] * (-3.9);
    sprintf(buf, "%.0f", value_time);  // 四舍五入
    str_time = buf;
    str_time += FxGetStdString(CBinary("\x4A\x90\x00\x01\xFA\x9B", 6)); // 天
    contain_time += str_time;



    // 保养消息重置
    if (value_oil == 0)   // 机油稀释值为0时建议进行全套保养
    {
        uiMessage.InitCtrl(g_GetTxtStringFormHtml("0x9002D518"), g_GetTxtStringFormHtml("0x9002D15A") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002D15C")
            + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002D15D")
            + "\n" + "\n" + contain_oil
            + "\n" + "\n" + contain_time
            + "\n" + "\n" + contain_kil
            , DF_MB_FREE);
    }
    else // 需要进行机油保养。请告知客户至下次保养的剩余时间和里程 - 提供全套保养。
    {
        uiMessage.InitCtrl(g_GetTxtStringFormHtml("0x9002D518"), g_GetTxtStringFormHtml("0x9002D505")
            + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002D15C") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002D15D")
            + "\n" + "\n" + contain_oil
            + "\n" + "\n" + contain_time
            + "\n" + "\n" + contain_kil
            , DF_MB_FREE);
    }


    uiMessage.AddCustomButton(g_GetTxtStringFormHtml("0x9002D15B")); // 全套保养重置
    iRet = uiMessage.ShowCtrl();
    if (iRet != DF_ID_FREEBTN_0)
        return iRet;


    // 按下确定继续
    iRet = FxShowMessageBox(g_GetTxtStringFormHtml("0x9002D517"), g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OKCANCEL, DT_LEFT);
    if (iRet == DF_IDCANCEL)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x900019A5"), g_GetTxtStringFormHtml("0x9002C122"), DF_MB_OK);//因用户中止而失败 - 重试程序
        return CErrorCode::EC_TIME_OVER;
    }

    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x07E8);
    SendDataComm(CBinary("\x22\xF1\x03", 3));
    sendframe.SetSendFrame(CBinary("\x10\x03", 2)); // 打开会话
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount() < 2 || binRecive[0] != 0x50 || binRecive[1] != 0x03)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x900019A5"), g_GetTxtStringFormHtml("0x9000D1CE"), DF_MB_OK);//测试失败
        return CErrorCode::EC_TIME_OVER;
    }

    // 安全访问
    iKey = SafeLogin_Standard3(CBinary("\x27\x03", 2), 0xA1F45E);

    if (iKey == CErrorCode::EC_ECU_REFUSE) // 否定应答
    {
        FxShowMessageBox(FxGetStdString(STD_TTL_MSG_INFORMATION), g_GetTxtStringFormHtml("0x0000B09F"), DF_MB_BACK); // 安全访问失败
        return CErrorCode::EC_ECU_REFUSE;
    }
    else if (iKey < 0)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }
    m_pNetLayer->KeepLink(0); //断开链路

    sendframe.SetSendFrame(CBinary("\x31\x01\x40\x24", 4)); // 动作实施
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount() == 0)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_OK, DT_LEFT); // 一般用于无回复的情况
        return CErrorCode::EC_TIME_OVER;
    }
    else if (checkIs7f(binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"), DF_MB_OK); // ECU不支持
        return CErrorCode::EC_ECU_REFUSE;
    }
    else if (binRecive.GetByteCount() < 4 || binRecive[0] != 0x71 || binRecive[1] != 0x01 || binRecive[2] != 0x40 || binRecive[3] != 0x24)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B8DD"), g_GetTxtStringFormHtml("0x0000B21F"));
        return CErrorCode::EC_TIME_OVER;
    }

    m_pNetLayer->KeepLink(3000, CSendFrame(CBinary("\x3E\x80", 2)));    // 打开链路
    PleaseWait_xS(8000);
    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通信中
    Sleep(800);
    SendDataComm(CBinary("\x10\x01", 2));
    m_pNetLayer->KeepLink(0); // 断开链路保持

    //step05 保养消息重置 - 完成
    FxShowMessageBox(g_GetTxtStringFormHtml("0x9002D517"), g_GetTxtStringFormHtml("0x9000128B") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OK);

    //step06 点火关闭
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml(TXT_HTML_STATE_VALUE_IGNITION_OFF));

    return iRet;

}




// 传输模式
W_ErrorCode CSeviceFunctionNew::Transport_mode_NEW_lansheng_L494_2016()
{
    W_ErrorCode iRet = 0;
    W_I16 iKey = 0;

    CMenuCtrl menuC;
    CSendFrame sendframe;
    CReceiveFrame rfRet;
    CBinary binAns, binCmd;
    string strTemp;
    CBinary binRecive;

    //step01 点火打开
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"));

    //step02 驻车操作模式和传输模式
    menuC.InitCtrl(g_GetTxtStringFormHtml("0x0000BA1B"));//进入传输模式
    menuC.AddOneItem(g_GetTxtStringFormHtml("0x90015372"));//驻车操作模式
    menuC.AddOneItem(g_GetTxtStringFormHtml("0x900230FF"));//传输模式
    iKey = menuC.ShowCtrl();
    if (iKey == -1)
        return 0;
    else if (iKey == 0)
    {
        binCmd = CBinary("\x2E\xD1\x34\x00", 4);  // 07 26 08 04 2E D1 34 00 00 00 00
        strTemp = g_GetTxtStringFormHtml("0x0000B9C8");//运输模式  -  禁用
    }
    else if (iKey == 1)
    {
        binCmd = CBinary("\x2E\xD1\x34\x09", 4);  // 07 26 08 04 2E D1 34 09 00 00 00
        strTemp = g_GetTxtStringFormHtml("0x0000BA0F"); // 运输模式  -  启用
    }

    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通讯中
    Sleep(1000);

    EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x26\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x072E);
    SendDataComm(CBinary("\x22\xf1\x03", 3));
    sendframe.SetSendFrame(CBinary("\x10\x03", 2));
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount() < 2)
    {
        FxShowMessageBox(FxGetStdString(CBinary("\xFF\x07\x00\x00\x00\x31", 6)), FxGetStdString(CBinary("\xFF\x07\x00\x00\x00\x3A", 6)), DF_MB_OK, DT_LEFT);
        return iRet;
    }
    if (checkIs7f(binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"), DF_MB_ANYKEYRETURN, DT_LEFT);    //ECU不支持
        return CErrorCode::EC_ECU_REFUSE;
    }

    //安全访问
    iRet = SafeLogin_Standard3(CBinary("\x27\x03", 2), 0xE8E241);
    if (iRet == CErrorCode::EC_ECU_REFUSE)
    {
        FxShowMessageBox(FxGetStdString(STD_TTL_MSG_INFORMATION), g_GetTxtStringFormHtml("0x0000B09F"), DF_MB_BACK);
        return CErrorCode::EC_ECU_REFUSE;
    }
    else if (iRet < 0)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }
    m_pNetLayer->KeepLink(0);//断开链路保持

    sendframe.SetSendFrame(binCmd);
    rfRet = SendDataComm(sendframe);  // // 07 26 08 04 2E D1 34 00 00 00 00
    binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount() < 3 || binRecive[0] != 0x6E || binRecive[1] != 0xD1 || binRecive[2] != 0x34)
    {
        FxShowMessageBox(strTemp, g_GetTxtStringFormHtml("0x0000B8E0,0x0000B8E6,0x0000B0AC"), DF_MB_OK, DT_LEFT);
        SendDataComm(CBinary("\x10\x01", 2));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BA0D"), g_GetTxtStringFormHtml("0x0000BA0E"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));
        return 0;
    }
    SendDataComm(CBinary("\x10\x01", 2));

    //Step03 完成
    FxShowMessageBox(strTemp, strTemp + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000B0A3") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OK, DT_LEFT);

    //step04 点火关闭
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));

    //step05 故障码
    iRet = ClearSysDTC_Programme_538(PTL_CAN_11_500K, CBinary("\x07\x26\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x072E);

    return iRet;

}




// 约束构建模式
W_ErrorCode CSeviceFunctionNew::Restraints_bulid_NEW_lansheng_L494_2016()
{
    W_ErrorCode iRet = 0;
    W_I16 iKey = 0;
    W_I16 selectmenu;

    CSendFrame sendframe;
    CReceiveFrame rfRet;

    //step01:点火打开
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"));

    //step02 在执行下述应用前 ，该系统必须无故障
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000003B"), g_GetTxtStringFormHtml("0x0000003B") + "\n" + "\n" + g_GetTxtStringFormHtml("0x90022DEC")
        + "\n" + "\n" + FxGetStdString(CBinary("\x4A\x90\x00\x01\x02\x58", 6)) + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000B2C7")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000B2C8") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000B2C9")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BBAB") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012DA"), DF_MB_YESNO, DT_LEFT);
    if (iKey == DF_IDNO)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml(TXT_HTML_STATE_VALUE_IGNITION_OFF));
        return iRet;
    }

    //step03 正常模式和建立模式
    CMenuCtrl uiMenu;
    while (1)
    {
        uiMenu.InitCtrl(g_GetTxtStringFormHtml("0x0000B2CA"));//约束实施模式，选择所需选项：
        uiMenu.AddOneItem(g_GetTxtStringFormHtml("0x0000B160"));//正常模式
        uiMenu.AddOneItem(g_GetTxtStringFormHtml("0x0000004A"));//建立模式
        selectmenu = uiMenu.ShowCtrl();
        if (selectmenu == -1)
        {
            return 0;
        }
        else if (selectmenu == 0) //正常模式
        {
            break;
        }
        else if (selectmenu == 1)  //建立模式
        {
            break;
        }
    }

    EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x37\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x073F);
    SendDataComm(CBinary("\x22\xF1\x03", 3));
    sendframe.SetSendFrame(CBinary("\x10\x01", 2));
    rfRet = SendDataComm(sendframe);
    if (rfRet.GetByteCount() < 0)
        return CErrorCode::EC_DATA;

    sendframe.SetSendFrame(CBinary("\x22\x5B\x26", 3));
    rfRet = SendDataComm(sendframe);
    m_binRecive = rfRet.GetFirst();
    if (m_binRecive.GetByteCount() < 3 || AcquireDataByIndex(m_binRecive, 0, 3) != 0x625B26)  //  // 07 3F 08 04 62 5B 26 FF 00 00 00
    {
        SendDataComm(CBinary("\x10\x01", 2));
        if (!m_binRecive.GetByteCount())
        {
            FxShowMessageBox(FxGetStdString(STD_INFO_COMMUNICATION_STATUS), FxGetStdString(STD_INFO_NO_COMMUNICATION_SYS), DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_TIME_OVER;
        }
        if (checkIs7f(m_binRecive))
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));
            return CErrorCode::EC_ECU_REFUSE;
        }
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BC4C"), g_GetTxtStringFormHtml("0x0000BC4D,0x0000B0AC"), DF_MB_OK, DT_LEFT);//测试失败
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//点火关闭
        if (selectmenu == 0)
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x9002232F"), g_GetTxtStringFormHtml("0x00000069") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BC4F")
                + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OK, DT_LEFT);//约束模块未处于制造／发车模式，因此不能设置为普通模式
        }
        else if (selectmenu == 1)
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00000069"), g_GetTxtStringFormHtml("0x0000BC4E"));//约束模块未处于普通模式，因此不能设置为制造／发车模式
        }
        return CErrorCode::EC_DATA;
    }

    if (selectmenu == 0)
    {
        if (m_binRecive.GetByteCount() != 4 || m_binRecive[3] != ((selectmenu + 1) % 2) * 255)    // 07 3F 08 04 62 5B 26 FF 00 00 00
        {
            CMessageBoxCtrl::SetBusyStatus(false);//漏斗关闭
            FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BC4C"), g_GetTxtStringFormHtml("0x0000B0A3"));//发车模式 - 完成
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//点火关闭
            if (selectmenu == 0)
            {
                FxShowMessageBox(g_GetTxtStringFormHtml("0x00000069"), g_GetTxtStringFormHtml("0x0000BC4F"));
            }
            else if (selectmenu == 1)
            {
                FxShowMessageBox(g_GetTxtStringFormHtml("0x00000069"), g_GetTxtStringFormHtml("0x0000BC4E"));
            }
            return CErrorCode::EC_TIME_OVER;
        }
    }
    else
    {
        if (m_binRecive.GetByteCount() != 4)
        {
            CMessageBoxCtrl::SetBusyStatus(false);//漏斗关闭
            FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BC4C"), g_GetTxtStringFormHtml("0x0000B0A3"));
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));
            if (selectmenu == 0)
            {
                FxShowMessageBox(g_GetTxtStringFormHtml("0x00000069"), g_GetTxtStringFormHtml("0x0000BC4F"));
            }
            else if (selectmenu == 1)
            {
                FxShowMessageBox(g_GetTxtStringFormHtml("0x00000069"), g_GetTxtStringFormHtml("0x0000BC4E"));
            }
            return CErrorCode::EC_TIME_OVER;
        }
    }


    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通讯中
    Sleep(800);

    //step04 完成
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BC4C"), g_GetTxtStringFormHtml("0x0000BC4D,0x0000B0A3"), DF_MB_NOBUTTON);
    CMessageBoxCtrl::SetBusyStatus(true); //漏斗打开
    Sleep(1000);
    CMessageBoxCtrl::SetBusyStatus(false);//漏斗关闭

    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通讯中
    Sleep(800);

    EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x37\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x073F);
    SendDataComm(CBinary("\x22\xF1\x03", 3));
    sendframe.SetSendFrame(CBinary("\x10\x03", 2));
    rfRet = SendDataComm(sendframe);
    if (rfRet.GetByteCount() < 0)
        return CErrorCode::EC_DATA;

    //安全访问
    iRet = SafeLogin_Standard3(CBinary("\x27\x03", 2), 0xED64F7);  // ED 64 F7
    if (iRet == CErrorCode::EC_ECU_REFUSE)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B09F"), DF_MB_BACK);
        return CErrorCode::EC_ECU_REFUSE;
    }
    else if (iRet < 0)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), FxGetStdString(STD_INFO_NO_COMMUNICATION_SYS), DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }
    m_pNetLayer->KeepLink(0);//断开链路保持

    if (selectmenu == 0)
    {
        sendframe.SetSendFrame(CBinary("\x2E\x5B\x26", 4));  // 07 37 08 04 2E 5B 26 00 00 00 00
    }
    else if (selectmenu == 1)
    {
        sendframe.SetSendFrame(CBinary("\x2E\x5B\x26\xFF", 4));  // 07 37 08 04 2E 5B 26 FF 00 00 00
    }
    rfRet = SendDataComm(sendframe);
    m_binRecive = rfRet.GetFirst();
    if (m_binRecive.GetByteCount() != 3 || AcquireDataByIndex(m_binRecive, 0, 3) != 0x6E5B26)
    {
        SendDataComm(CBinary("\x10\x01", 2));
        if (!m_binRecive.GetByteCount())
        {
            FxShowMessageBox(FxGetStdString(STD_INFO_COMMUNICATION_STATUS), FxGetStdString(STD_INFO_NO_COMMUNICATION_SYS), DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_TIME_OVER;
        }
        if (checkIs7f(m_binRecive))
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));
            return CErrorCode::EC_ECU_REFUSE;
        }
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000003B"), g_GetTxtStringFormHtml("0x0000B2CB"));
        return CErrorCode::EC_DATA;
    }
    SendDataComm(CBinary("\x10\x01", 2));

    if (selectmenu == 0)
    {
        //step05 本程序将令模块进入常规工作状态- 完成
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B8F7"), g_GetTxtStringFormHtml("0x0000B8F8,0x0000B0A3"), DF_MB_NOBUTTON);
        CMessageBoxCtrl::SetBusyStatus(true); //漏斗打开
        Sleep(1000);
        CMessageBoxCtrl::SetBusyStatus(false);//漏斗关闭

        //step06 约束构建模式 - 已禁用
        FxShowMessageBox(g_GetTxtStringFormHtml("0x9002232F"), g_GetTxtStringFormHtml("0x0000BC50") + "\n" + "\n" + g_GetTxtStringFormHtml("0x90020AAE")
            + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002233B") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OK, DT_LEFT);

    }
    else if (selectmenu == 1)
    {
        //step05 本程序将令模块进入构建模式
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BE65"), g_GetTxtStringFormHtml("0x0000B8FA,0x0000B0A3"), DF_MB_NOBUTTON);
        CMessageBoxCtrl::SetBusyStatus(true); //漏斗打开
        Sleep(1000);
        CMessageBoxCtrl::SetBusyStatus(false);//漏斗关闭

        //step06 约束构建模式 - 已启用
        FxShowMessageBox(g_GetTxtStringFormHtml("0x9002232F"), g_GetTxtStringFormHtml("0x90022339") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000B2CE")
            + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000B2CF") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9001C78F")
            + "\n" + "\n" + g_GetTxtStringFormHtml("0x9001C790") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OK, DT_LEFT);

    }

    //step07 点火关闭
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));

    //step08 故障码
    iRet = ClearSysDTC_Programme_538(PTL_CAN_11_500K, CBinary("\x07\x37\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x073F);

    return iRet;

}



// 里程表校准
W_ErrorCode CSeviceFunctionNew::Odometer_reset_NEW_lansheng_L494_2016()
{
    W_ErrorCode iRet = CErrorCode::EC_SUCCESS;
    W_I16 iKey = 0;
    W_I16 safeType = 1;

    CSendFrame sendframe;
    CReceiveFrame rfRet;
    CVehicleComm ecuInter;

    string strOpenFile = m_stropenfileConfigMenu;
    CJLRStringOperate strOpt;
    strOpt.Replace(strOpenFile, ".ctv", "");

    // 此应用程序会将里程写入组合仪表
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BC59"), g_GetTxtStringFormHtml("0x9001DB93") + "\n" + "\n" + g_GetTxtStringFormHtml("0x90022F8D"), DF_MB_OKCANCEL, DT_LEFT);
    if (DF_IDCANCEL == iKey)
        return iRet;

    // 打开点火
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x90027136"));

    ////step03 下列应用程序将自动控制车辆点火
    //FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"),g_GetTxtStringFormHtml("0x0000B0C8"),DF_MB_OKCANCEL,DT_LEFT);
    //FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS,STD_INFO_ESTAB_VEH_COMMUNICATION,DF_MB_NOBUTTON);
    //if (1 == iValue)
    //{
    //    //链路：11位can125K
    //    iRet = EnterSystem(PTL_CAN_11_125K,CBinary("\x07\x26\x08\x02\x10\x03\x00\x00\x00\x00\x00",11),0x072E);
    //    if (iRet)
    //    {
    //        FxShowMessageBox(STD_TTL_MSG_INFORMATION,STD_TXT_MSG_COMMFAIL,DF_MB_BACK,DT_LEFT);
    //        return CErrorCode::EC_TIME_OVER;
    //    }

    //    rfRet = m_rfRet;
    //    CBinary binRecive = rfRet.GetFirst();
    //    if (binRecive.GetByteCount() < 5)
    //    {
    //        FxShowMessageBox(STD_TTL_MSG_INFORMATION,STD_TXT_MSG_COMMFAIL,DF_MB_BACK,DT_LEFT);
    //        return CErrorCode::EC_TIME_OVER;
    //    }

    //    m_binRecive = CBinary(binRecive.GetBuffer() + 4,binRecive.GetByteCount() - 4);
    //    if (checkIs7f(m_binRecive))
    //    {
    //        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"),g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
    //        return iRet;
    //    }

    //    //step4    安全访问
    //    W_I32 P_table[3][8] = {{0xFCA819,0xA204FE,0x1A6E20,0x6E999D,0x8776F6,0x508B20,0xFA539C,0xAAC0E4},
    //    {0x0AE705,0x4BB9C7,0xCD3752,0xC50968,0xD0461D,0xFFEAE6,0xA58110,0x1565ED},
    //    {0x74BC06,0xB23DD0,0x3F2F7D,0x241A37,0x1271B3,0x7A95AA,0xAA5C89,0x0FECDF}};
    //    iRet = SafeLogin_L405_2014_Oil(CBinary("\x27\x21",2),0x35D24B,P_table);

    //    if (CErrorCode::EC_ECU_REFUSE == iRet)
    //    {
    //        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"),g_GetTxtStringFormHtml("0x0000B09F"));//安全访问失败
    //        return iRet;
    //    }

    //    if (iRet < 0)
    //    {
    //        FxShowMessageBox(STD_TTL_MSG_INFORMATION,STD_TXT_MSG_COMMFAIL,DF_MB_BACK,DT_LEFT);
    //        return CErrorCode::EC_TIME_OVER;
    //    }
    //    //链路保持
    //    m_pNetLayer->KeepLink(1000,CSendFrame(CBinary("\x3E\x00",2)));

    //    //step5
    //    sendframe.SetSendFrame(CBinary("\x31\x01\x40\x0B",4));
    //    rfRet = SendDataComm(sendframe);
    //    if (0 == rfRet.GetByteCount())
    //    {
    //        FxShowMessageBox(STD_TTL_MSG_INFORMATION,STD_TXT_MSG_COMMFAIL,DF_MB_BACK,DT_LEFT);
    //        return CErrorCode::EC_TIME_OVER;
    //    }

    //    m_binRecive = rfRet.GetFirst();
    //    if (checkIs7f(m_binRecive))
    //    {
    //        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"),g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
    //        return iRet;
    //    }

    //    if (m_binRecive.GetByteCount() < 4
    //        || m_binRecive[0] != 0x71
    //        || m_binRecive[1] != 0x01
    //        || m_binRecive[2] != 0x40
    //        || m_binRecive[3] != 0x0B)
    //    {
    //        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"),g_GetTxtStringFormHtml("0x0000B0FD"));//应用程序失败
    //        return iRet;
    //    }
    //}
    //else
    //{
    //    if(strOpenFile == "module_special_X260_2016"||strOpenFile == "module_special_X351_2016")
    //    {

    //    }else
    //    {
    //        ecuInter.SendReceive(CBinary("\x40\x00\x07\x26\x22\xf1\x03",7));
    //        iRet = EnterSystem(PTL_CAN_11_500K,CBinary("\x07\x26\x08\x02\x10\x03\x00\x00\x00\x00\x00",11),0x072E);
    //        if (iRet)
    //        {
    //            FxShowMessageBox(STD_TTL_MSG_INFORMATION,STD_TXT_MSG_COMMFAIL,DF_MB_BACK,DT_LEFT);
    //            return CErrorCode::EC_TIME_OVER;
    //        }

    //        rfRet = m_rfRet;
    //        CBinary binRecive = rfRet.GetFirst();
    //        if (binRecive.GetByteCount() < 5)
    //        {
    //            FxShowMessageBox(STD_TTL_MSG_INFORMATION,STD_TXT_MSG_COMMFAIL,DF_MB_BACK,DT_LEFT);
    //            return CErrorCode::EC_TIME_OVER;
    //        }

    //        m_binRecive = CBinary(binRecive.GetBuffer() + 4,binRecive.GetByteCount() - 4);
    //        if (checkIs7f(m_binRecive))
    //        {
    //            FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"),g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
    //            return iRet;
    //        }

    //        //step4    安全访问
    //        W_I32 P_table[3][8] = {{0x006425,0x5EC8C2,0xE6A21C,0x9255A1,0x7BBACA,0xAC471C,0x069FA0,0x560CD8},
    //        {0xF62B39,0xB775FB,0x31FB6E,0x39C554,0x2C8A21,0x0326DA,0x594D2C,0xE9A9D1},
    //        {0x88703A,0x4EF1EC,0xC3E341,0xD8D60B,0xEEBD8F,0x865996,0x5690B5,0xF320E3}};
    //        iRet = SafeLogin_L405_2014_Oil(CBinary("\x27\x21",2),0xC91E77,P_table);

    //        if (CErrorCode::EC_ECU_REFUSE == iRet)
    //        {
    //            FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"),g_GetTxtStringFormHtml("0x0000B09F"));//安全访问失败
    //            return iRet;
    //        }

    //        if (iRet < 0)
    //        {
    //            FxShowMessageBox(STD_TTL_MSG_INFORMATION,STD_TXT_MSG_COMMFAIL,DF_MB_BACK,DT_LEFT);
    //            return CErrorCode::EC_TIME_OVER;
    //        }
    //        //链路保持
    //        m_pNetLayer->KeepLink(1000,CSendFrame(CBinary("\x3E\x00",2)));

    //        //step5
    //        sendframe.SetSendFrame(CBinary("\x31\x01\x20\x38\x01",5));
    //        rfRet = SendDataComm(sendframe);
    //        if (0 == rfRet.GetByteCount())
    //        {
    //            FxShowMessageBox(STD_TTL_MSG_INFORMATION,STD_TXT_MSG_COMMFAIL,DF_MB_BACK,DT_LEFT);
    //            return CErrorCode::EC_TIME_OVER;
    //        }

    //        m_binRecive = rfRet.GetFirst();
    //        if (checkIs7f(m_binRecive))
    //        {
    //            FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"),g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
    //            return iRet;
    //        }

    //        if (m_binRecive.GetByteCount() < 4
    //            || m_binRecive[0] != 0x71
    //            || m_binRecive[1] != 0x01
    //            || m_binRecive[2] != 0x20
    //            || m_binRecive[3] != 0x38)
    //        {
    //            FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"),g_GetTxtStringFormHtml("0x0000B0FD"));//应用程序失败
    //            return iRet;
    //        }
    //        m_pNetLayer->KeepLink(0);
    //    }

    //}


    //  里程表单位是英里，是否正确？
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BC59"), g_GetTxtStringFormHtml("0x0000C215"), DF_MB_YESNO, DT_LEFT);
    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);
    Sleep(500);
    //断开链路
    //m_pNetLayer->KeepLink(0);
    EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x20\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x0728);

    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x20\x08\x03\x22\x61\xBB\x00\x00\x00\x00", 11), 0x0728);  // 英里 控制命令

    if (iRet)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    rfRet = m_rfRet;
    CBinary binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount() < 5)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    m_binRecive = CBinary(binRecive.GetBuffer() + 4, binRecive.GetByteCount() - 4);
    if (checkIs7f(m_binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return iRet;
    }

    BYTE ptl = PTL_CAN_11_125K;
    CBinary binCmd = CBinary("\x07\x26\x08\x04\x31\x02\x40\x0B\x00\x00\x00", 11);
    W_U32 uAddPara = 0x07E7;

    if (m_binRecive.GetByteCount() < 4
        || m_binRecive[0] != 0x62
        || m_binRecive[1] != 0x61
        || m_binRecive[2] != 0xBB)
    {
        iRet = EnterSystem(ptl, binCmd, uAddPara);
        CVehicleComm ecuInter;
        ecuInter.SendReceive(CBinary("\x40\x00\x07\x26\x10\x01", 6));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B9F1"), g_GetTxtStringFormHtml("0x0000C216"));//和组合仪表通讯故障
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000B0FD"));//应用程序失败
        return iRet;
    }

    if ("module_special_X761_2017" == strOpenFile
        || "module_special_X760_2017" == strOpenFile
        || strOpenFile == "module_special_X260_2016"
        || strOpenFile == "module_special_X351_2016"
        || strOpenFile == "module_special_X152_2016")
    {
        CMenuCtrl uiMenu;
        uiMenu.InitCtrl(g_GetTxtStringFormHtml("0x0000949D"));//选择变体
        uiMenu.AddOneItem(g_GetTxtStringFormHtml("0x000096E5"));//仪表板仪表类型
        uiMenu.AddOneItem(g_GetTxtStringFormHtml("0x0000960C"));//仪表板屏幕类型

        W_I16 iKeyPress = uiMenu.ShowCtrl();
        if (-1 == iKeyPress)
            return iRet;
        if (0 == iKeyPress)
            safeType = 1;
        else
            safeType = 2;
    }


    // 控制位判断
    W_I32 iKilometre = m_binRecive[3];
    if (m_binRecive.GetByteCount() > 4)
        iKilometre += m_binRecive[4] * 256;
    if (m_binRecive.GetByteCount() > 5)
        iKilometre += m_binRecive[5] * 256 * 256;

    char charTemp[50];
    string strFormat;
    string strPormot;

    if (DF_IDYES == iKey)
    {
        strFormat = g_GetTxtStringFormHtml("0x0000C218"); //设置的里程表值为 英里
        W_I32 iTemp = (float)iKilometre / 1.609344 + 0.5;
        sprintf(charTemp, strFormat.c_str(), iTemp);
        strPormot = charTemp;
        strFormat = g_GetTxtStringFormHtml("0x0000C21B"); // 标题度数为英里
    }
    else
    {
        strFormat = g_GetTxtStringFormHtml("0x0000C217");// 设定的里程表值为 km
        sprintf(charTemp, strFormat.c_str(), iKilometre);
        strPormot = charTemp;
        strFormat = g_GetTxtStringFormHtml("0x0000C21A");  // 标题度数为km
    }
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), strPormot);

    //step9
    if (iKilometre > 5000)
    {
        //由于里程表起始读数不正确，不能对组合仪表模块进行标定。请确保配置一个新的组合仪表
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000C219"));
        iRet = EnterSystem(ptl, binCmd, uAddPara);
        CVehicleComm ecuInter;
        ecuInter.SendReceive(CBinary("\x40\x00\x07\x26\x10\x01", 6));
        return iRet;
    }

    // 输入里程表值
    CInputCtrl uiInput;
    string strMask = "SSSSSSSS";
    string strDefault = "";
    string strMinValue = "0";
    string strMaxValue = "16777215";
    uiInput.SetKeyboardShow(true);
    uiInput.ShowReadButton(CInputCtrl::BTN_READ_BUTTON, false);

    W_I32 intInput = 0;
    W_I16 iKeyPress = 0;
    while (1)
    {
        iKeyPress = uiInput.ShowCtrl(g_GetTxtStringFormHtml("0x0000005F"), strFormat, strMask, strDefault, strMinValue, strMaxValue, 5);
        if (iKeyPress == 5)
        {
            //里程表初始值已正确输入了吗？
            iKeyPress = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000C21C"), DF_MB_YESNO, DT_LEFT);
            if (DF_IDYES == iKeyPress)
            {
                //step7
                intInput = uiInput.GetIntValue();
                if (DF_IDYES == iKey)
                    intInput = (float)intInput * 1.609344 + 0.5; //按英里，按km计算不需要乘 1.609269
                if (iKilometre + 9 < intInput)   // 通过要求
                    break;

                //里程表值不能按照输入的值校准，您希望重新输入一个值吗？
                iKeyPress = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000C21D"), DF_MB_YESNO, DT_LEFT);
                if (DF_IDNO == iKeyPress)
                {
                    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000C21E"));//里程表尚未标定
                    return iRet;
                }
            }
        }
        else
            return iRet;
    }

    //step12
    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);

    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x20\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x0728);
    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x20\x08\x02\x10\x03\x00\x00\x00\x00\x00", 11), 0x0728);

    if (iRet)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }


    rfRet = m_rfRet;
    binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount() < 5)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    m_binRecive = CBinary(binRecive.GetBuffer() + 4, binRecive.GetByteCount() - 4);
    if (checkIs7f(m_binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return iRet;
    }


    //安全访问
    W_I32 P_table[3][8] = { {0x8BBC7F,0xD51098,0x6D7A46,0x198DFB,0xF06290,0x279F46,0x8D47FA,0xDDD482},
    {0x7DF363,0x3CADA1,0xBA2334,0xB21D0E,0xA7527B,0x88FE80,0xD29576,0x62718B},
    {0x03A860,0xC529B6,0x483B1B,0x530E51,0x6565D5,0x0D81CC,0xDD48EF,0x78F8B9} };
    iRet = SafeLogin_L405_2014_Oil(CBinary("\x27\x01", 2), 0x42C62D, P_table);


    if (CErrorCode::EC_ECU_REFUSE == iRet)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000B09F"));//安全访问失败
        return iRet;
    }

    if (iRet < 0)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }
    //链路保持
    m_pNetLayer->KeepLink(1000, CSendFrame(CBinary("\x3E\x00", 2)));

    //step14
    CBinary binSetCMD = CBinary("\x2E\x61\xBB\x00\x00\x00", 6);  // 07 20 08 06 2E 61 BB A0 00 00 00
    binSetCMD.SetByteAt(3, intInput & 0xFF);
    binSetCMD.SetByteAt(4, (intInput & 0xFFFF) >> 8);
    binSetCMD.SetByteAt(5, intInput >> 16);

    sendframe.SetSendFrame(binSetCMD);
    rfRet = SendDataComm(sendframe);
    if (0 == rfRet.GetByteCount())
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    m_binRecive = rfRet.GetFirst();
    if (checkIs7f(m_binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return iRet;
    }

    if (m_binRecive.GetByteCount() != 3
        || m_binRecive[0] != 0x6E
        || m_binRecive[1] != 0x61
        || m_binRecive[2] != 0xBB)
    {
        //断开链路
        m_pNetLayer->KeepLink(0);

        iRet = EnterSystem(ptl, binCmd, uAddPara);
        CVehicleComm ecuInter;
        ecuInter.SendReceive(CBinary("\x40\x00\x07\x26\x10\x01", 6));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B9F1"), g_GetTxtStringFormHtml("0x0000C216"));//和组合仪表通讯故障
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000B0FD"));//应用程序失败
        return iRet;
    }

    //step15

    sendframe.SetSendFrame(CBinary("\x22\x61\xBB", 3));  // 07 20 08 03 22 61 BB 00 00 00 00
    rfRet = SendDataComm(sendframe);
    if (0 == rfRet.GetByteCount())
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    m_binRecive = rfRet.GetFirst();
    if (checkIs7f(m_binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return iRet;
    }

    if (m_binRecive.GetByteCount() < 4
        || m_binRecive[0] != 0x62
        || m_binRecive[1] != 0x61
        || m_binRecive[2] != 0xBB)
    {
        //断开链路
        m_pNetLayer->KeepLink(0);

        iRet = EnterSystem(ptl, binCmd, uAddPara);
        CVehicleComm ecuInter;
        ecuInter.SendReceive(CBinary("\x40\x00\x07\x26\x10\x01", 6));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B9F1"), g_GetTxtStringFormHtml("0x0000C216"));//和组合仪表通讯故障
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000B0FD"));//应用程序失败
        return iRet;
    }

    // 里程表值
    iKilometre = m_binRecive[3];   // 07 28 08 04 62 61 BB A1 10 00 00
    if (m_binRecive.GetByteCount() > 4)
        iKilometre += m_binRecive[4] * 256;
    if (m_binRecive.GetByteCount() > 5)
        iKilometre += m_binRecive[5] * 256 * 256;

    if (DF_IDYES == iKey)
    {
        W_I32 iTemp = (float)iKilometre / 1.609344 + 0.5;
        strFormat = g_GetTxtStringFormHtml("0x0000C218");
        sprintf(charTemp, strFormat.c_str(), iTemp);
        strPormot = charTemp;
    }
    else
    {
        strFormat = g_GetTxtStringFormHtml("0x0000C217");
        sprintf(charTemp, strFormat.c_str(), iKilometre);
        strPormot = charTemp;
    }

    //设置里程表的值为
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), strPormot);

    // 里程表值通过判断
    if (iKilometre - intInput < -1 || iKilometre - intInput > 1)
    {
        //里程表尚未标定。请运行故障诊断代码监控器，在再次尝试重新标定之前，先排除相关的故障
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000C21F"));
        //断开链路
        m_pNetLayer->KeepLink(0);

        iRet = EnterSystem(ptl, binCmd, uAddPara);
        CVehicleComm ecuInter;
        ecuInter.SendReceive(CBinary("\x40\x00\x07\x26\x10\x01", 6));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000B0FD"));//应用程序失败
        return iRet;
    }
    m_pNetLayer->KeepLink(0);

    // 里程表已成功标定
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000C220"));

    // 点火关闭
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x0000B197"));

    return iRet;

}




// 仪表盘虚拟显示诊断应用程序
W_ErrorCode CSeviceFunctionNew::Dashboard_display_NEW_lansheng_L494_2016()
{
    W_ErrorCode iRet = CErrorCode::EC_SUCCESS;;
    W_I16 iKey = 0;
    CSendFrame sendframe;
    CReceiveFrame rfRet;

    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x20\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x0728);
    SendDataComm(CBinary("\x22\xf1\x03", 3));
    sendframe.SetSendFrame(CBinary("\x22\xD1\x00", 3));
    rfRet = SendDataComm(sendframe);
    if (iRet)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    m_binRecive = rfRet.GetFirst();
    if (m_binRecive.GetByteCount() < 4 || m_binRecive.GetByteAt(0) != 0x62 || m_binRecive.GetByteAt(1) != 0xD1)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    PleaseWait_xS(2000);

    // 自动控制车辆点火
    FxShowMessageBox(g_GetTxtStringFormHtml("0x9002702E"), g_GetTxtStringFormHtml("0x9002C367"), DF_MB_OK, DT_LEFT);

    EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x26\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x072E);
    sendframe.SetSendFrame(CBinary("\x10\x03", 2));
    rfRet = SendDataComm(sendframe);
    if (0 == rfRet.GetByteCount())
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }
    iRet = SafeLogin_Standard3(CBinary("\x27\x21", 2), 0x88703A); // 88 70 3A
    if (iRet < 0)
    {
        if (CErrorCode::EC_ECU_REFUSE == iRet)
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000B09F"), DF_MB_ANYKEYRETURN, DT_LEFT);//安全访问失败
        else
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);

        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        //链路：11位can500k
        iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x26\x08\x05\x31\x01\x20\x38\x01\x00\x00", 11), 0x072E);
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);

        //链路：11位can125k
        iRet = EnterSystem(PTL_CAN_11_125K, CBinary("\x07\x31\x08\x02\x11\x01\x00\x00\x00\x00\x00", 11), 0x0739);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000C2E6"), DF_MB_ANYKEYRETURN, DT_LEFT);//过程未完成
        return CErrorCode::EC_DATA;
    }

    sendframe.SetSendFrame(CBinary("\x31\x01\x20\x38\x01", 5));  // 07 26 08 05 31 01 20 38 01 00 00
    rfRet = SendDataComm(sendframe);
    if (0 == rfRet.GetByteCount())
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }
    m_binRecive = rfRet.GetFirst();
    if (checkIs7f(m_binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"), DF_MB_ANYKEYRETURN, DT_LEFT);//ECU不支持
        sendframe.SetSendFrame(CBinary("\x31\x01\x20\x38\x01", 5));
        rfRet = SendDataComm(sendframe);
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        //断开链路
        m_pNetLayer->KeepLink(0);
        //链路：11位can125k
        iRet = EnterSystem(PTL_CAN_11_125K, CBinary("\x07\x31\x08\x02\x11\x01\x00\x00\x00\x00\x00", 11), 0x0739);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000C2E6"), DF_MB_ANYKEYRETURN, DT_LEFT);//过程未完成
        return CErrorCode::EC_DATA;
    }

    if (m_binRecive.GetByteCount() < 4 || m_binRecive[0] != 0x71 || m_binRecive[1] != 1 || m_binRecive[2] != 0x20 || m_binRecive[3] != 0x38)
    {
        sendframe.SetSendFrame(CBinary("\x31\x01\x20\x38\x01", 5));
        rfRet = SendDataComm(sendframe);
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        //断开链路
        m_pNetLayer->KeepLink(0);
        //链路：11位can125k
        iRet = EnterSystem(PTL_CAN_11_125K, CBinary("\x07\x31\x08\x02\x11\x01\x00\x00\x00\x00\x00", 11), 0x0739);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x9002C36A"), DF_MB_ANYKEYRETURN, DT_LEFT);//过程未完成
        return CErrorCode::EC_DATA;
    }


    // 仪表板（IPC）刻度盘/通信中心是否已显示？
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x9002702E"), g_GetTxtStringFormHtml("0x9002C36A"), DF_MB_YESNO, DT_LEFT);
    //if(iKey==DF_IDCANCEL)
    //{
    //    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"),g_GetTxtStringFormHtml("0x0000B8D1"));
    //    return iRet;
    //}

    EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x26\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x072E);
    sendframe.SetSendFrame(CBinary("\x10\x03", 2));
    rfRet = SendDataComm(sendframe);
    if (0 == rfRet.GetByteCount())
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }
    iRet = SafeLogin_Standard3(CBinary("\x27\x21", 2), 0x88703A);
    if (iRet < 0)
    {
        if (CErrorCode::EC_ECU_REFUSE == iRet)
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000B09F"), DF_MB_ANYKEYRETURN, DT_LEFT);//安全访问失败
        else
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);

        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        //链路：11位can500k
        iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x26\x08\x05\x31\x01\x20\x38\x01\x00\x00", 11), 0x072E);
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);

        //链路：11位can125k
        iRet = EnterSystem(PTL_CAN_11_125K, CBinary("\x07\x31\x08\x02\x11\x01\x00\x00\x00\x00\x00", 11), 0x0739);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000C2E6"), DF_MB_ANYKEYRETURN, DT_LEFT);//过程未完成
        return CErrorCode::EC_DATA;
    }

    sendframe.SetSendFrame(CBinary("\x31\x01\x20\x38\x01", 5));  // 07 26 08 05 31 01 20 38 01 00 00
    rfRet = SendDataComm(sendframe);
    if (0 == rfRet.GetByteCount())
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }
    m_binRecive = rfRet.GetFirst();
    if (checkIs7f(m_binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"), DF_MB_ANYKEYRETURN, DT_LEFT);//ECU不支持
        sendframe.SetSendFrame(CBinary("\x31\x01\x20\x38\x01", 5));
        rfRet = SendDataComm(sendframe);
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        //断开链路
        m_pNetLayer->KeepLink(0);
        //链路：11位can125k
        iRet = EnterSystem(PTL_CAN_11_125K, CBinary("\x07\x31\x08\x02\x11\x01\x00\x00\x00\x00\x00", 11), 0x0739);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000C2E6"), DF_MB_ANYKEYRETURN, DT_LEFT);//过程未完成
        return CErrorCode::EC_DATA;
    }

    if (m_binRecive.GetByteCount() < 4 || m_binRecive[0] != 0x71 || m_binRecive[1] != 1 || m_binRecive[2] != 0x20 || m_binRecive[3] != 0x38)
    {
        sendframe.SetSendFrame(CBinary("\x31\x01\x20\x38\x01", 5));
        rfRet = SendDataComm(sendframe);
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        //断开链路
        m_pNetLayer->KeepLink(0);
        //链路：11位can125k
        iRet = EnterSystem(PTL_CAN_11_125K, CBinary("\x07\x31\x08\x02\x11\x01\x00\x00\x00\x00\x00", 11), 0x0739);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x9002C36A"), DF_MB_ANYKEYRETURN, DT_LEFT);//过程未完成
        return CErrorCode::EC_DATA;
    }

    sendframe.SetSendFrame(CBinary("\x10\x01", 2));
    rfRet = SendDataComm(sendframe);
    //断开链路
    m_pNetLayer->KeepLink(0);

    // 从工具主菜单中选择运行“安全启动认证状态”应用。
    FxShowMessageBox(g_GetTxtStringFormHtml("0x9002702E"), g_GetTxtStringFormHtml("0x9002C369"), DF_MB_OK, DT_LEFT);

    // 程序成功完成.
    FxShowMessageBox(g_GetTxtStringFormHtml("0x9002702E"), g_GetTxtStringFormHtml("0x0000005B"), DF_MB_OK, DT_LEFT);

    iRet = ClearSysDTC_Programme_538(PTL_CAN_11_500K, CBinary("\x07\x20\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x0728);

    return iRet;

}




// 电源供电维修模式诊断
W_ErrorCode CSeviceFunctionNew::Power_supply_NEW_lansheng_L494_2016()
{
    W_ErrorCode iRet = CErrorCode::EC_SUCCESS;;
    W_I16 iKey = 0;

    CSendFrame sendframe;
    CReceiveFrame rfRet;
    CBinary binRecive;

    //  从车辆检查中得到的 VIN
    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通讯中
    Sleep(800);
    EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x26\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x072E);
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BA51"), g_GetTxtStringFormHtml("0x90023443") + "\n" + "\n" + g_GetTxtStringFormHtml("0x90001288"), DF_MB_NOBUTTON, DT_LEFT);
    CMessageBoxCtrl::SetBusyStatus(true); //漏斗打开
    Sleep(1000);
    CMessageBoxCtrl::SetBusyStatus(false);//漏斗关闭


    // 对于以下实际故障或疑似故障，应该使用供电系统诊断程序进行检查：
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BA51"), g_GetTxtStringFormHtml("0x0000BA52") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BA53")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BA54") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BA55")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BA56") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BA57")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BBAB"), DF_MB_OKCANCEL, DT_LEFT);
    if (iKey == DF_IDCANCEL)
        return iRet;

    // 供电系统诊断程序只有在以下条件得到满足时才应予以执行
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BA51"), g_GetTxtStringFormHtml("0x0000BD38") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BD39")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BD3A") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BD3B")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BD3C") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BD3D")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BD3E") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BD3F")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BD40") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BD41")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BBAB"), DF_MB_OKCANCEL, DT_LEFT);
    if (iKey == DF_IDCANCEL)
        return iRet;

    // 点火打开
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"));
    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通讯中
    Sleep(800);

    EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x16\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x071E);
    SendDataComm(CBinary("\x22\xf1\x03", 3));
    sendframe.SetSendFrame(CBinary("\x22\x40\x29", 3));
    rfRet = SendDataComm(sendframe);
    if (0 == rfRet.GetByteCount())
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    // 本程序将收集并保存电源供电维修模式数据
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BA51"), g_GetTxtStringFormHtml("0x90000D2D")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x90021CB2") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000B0A3"), DF_MB_NOBUTTON, DT_LEFT);
    CMessageBoxCtrl::SetBusyStatus(true); //漏斗打开
    Sleep(1000);
    CMessageBoxCtrl::SetBusyStatus(false);//漏斗关闭
    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通讯中
    Sleep(800);

    // 蓄电池监测系统明示故障
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BA51"), g_GetTxtStringFormHtml("0x90000D1B") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900080B4")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BD8D") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B198")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BD8B") + "\n" + "\n" + g_GetTxtStringFormHtml("0x90000374")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x90000D17") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OK, DT_LEFT);
    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通讯中
    Sleep(800);

    SendDataComm(CBinary("\x22\xf1\x03", 3));
    SendDataComm(CBinary("\x22\xf1\x03", 3));
    sendframe.SetSendFrame(CBinary("\x10\x03", 2));
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount() < 2)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x900019A5"), g_GetTxtStringFormHtml("0x9000D1CE"), DF_MB_OK);//测试失败
        return CErrorCode::EC_TIME_OVER;
    }

    //安全访问
    iRet = SafeLogin_Standard3(CBinary("\x27\x01", 2), 0xB13DE1);
    if (iRet == CErrorCode::EC_ECU_REFUSE)//否定应答
    {
        FxShowMessageBox(FxGetStdString(STD_TTL_MSG_INFORMATION), g_GetTxtStringFormHtml("0x0000B09F"), DF_MB_BACK);//安全访问失败
        return CErrorCode::EC_ECU_REFUSE;
    }
    else if (iRet < 0)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }
    m_pNetLayer->KeepLink(0);//打断链路

    sendframe.SetSendFrame(CBinary("\x31\x01\x20\x27\x00", 5));
    rfRet = SendDataComm(sendframe);
    if (0 == rfRet.GetByteCount())
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }
    m_binRecive = rfRet.GetFirst();
    if (m_binRecive.GetByteCount() < 4 || m_binRecive[0] != 0x71)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000049"), g_GetTxtStringFormHtml("0x0000B0AC"), DF_MB_ANYKEYRETURN, DT_LEFT);//测试失败
        return CErrorCode::EC_DATA;
    }
    m_pNetLayer->KeepLink(3000, CSendFrame(CBinary("\x3E\x80", 2)));    // 打开链路保持
    PleaseWait_xS_haveTTL(5000, g_GetTxtStringFormHtml("0x0000B09D"), g_GetTxtStringFormHtml("0x90021C07"));//电源供电维修模式诊断-请等待
    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通信中
    Sleep(800);
    SendDataComm(CBinary("\x10\x01", 2));
    m_pNetLayer->KeepLink(0); // 断开链路保持

    //Step06 蓄电池监控系统  -  电源供电系统维修模式（00）
    FxShowMessageBox(g_GetTxtStringFormHtml("0x90021C07"), g_GetTxtStringFormHtml("0x90000D28"), DF_MB_OK, DT_LEFT);

    //Step07 点火关闭
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x90008087"));

    return iRet;


}


// 静态电流控制模块内部检查
W_ErrorCode CSeviceFunctionNew::Qcc_module_NEW_lansheng_L494_2016()
{
    W_ErrorCode iRet = CErrorCode::EC_SUCCESS;
    W_I16 iKey = 1000;

    CSendFrame sendframe;
    CReceiveFrame rfRet;
    CBinary binRecive;

    // 本应用程序将检查静态电流控制模块和网关模块之间的通信情况.    
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x90027148"), g_GetTxtStringFormHtml("0x00000069") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BF07")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BF08") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BBAB"), DF_MB_OKCANCEL, DT_LEFT);
    if (DF_IDCANCEL == iKey)
        return iRet;

    // 点火打开
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"), DF_MB_ANYKEYRETURN, DT_LEFT);

    // 按下确定继续
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x90027148"), g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OKCANCEL, DT_LEFT);
    if (DF_IDCANCEL == iKey)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x900019A5"), g_GetTxtStringFormHtml("0x9002C122"), DF_MB_OK);//因用户中止而失败 - 重试程序
        return CErrorCode::EC_TIME_OVER;
    }
    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通讯中
    Sleep(800);

    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x16\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x071e);
    SendDataComm(CBinary("\x22\xf1\x03", 3));
    sendframe.SetSendFrame(CBinary("\x10\x03", 2));
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount() < 2)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_DATA;
    }
    if (checkIs7f(binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"), DF_MB_ANYKEYRETURN, DT_LEFT);//ECU不支持
        return iRet;
    }

    //安全访问
    iRet = SafeLogin_Standard3(CBinary("\x27\x03", 2), 0xB13DE1);

    if (CErrorCode::EC_ECU_REFUSE == iRet)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000B09F"), DF_MB_ANYKEYRETURN, DT_LEFT);//安全访问失败
        return CErrorCode::EC_ECU_REFUSE;
    }
    else if (iRet < 0)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    sendframe.SetSendFrame(CBinary("\x31\x01\x20\x54", 4));  // 07 16 08 04 31 01 20 54 00 00 00
    rfRet = SendDataComm(sendframe);
    if (0 == rfRet.GetByteCount())
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }
    m_binRecive = rfRet.GetFirst();
    if (checkIs7f(m_binRecive))
    {
        SendDataComm(CBinary("\x10\x01", 2));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"), DF_MB_ANYKEYRETURN, DT_LEFT);//ECU不支持
        return iRet;
    }
    if (m_binRecive.GetByteCount() < 4 || m_binRecive[0] != 0x71 || m_binRecive[1] != 1 || m_binRecive[2] != 0x20 || m_binRecive[3] != 0x54)
    {
        SendDataComm(CBinary("\x10\x01", 2));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BF0A"), g_GetTxtStringFormHtml("0x0000B0AC"), DF_MB_ANYKEYRETURN, DT_LEFT);//测试失败
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_ANYKEYRETURN, DT_LEFT);//关闭点火开关
        return iRet;
    }

    sendframe.SetSendFrame(CBinary("\x31\x03\x20\x54", 4));  // 07 16 08 04 31 03 20 54 00 00 00
    rfRet = SendDataComm(sendframe);
    if (0 == rfRet.GetByteCount())
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }
    m_binRecive = rfRet.GetFirst();
    if (checkIs7f(m_binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"), DF_MB_ANYKEYRETURN, DT_LEFT);//ECU不支持
        return iRet;
    }
    if (m_binRecive.GetByteCount() < 4 || m_binRecive[0] != 0x71 || m_binRecive[1] != 3 || m_binRecive[2] != 0x20 || m_binRecive[3] != 0x54)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BF0A"), g_GetTxtStringFormHtml("0x0000B0AC"), DF_MB_ANYKEYRETURN, DT_LEFT);//测试失败
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_ANYKEYRETURN, DT_LEFT);//关闭点火开关
        return iRet;
    }
    m_pNetLayer->KeepLink(0);//断开链路保持
    SendDataComm(CBinary("\x10\x01", 2));

    //step04 完成
    FxShowMessageBox(g_GetTxtStringFormHtml("0x90027148"), g_GetTxtStringFormHtml("0x9000128B") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_ANYKEYRETURN, DT_LEFT);

    //step05 点火关闭
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_ANYKEYRETURN, DT_LEFT);

    //step06 静态电流控制模块内部测试已通过
    FxShowMessageBox(g_GetTxtStringFormHtml("0x90027148"), g_GetTxtStringFormHtml("0x00000069") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BF09")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_ANYKEYRETURN, DT_LEFT);

    return iRet;

}



// 安全带动态收回和释放
W_ErrorCode CSeviceFunctionNew::Belt_release_NEW_lansheng_L494_2016()
{
    W_ErrorCode iRet = 0;
    W_I16 iKey = 0;
    CSendFrame sendframe;
    CReceiveFrame rfRet;
    CBinary binReceive, binCmd;
    string title;
    W_U32 uAddPara = 0;
    CMenuCtrl menuC;
    string str;
    W_U32 uStandValue = 0x4693EB;
    W_I32 P_table[3][8] = { {0x8FE9B9,0xD1455E,0x692F80,0x1DD83D,0xF43756,0x23CA80,0x89123C,0xD98144},
    {0x79A6A5,0x38F867,0xBE76F2,0xB648C8,0xA307BD,0x8CAB46,0xD6C0B0,0x66244D},
    {0x07FDA6,0xC17C70,0x4C6EDD,0x575B97,0x613013,0x09D40A,0xD91D29,0x7CAD7F} };

    // 判断电压
    iRet = CheckEngineStop(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xF4\x0C\x00\x00\x00\x00", 11), 0x07E8, CBinary("\x01\x00", 2));
    if (iRet)
    {
        return iRet;
    }

    // 下列程序将自动测试主动安全带的动态收回和释放操作。
    iRet = FxShowMessageBox(g_GetTxtStringFormHtml("0x9002AF8D"), g_GetTxtStringFormHtml("0x9002AF8D") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002AF94")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BBAB"), DF_MB_OKCANCEL, DT_LEFT);
    if (DF_IDCANCEL == iRet)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000BE88"));//操作人员已中止了此应用程序
        return iRet;
    }

    // 在执行程序期间，检查并确认能够以最大力度将安全带完全收回，然       后在该位置保持约 1 至 3 秒钟再释放
    FxShowMessageBox(g_GetTxtStringFormHtml("0x9002AF8D"), g_GetTxtStringFormHtml("0x00000069") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002AF94")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BD11") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BD12")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BD13") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002AF96")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OK, DT_LEFT);

    // 菜单选择
    menuC.InitCtrl(g_GetTxtStringFormHtml("0x0000C147"));
    menuC.AddOneItem(g_GetTxtStringFormHtml("0x9000A20D"));//右侧
    menuC.AddOneItem(g_GetTxtStringFormHtml("0x9000A20C"));//左侧
    iKey = menuC.ShowCtrl();
    if (iKey == -1)
        return 0;
    else if (iKey == 0)  // 右侧
    {
        binCmd = CBinary("\x07\xD1\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11);
        uAddPara = 0x07D9;
        title = "0x900183AF";
    }
    else if (iKey == 1)  // 左侧
    {
        binCmd = CBinary("\x07\xD4\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11);
        uAddPara = 0x07DC;
        title = "0x0000BD16";
    }

    // 确保打开点火开关
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0001D8E1"), g_GetTxtStringFormHtml("0x90012543"), DF_MB_OK, DT_LEFT);

    PleaseWait_xS_haveTTL(5000, g_GetTxtStringFormHtml("0x0000B8FE,0x900126DD,0x9001283E"), g_GetTxtStringFormHtml("0x0001D8E1"));

    // 右侧/左侧 0x9002AF94    下列程序将自动测试主动安全带的动态收回和释放操作。
    str += g_GetTxtStringFormHtml(title) + "\n" + g_GetTxtStringFormHtml("0x9002AF94") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9000128B") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330");

    FxShowMessageBox(g_GetTxtStringFormHtml("0x0001D8E1"), str, DF_MB_OKCANCEL, DT_LEFT);

    EnterSystem(PTL_CAN_11_500K, binCmd, uAddPara);
    sendframe.SetSendFrame(CBinary("\x10\x03", 2));
    rfRet = SendDataComm(sendframe);
    if (rfRet.GetByteCount() == 0)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }
    if (checkIs7f(rfRet))
    {
        FxShowMessageBox(FxGetStdString(STD_TTL_MSG_INFORMATION), g_GetTxtStringFormHtml("0x0000006A"), DF_MB_BACK);
        return iRet;
    }

    //安全访问
    iRet = SafeLogin_L405_2014_Oil(CBinary("\x27\x03", 2), uStandValue, P_table);  // 07 FD A6

    if (CErrorCode::EC_ECU_REFUSE == iRet)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000B09F"), DF_MB_ANYKEYRETURN, DT_LEFT);//安全访问失败
        return CErrorCode::EC_ECU_REFUSE;
    }
    else if (iRet < 0)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    binReceive = SendDataComm(CBinary("\x31\x01\x50\x05\x00", 4));
    if (binReceive.GetByteCount() == 0)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }
    if (checkIs7f(binReceive))
    {
        FxShowMessageBox(FxGetStdString(STD_TTL_MSG_INFORMATION), g_GetTxtStringFormHtml("0x0000006A"), DF_MB_BACK);
        return iRet;
    }
    if (binReceive.GetByteCount() < 4 || (binReceive[0] != 0x71 || binReceive[1] != 0x01 || binReceive[2] != 0x50 || binReceive[3] != 0x05))
    {
        SendDataComm(CBinary("\x10\x01", 2));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B21F"), DF_MB_ANYKEYRETURN);                //失败
        return 0;
    }


    sendframe.SetSendFrame(CBinary("\x10\x01", 2));
    SendDataComm(sendframe);
    PleaseWait_xS_haveTTL(5000, g_GetTxtStringFormHtml(title), g_GetTxtStringFormHtml("0x0001D8E1"));
    str += g_GetTxtStringFormHtml(title) + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000B0A1");

    // 预警完成
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0001D8E1"), str, DF_MB_OK, DT_LEFT);
    // 确保关闭
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0001D8E1"), g_GetTxtStringFormHtml("0x00000065"));
    // 点火打开
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x9000808A"));
    EnterSystem(PTL_CAN_11_500K, binCmd, uAddPara);
    sendframe.SetSendFrame(CBinary("\x19\x02\x0c", 3));
    rfRet = SendDataComm(sendframe);

    if (iKey == 0) // 右侧
    {
        iRet = ClearSysDTC_Programme_538(PTL_CAN_11_500K, CBinary("\x07\xD1\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x07D9);
        return iRet;
    }
    else  // 左侧
    {
        iRet = ClearSysDTC_Programme_538(PTL_CAN_11_500K, CBinary("\x07\xD4\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x07DC);
        return iRet;
    }

}




// 清除模块学习数据
W_ErrorCode CSeviceFunctionNew::Clear_module_NEW_lansheng_L494_2016()
{
    W_ErrorCode iRet = 0;
    W_I16 iKey = 0;
    CSendFrame sendframe;
    CReceiveFrame rfRet;
    CBinary binAns;
    string strTTL;
    CMenuCtrl menuc;
    CBinary binEnterCmd, binEnterCmd1, binDtcCmd;
    W_U32 iAddr;

    // 判断电压

    iRet = CheckEngineStop(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xF4\x0C\x00\x00\x00\x00", 11), 0x07E8, CBinary("\x01\x00", 2));
    if (iRet != 0)
        return CErrorCode::EC_DATA;

    // 下列程序将删除选定模块自学习数据
    iRet = FxShowMessageBox(g_GetTxtStringFormHtml("0x9002AF8B"), g_GetTxtStringFormHtml("0x9002AF8B") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002AF8C")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BBAB"), DF_MB_OKCANCEL, DT_LEFT);
    if (iRet == DF_IDCANCEL)
        return 0;

    // 菜单选择
    menuc.InitCtrl(g_GetTxtStringFormHtml("0x0000C147"));
    menuc.AddOneItem(g_GetTxtStringFormHtml("0x9000A20D"));  // 右侧
    menuc.AddOneItem(g_GetTxtStringFormHtml("0x0000BD08"));     // 左侧
    iKey = menuc.ShowCtrl();
    if (iKey == -1)
        return 0;

    if (iKey == 0)  // 右侧
    {
        strTTL = g_GetTxtStringFormHtml("0x0000BD15");  // 右侧安全带预紧器
        binEnterCmd = CBinary("\x07\xD1\x08\x02\x10\x03\x00\x00\x00\x00\x00", 11);
        binEnterCmd1 = CBinary("\x07\xD1\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11);
        binDtcCmd = CBinary("\x07\xD1\x08\x03\x19\x02\x0C\x00\x00\x00\x00", 11);
        iAddr = 0x07D9;
    }
    else if (iKey == 1)  // 左侧
    {
        strTTL = g_GetTxtStringFormHtml("0x0000BD16");  // 左侧安全带预紧器
        binEnterCmd = CBinary("\x07\xD4\x08\x02\x10\x03\x00\x00\x00\x00\x00", 11);
        binEnterCmd1 = CBinary("\x07\xD4\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11);
        binDtcCmd = CBinary("\x07\xD4\x08\x03\x19\x02\x0C\x00\x00\x00\x00", 11);
        iAddr = 0x07DC;
    }

    // 确保打开
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml(TXT_HTML_STATE_VALUE_IGNITION_ON));
    PleaseWait_xS(5000, g_GetTxtStringFormHtml("0x0000B8FE") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900126DD"));

    // 下列程序将删除选定模块自学习数据
    iKey = FxShowMessageBox(strTTL, strTTL + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002AF8C") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OKCANCEL, DT_LEFT);
    if (iKey == DF_IDCANCEL)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000BE88"));//操作人员已中止了此应用程序
        return iRet;
    }

    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通讯中
    Sleep(800);

    EnterSystem(PTL_CAN_11_500K, binEnterCmd1, iAddr);
    SendDataComm(CBinary("\x22\xf1\x03", 3));
    iRet = EnterSystem(PTL_CAN_11_500K, binEnterCmd, iAddr);
    if (iRet < 0)
    {
        SendDataComm(CBinary("\x10\x01", 2));
        FxShowMessageBox(FxGetStdString(CBinary("\xFF\x07\x00\x00\x00\x31", 6)), FxGetStdString(CBinary("\xFF\x07\x00\x00\x00\x3A", 6)), DF_MB_OK, DT_LEFT);
        return iRet;
    }

    rfRet = m_rfRet;
    CBinary binRecive = rfRet.GetFirst();
    m_binRecive = CBinary(binRecive.GetBuffer() + 4, binRecive.GetByteCount() - 4);

    if (checkIs7f(m_binRecive))
    {
        SendDataComm(CBinary("\x10\x01", 2));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"), DF_MB_ANYKEYRETURN, DT_LEFT);    //ECU不支持
        return CErrorCode::EC_ECU_REFUSE;
    }

    // 安全访问
    iRet = SafeLogin_Standard3(CBinary("\x27\x03", 2), 0x07FDA6);  // 07 FD A6
    if (iRet == CErrorCode::EC_ECU_REFUSE)
    {
        SendDataComm(CBinary("\x10\x01", 2));
        FxShowMessageBox(FxGetStdString(STD_TTL_MSG_INFORMATION), g_GetTxtStringFormHtml("0x0000B09F"), DF_MB_BACK);
        return CErrorCode::EC_ECU_REFUSE;
    }
    else if (iRet < 0)
    {
        SendDataComm(CBinary("\x10\x01", 2));
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }


    binAns = SendDataComm(CBinary("\x31\x01\x04\x02", 4));
    if (!binAns.GetByteCount())
    {
        SendDataComm(CBinary("\x10\x01", 2));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), FxGetStdString(CBinary("\xFF\x07\x00\x00\x00\x3A", 6)));    //通讯失败
        return 0;
    }
    if (binAns.GetByteCount() < 4 || (binAns[0] != 0x71 || binAns[1] != 0x01 || binAns[2] != 0x04 || binAns[3] != 0x02))
    {
        SendDataComm(CBinary("\x10\x01", 2));
        FxShowMessageBox(strTTL, g_GetTxtStringFormHtml("0x0000B21F"));//失败
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml(TXT_HTML_STATE_VALUE_IGNITION_OFF));
        return 0;
    }
    Sleep(2000);
    SendDataComm(CBinary("\x10\x01", 2));

    // 完成
    FxShowMessageBox(strTTL, strTTL + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000B0A3") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OK, DT_LEFT);

    // 确保关闭
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000065"));

    // 故障码
    iRet = CheckSysDTCNub(PTL_CAN_11_500K, PTL_CAN_11_125K, binDtcCmd, CBinary("\x07\xDF\x08\x04\x14\xFF\xFF\xFF\x00\x00\x00", 11), iAddr);

    return iRet;

}







// 手动归零
W_ErrorCode CSeviceFunctionNew::Hand_zero_NEW_lansheng_L494_2016()
{
    W_ErrorCode iRet = 0;
    // 注意：确保诊断设备未连接至此车。
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0001D8F9") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0001D8FA")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x0001D8FB") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0001D8FC")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x0001D8FE") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0001D8FD")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x0001D8FF") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0001D900")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x0001D901"), DF_MB_OK, DT_LEFT);
    return iRet;
}



// 报警触发历史
W_ErrorCode CSeviceFunctionNew::Alarm_history_NEW_lansheng_L494_2016()
{
    W_ErrorCode iRet = 0;
    W_I16 iKey = 0, i;
    CSendFrame sendframe;
    CReceiveFrame rfRet;
    CBinary binAns;
    string strTemp;
    CActTestCtrl act;
    CBinary bin22C00B("\x62\xC0\x0B\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00", 59);
    CBinary bin2EC00B("\x2E\xC0\x0B\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00", 59);

    // 判断电压
    iRet = CheckEngineStop(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xF4\x0C\x00\x00\x00\x00", 11), 0x07E8, CBinary("\x01\x00", 2));
    if (iRet != 0)
        return CErrorCode::EC_DATA;

    //本应用程序将读取然后显示最近 8 个报警触发事件.   随后系统将提供清除这一数据的选项.
    iRet = FxShowMessageBox(g_GetTxtStringFormHtml("0x9000055E"), g_GetTxtStringFormHtml("0x9001DB74") + "\n" + "\n" + g_GetTxtStringFormHtml("0x90022F8D"), DF_MB_OKCANCEL, DT_LEFT);
    if (iRet == DF_IDCANCEL)
        return 0;

    // 查看这些事件可能有助于诊断车辆反复出现报警的情形
    FxShowMessageBox(g_GetTxtStringFormHtml("0x9000055E"), g_GetTxtStringFormHtml("0x9002BDEF") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BB53")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OK, DT_LEFT);

    // 请注意：下列程序可能需要 1 分钟才能完成.
    FxShowMessageBox(g_GetTxtStringFormHtml("0x9000055E"), g_GetTxtStringFormHtml("0x0000BAF4") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330"), DF_MB_OK, DT_LEFT);

    // 点火打开
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000062"));

    // 等待
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BB50"), g_GetTxtStringFormHtml("0x0000BB54") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000B09B")
        , DF_MB_NOBUTTON, DT_LEFT);

    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x26\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x072e);
    SendDataComm(CBinary("\x22\xf1\x03", 3));
    if (iRet < 0)
    {
        SendDataComm(CBinary("\x10\x01", 2));
        FxShowMessageBox(FxGetStdString(CBinary("\xFF\x07\x00\x00\x00\x31", 6)), FxGetStdString(CBinary("\xFF\x07\x00\x00\x00\x3A", 6)), DF_MB_OK, DT_LEFT);
        return iRet;
    }

    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x26\x08\x03\x22\xC0\x0B\x00\x00\x00\x00", 11), 0x072E);  // 07 26 08 03 22 C0 0B 00 00 00 00
    rfRet = m_rfRet;
    CBinary binRecive = rfRet.GetFirst();
    m_binRecive = CBinary(binRecive.GetBuffer() + 4, binRecive.GetByteCount() - 4);
    binRecive = m_binRecive;
    if (checkIs7f(binRecive))
    {
        SendDataComm(CBinary("\x10\x01", 2));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"), DF_MB_ANYKEYRETURN, DT_LEFT);    //ECU不支持
        return CErrorCode::EC_ECU_REFUSE;
    }

    for (i = 0; i != binRecive.GetByteCount(); i++)
    {
        bin22C00B.SetByteAt(i, binRecive[i]);
    }

    SendDataComm(CBinary("\x10\x01", 2));

    act.InitCtrl(g_GetTxtStringFormHtml("0x0000BB50")); // 报警触发器历史
    act.SetFirstRowFixed(false);
    act.SetColumnWid(65, 35, 0);
    for (i = 1; i != 9; i++)
    {
        //strTemp = "@J_DLC_RECENT_ALARM_TRIG_" + intToString(i);
        //strTemp="RECENT_ALARM_EVENT    ";
        act.AddOneItem("RECENT_ALARM_EVENT        " + intToString(i));
        act.AddOneItem(g_GetTxtStringFormHtml("0x0000BB68"));  // 事件触发年份
        act.AddOneItem(g_GetTxtStringFormHtml("0x0000BB69"));  // 事件触发月份
        act.AddOneItem(g_GetTxtStringFormHtml("0x0000BB6A")); // 事件触发日
        act.AddOneItem(g_GetTxtStringFormHtml("0x0000BB6B")); // 事件触发小时
        act.AddOneItem(g_GetTxtStringFormHtml("0x0000BB6C")); // 事件触发分钟
        act.AddOneItem(g_GetTxtStringFormHtml("0x0000BB6D")); // 事件触发秒钟
    }
    act.AddOneBtn(g_GetTxtStringFormHtml("0x0000BC0D"));

    for (i = 3; i != bin22C00B.GetByteCount(); i++)
    {
        if (!((i - 3) % 7))//每组的第一项
        {
            switch (bin22C00B[i])
            {
            case 0x00: strTemp = g_GetTxtStringFormHtml("0x0000BB55"); break;  // 未出现报警历史
            case 0x01: strTemp = g_GetTxtStringFormHtml("0x0000BB56"); break;  // 驾驶员一侧车门微开
            case 0x02: strTemp = g_GetTxtStringFormHtml("0x0000BB57"); break; // 乘员一侧车门微开
            case 0x03: strTemp = g_GetTxtStringFormHtml("0x0000BB58"); break; // 右后车门微开
            case 0x04: strTemp = g_GetTxtStringFormHtml("0x0000BB59"); break; // 左后车门开启
            case 0x05: strTemp = g_GetTxtStringFormHtml("0x00009AF6"); break; // 尾门
            case 0x06: strTemp = g_GetTxtStringFormHtml("0x0000BB5A"); break; // 发动机罩微开
            case 0x07: strTemp = g_GetTxtStringFormHtml("0x0000960A"); break; // 活动顶篷
            case 0x08: strTemp = g_GetTxtStringFormHtml("0x0000BB5B"); break; // 模块 1 断开
            case 0x09: strTemp = g_GetTxtStringFormHtml("0x0000BB5C"); break; // 模块 2 断开
            case 0x0A: strTemp = g_GetTxtStringFormHtml("0x0000BB5D"); break; // 启动尝试
            case 0x0B: strTemp = g_GetTxtStringFormHtml("0x0000BB5E"); break; // 体积检测传感器
            case 0x0C: strTemp = g_GetTxtStringFormHtml("0x00000BA4"); break; // 倾斜传感器
            case 0x0D: strTemp = g_GetTxtStringFormHtml("0x0000BB60"); break; // 驾驶员一侧车门解锁
            case 0x0E: strTemp = g_GetTxtStringFormHtml("0x0000BB61"); break; // 乘客一侧车门解锁
            case 0x0F: strTemp = g_GetTxtStringFormHtml("0x0000BB62"); break; // 左后车门已解锁
            case 0x10: strTemp = g_GetTxtStringFormHtml("0x0000BB63"); break; // 右后车门已解锁
            case 0x11: strTemp = g_GetTxtStringFormHtml("0x0000BB64"); break; // 从属体积传感器
            case 0x12: strTemp = g_GetTxtStringFormHtml("0x0000BB65"); break; // 应急
            case 0x13: strTemp = g_GetTxtStringFormHtml("0x0000BB66"); break; // 尾门玻璃
            case 0x14: strTemp = g_GetTxtStringFormHtml("0x0000BB67"); break; // 下部尾门
            default: strTemp = g_GetTxtStringFormHtml("0x00009A6A"); break;  // 未定义
            }
            act.SetItemValue(i - 3, strTemp);
        }
        else if (!((i - 4) % 7))//每组的第二项
        {
            act.SetItemValue(i - 3, intToString(2000 + bin22C00B[i]));
        }
        else
        {
            act.SetItemValue(i - 3, intToString(bin22C00B[i]));
        }
    }

    while (1)
    {
        iRet = act.ShowCtrl();
        if (iRet == -1)
        {
            iRet = CheckSysDTCNub(PTL_CAN_11_500K, PTL_CAN_11_125K, CBinary("\x07\x26\x08\x03\x19\x02\x0C\x00\x00\x00\x00", 11), CBinary("\x07\xDF\x08\x04\x14\xFF\xFF\xFF\x00\x00\x00", 11), 0x072E);
            return 0;
        }
        else if (iRet == 0)
            break;
    }
    //Step6
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml(TXT_HTML_STATE_VALUE_IGNITION_OFF));

    // 您想清除报警触发器历史记录吗？
    iRet = FxShowMessageBox(g_GetTxtStringFormHtml("0x9000055E"), g_GetTxtStringFormHtml("0x900080A6") + "\n" + "\n" + g_GetTxtStringFormHtml("0x90025015")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x90022F8D"), DF_MB_OKCANCEL, DT_LEFT);
    if (iRet == DF_IDCANCEL)
    {
        iRet = CheckSysDTCNub(PTL_CAN_11_500K, PTL_CAN_11_125K, CBinary("\x07\x26\x08\x03\x19\x02\x0C\x00\x00\x00\x00", 11), CBinary("\x07\xDF\x08\x04\x14\xFF\xFF\xFF\x00\x00\x00", 11), 0x072E);
        return 0;
    }

    //Step8
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml(TXT_HTML_STATE_VALUE_IGNITION_ON));
    //Step9:
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BB50"), g_GetTxtStringFormHtml("0x0000B09D"), DF_MB_NOBUTTON);

    SendDataComm(CBinary("\x22\xf1\x03", 3));
    SendDataComm(CBinary("\x22\xf1\x03", 3));
    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x26\x08\x02\x10\x03\x00\x00\x00\x00\x00", 11), 0x072E);
    if (iRet < 0)
    {
        SendDataComm(CBinary("\x10\x01", 2));
        FxShowMessageBox(FxGetStdString(CBinary("\xFF\x07\x00\x00\x00\x31", 6)), FxGetStdString(CBinary("\xFF\x07\x00\x00\x00\x3A", 6)), DF_MB_OK, DT_LEFT);
        return iRet;
    }

    rfRet = m_rfRet;
    binRecive = rfRet.GetFirst();
    m_binRecive = CBinary(binRecive.GetBuffer() + 4, binRecive.GetByteCount() - 4);

    if (checkIs7f(m_binRecive))
    {
        SendDataComm(CBinary("\x10\x01", 2));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"), DF_MB_ANYKEYRETURN, DT_LEFT);    //ECU不支持
        return CErrorCode::EC_ECU_REFUSE;
    }

    iRet = SafeLogin_Standard3(CBinary("\x27\x03", 2), 0xE8E241);  // E8 E2 41
    if (iRet == CErrorCode::EC_ECU_REFUSE)
    {
        FxShowMessageBox(FxGetStdString(STD_TTL_MSG_INFORMATION), g_GetTxtStringFormHtml("0x0000B09F"), DF_MB_BACK);
        return CErrorCode::EC_ECU_REFUSE;
    }
    else if (iRet < 0)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    binAns = SendDataComm(bin2EC00B);  // 07 26 08 10 3B 2E C0 0B 00 00 00
    if (!binAns.GetByteCount())
    {
        SendDataComm(CBinary("\x10\x01", 2));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), FxGetStdString(CBinary("\xFF\x07\x00\x00\x00\x3A", 6)));    //通讯失败
        return 0;
    }
    if (binAns.GetByteCount() < 3 || (binAns[0] != 0x6E || binAns[1] != 0xC0 || binAns[2] != 0x0B))
    {
        SendDataComm(CBinary("\x10\x01", 2));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BB50"), g_GetTxtStringFormHtml("0x0000B0AC"));//测试失败
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml(TXT_HTML_STATE_VALUE_IGNITION_OFF));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000069"), g_GetTxtStringFormHtml("0x0000006A,0x0000006B"));
        return 0;
    }
    Sleep(2000);
    SendDataComm(CBinary("\x10\x01", 2));
    m_pNetLayer->KeepLink(0);

    //S
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BB50"), g_GetTxtStringFormHtml("0x0000B0A3"));//完成

    // 故障码
    iRet = ClearSysDTC_Programme_538(PTL_CAN_11_500K, CBinary("\x07\x26\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x072E);

    return iRet;

}




// 一键自动归零
W_ErrorCode CSeviceFunctionNew::Auto_hand_zero_NEW_lansheng_L494_2016()
{
    W_ErrorCode iRet = 0;
    W_I16 iKey = 0;
    CSendFrame sendframe;
    CReceiveFrame rfRet;
    string strTemp;

    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"));//将点火开关打开（位置 2）

    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B111"), DF_MB_YESNO, DT_LEFT);//您要继续了吗？
    if (iKey == DF_IDCANCEL)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B8D1"));//操作人员已中止了此应用程序
        return iRet;
    }

    EnterSystem(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x02\x10\x03\x00\x00\x00\x00\x00", 11), 0x07E8);
    m_pNetLayer->KeepLink(1000, CSendFrame(CBinary("\x3E\x80", 2)));//链路保持
    sendframe.SetSendFrame(CBinary("\x31\x01\x40\x24", 4));  // 07 E0 08 04 31 01 40 24 00 00 00
    rfRet = SendDataComm(sendframe);
    m_binRecive = rfRet.GetFirst();
    if (m_binRecive.GetByteCount() < 4 || m_binRecive.GetByteAt(0) != 0x71 || m_binRecive.GetByteAt(1) != 0x01 || m_binRecive.GetByteAt(2) != 0x40 || m_binRecive.GetByteAt(3) != 0x24)
    {
        FxShowMessageBox(strTemp, g_GetTxtStringFormHtml("0x0000B8E0,0x0000B8E6,0x0000B0AC"), DF_MB_OK, DT_LEFT);
        SendDataComm(CBinary("\x10\x01", 2));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BA0D"), g_GetTxtStringFormHtml("0x0000BA0E"), DF_MB_OK, DT_LEFT);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));
        return 0;
    }

    sendframe.SetSendFrame(CBinary("\x10\x01", 2));
    rfRet = SendDataComm(sendframe);
    m_pNetLayer->KeepLink(0);//链路断开

    PleaseWait_xS_haveTTL(1000, g_GetTxtStringFormHtml("0x0000B09B"), g_GetTxtStringFormHtml("0x0000B11C,")); // 请等待

    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B0A3"), DF_MB_ANYKEYRETURN, DT_LEFT);//完成

    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_ANYKEYRETURN, DT_LEFT);//关闭点火开关（位置 0）

    iRet = ClearAllFaultCodes3(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x19\x02\x0C\x00\x00\x00\x00", 11), 0x07E8, g_GetTxtStringFormHtml("0xFF010007"));

    return iRet;

}




// 刹车片更换(操作向导)
W_ErrorCode CSeviceFunctionNew::Brake_pad_replacement_NEW_lansheng_L494_2016()
{
    W_ErrorCode iRet = 0;
    CSendFrame sendframe;
    CReceiveFrame rfRet;
    string strTemp;

    CBinary binRecive;
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0xFF010004"), DF_MB_ANYKEYRETURN, DT_LEFT);//请释放手刹制动

    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x00000096"), DF_MB_ANYKEYRETURN, DT_LEFT);//确保发动机在运转

    EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x56\x08\x02\x10\x03\x00\x00\x00\x00\x00", 11), 0x075E);

    //安全访问
    iRet = SafeLogin_Standard3(CBinary("\x27\x01", 2), 0xD88E2A);// D8 8E 2A
    if (iRet < 0)
    {
        if (CErrorCode::EC_ECU_REFUSE == iRet)
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000B09F"), DF_MB_ANYKEYRETURN, DT_LEFT);//安全访问失败
        else
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);

        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        //链路：11位can500k
        iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x26\x08\x05\x31\x01\x20\x38\x01\x00\x00", 11), 0x072E);
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);

        //链路：11位can125k
        iRet = EnterSystem(PTL_CAN_11_125K, CBinary("\x07\x31\x08\x02\x11\x01\x00\x00\x00\x00\x00", 11), 0x0739);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000C2E6"), DF_MB_ANYKEYRETURN, DT_LEFT);//过程未完成
        return CErrorCode::EC_DATA;
    }
    m_pNetLayer->KeepLink(1000, CSendFrame(CBinary("\x3E\x80", 2)));//链路保持

    sendframe.SetSendFrame(CBinary("\x31\x01\x30\x02", 4));  // 07 56 08 04 31 01 30 02 00 00 00
    rfRet = SendDataComm(sendframe);
    m_binRecive = rfRet.GetFirst();
    if (checkIs7f(m_binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"), DF_MB_ANYKEYRETURN, DT_LEFT);//ECU不支持
        sendframe.SetSendFrame(CBinary("\x31\x01\x20\x38\x01", 5));
        rfRet = SendDataComm(sendframe);
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        //断开链路
        m_pNetLayer->KeepLink(0);
        //链路：11位can125k
        iRet = EnterSystem(PTL_CAN_11_125K, CBinary("\x07\x31\x08\x02\x11\x01\x00\x00\x00\x00\x00", 11), 0x0739);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000C2E6"), DF_MB_ANYKEYRETURN, DT_LEFT);//过程未完成
        return CErrorCode::EC_DATA;
    }

    if (m_binRecive.GetByteCount() < 4 || m_binRecive[0] != 0x71 || m_binRecive[1] != 0x01 || m_binRecive[2] != 0x30 || m_binRecive[3] != 0x02)
    {
        sendframe.SetSendFrame(CBinary("\x31\x01\x20\x38\x01", 5));
        rfRet = SendDataComm(sendframe);
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        //断开链路
        m_pNetLayer->KeepLink(0);
        //链路：11位can125k
        iRet = EnterSystem(PTL_CAN_11_125K, CBinary("\x07\x31\x08\x02\x11\x01\x00\x00\x00\x00\x00", 11), 0x0739);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x9002C36A"), DF_MB_ANYKEYRETURN, DT_LEFT);//过程未完成
        return CErrorCode::EC_DATA;
    }

    sendframe.SetSendFrame(CBinary("\x31\x03\x30\x02", 4));  // 07 56 08 04 31 03 30 02 00 00 00
    rfRet = SendDataComm(sendframe);
    m_binRecive = rfRet.GetFirst();
    if (checkIs7f(m_binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"), DF_MB_ANYKEYRETURN, DT_LEFT);//ECU不支持
        sendframe.SetSendFrame(CBinary("\x31\x01\x20\x38\x01", 5));
        rfRet = SendDataComm(sendframe);
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        //断开链路
        m_pNetLayer->KeepLink(0);
        //链路：11位can125k
        iRet = EnterSystem(PTL_CAN_11_125K, CBinary("\x07\x31\x08\x02\x11\x01\x00\x00\x00\x00\x00", 11), 0x0739);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000C2E6"), DF_MB_ANYKEYRETURN, DT_LEFT);//过程未完成
        return CErrorCode::EC_DATA;
    }

    if (m_binRecive.GetByteCount() < 4 || m_binRecive[0] != 0x71 || m_binRecive[1] != 0x03 || m_binRecive[2] != 0x30 || m_binRecive[3] != 0x02)
    {
        sendframe.SetSendFrame(CBinary("\x31\x01\x20\x38\x01", 5));
        rfRet = SendDataComm(sendframe);
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        //断开链路
        m_pNetLayer->KeepLink(0);
        //链路：11位can125k
        iRet = EnterSystem(PTL_CAN_11_125K, CBinary("\x07\x31\x08\x02\x11\x01\x00\x00\x00\x00\x00", 11), 0x0739);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x9002C36A"), DF_MB_ANYKEYRETURN, DT_LEFT);//过程未完成
        return CErrorCode::EC_DATA;
    }

    sendframe.SetSendFrame(CBinary("\x10\x01", 2));
    rfRet = SendDataComm(sendframe);

    // 更换刹车片
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B197") + "\n" + "\n" + g_GetTxtStringFormHtml("0xFF010001")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000B1B2") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_ANYKEYRETURN, DT_LEFT);//请释放手刹制动

    sendframe.SetSendFrame(CBinary("\x10\x03", 2));
    rfRet = SendDataComm(sendframe);
    iRet = SafeLogin_Standard3(CBinary("\x27\x01", 2), 0xD88E2A);//OK

    m_pNetLayer->KeepLink(1000, CSendFrame(CBinary("\x3E\x80", 2)));//链路保持
    if (iRet < 0)
    {
        if (CErrorCode::EC_ECU_REFUSE == iRet)
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000B09F"), DF_MB_ANYKEYRETURN, DT_LEFT);//安全访问失败
        else
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);

        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        //链路：11位can500k
        iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x26\x08\x05\x31\x01\x20\x38\x01\x00\x00", 11), 0x072E);
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);

        //链路：11位can125k
        iRet = EnterSystem(PTL_CAN_11_125K, CBinary("\x07\x31\x08\x02\x11\x01\x00\x00\x00\x00\x00", 11), 0x0739);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000C2E6"), DF_MB_ANYKEYRETURN, DT_LEFT);//过程未完成
        return CErrorCode::EC_DATA;
    }

    sendframe.SetSendFrame(CBinary("\x31\x01\x30\x2D", 4));  // 07 56 08 04 31 03 30 2D 00 00 00
    rfRet = SendDataComm(sendframe);
    m_binRecive = rfRet.GetFirst();
    if (checkIs7f(m_binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"), DF_MB_ANYKEYRETURN, DT_LEFT);//ECU不支持
        sendframe.SetSendFrame(CBinary("\x31\x01\x20\x38\x01", 5));
        rfRet = SendDataComm(sendframe);
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        //断开链路
        m_pNetLayer->KeepLink(0);
        //链路：11位can125k
        iRet = EnterSystem(PTL_CAN_11_125K, CBinary("\x07\x31\x08\x02\x11\x01\x00\x00\x00\x00\x00", 11), 0x0739);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000C2E6"), DF_MB_ANYKEYRETURN, DT_LEFT);//过程未完成
        return CErrorCode::EC_DATA;
    }

    if (m_binRecive.GetByteCount() < 4 || m_binRecive[0] != 0x71 || m_binRecive[1] != 0x01 || m_binRecive[2] != 0x30 || m_binRecive[3] != 0x2D)
    {
        sendframe.SetSendFrame(CBinary("\x31\x01\x20\x38\x01", 5));
        rfRet = SendDataComm(sendframe);
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        //断开链路
        m_pNetLayer->KeepLink(0);
        //链路：11位can125k
        iRet = EnterSystem(PTL_CAN_11_125K, CBinary("\x07\x31\x08\x02\x11\x01\x00\x00\x00\x00\x00", 11), 0x0739);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x9002C36A"), DF_MB_ANYKEYRETURN, DT_LEFT);//过程未完成
        return CErrorCode::EC_DATA;
    }

    sendframe.SetSendFrame(CBinary("\x31\x03\x30\x2D", 4));
    rfRet = SendDataComm(sendframe);
    m_binRecive = rfRet.GetFirst();
    if (checkIs7f(m_binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"), DF_MB_ANYKEYRETURN, DT_LEFT);//ECU不支持
        sendframe.SetSendFrame(CBinary("\x31\x01\x20\x38\x01", 5));
        rfRet = SendDataComm(sendframe);
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        //断开链路
        m_pNetLayer->KeepLink(0);
        //链路：11位can125k
        iRet = EnterSystem(PTL_CAN_11_125K, CBinary("\x07\x31\x08\x02\x11\x01\x00\x00\x00\x00\x00", 11), 0x0739);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000C2E6"), DF_MB_ANYKEYRETURN, DT_LEFT);//过程未完成
        return CErrorCode::EC_DATA;
    }

    if (m_binRecive.GetByteCount() < 4 || m_binRecive[0] != 0x71 || m_binRecive[1] != 0x03 || m_binRecive[2] != 0x30 || m_binRecive[3] != 0x2D)
    {
        sendframe.SetSendFrame(CBinary("\x31\x01\x20\x38\x01", 5));
        rfRet = SendDataComm(sendframe);
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        //断开链路
        m_pNetLayer->KeepLink(0);
        //链路：11位can125k
        iRet = EnterSystem(PTL_CAN_11_125K, CBinary("\x07\x31\x08\x02\x11\x01\x00\x00\x00\x00\x00", 11), 0x0739);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x9002C36A"), DF_MB_ANYKEYRETURN, DT_LEFT);//过程未完成
        return CErrorCode::EC_DATA;
    }

    sendframe.SetSendFrame(CBinary("\x10\x01", 2));
    rfRet = SendDataComm(sendframe);
    //断开链路
    m_pNetLayer->KeepLink(0);
    iRet = ClearAllFaultCodes3(PTL_CAN_11_500K, CBinary("\x07\x56\x08\x03\x19\x02\x0C\x00\x00\x00\x00", 11), 0x075E, g_GetTxtStringFormHtml("0xFF010005"));

    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0xFF010002"), DF_MB_ANYKEYRETURN, DT_LEFT);//请闭合手刹制动

    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0xFF010003"), DF_MB_ANYKEYRETURN, DT_LEFT);//后刹车片更换完成

    return iRet;

}



// L550_2015刹车片
W_ErrorCode CSeviceFunctionNew::BRAKE_Replacement_L550_2015()
{
    W_ErrorCode iRet = 0;
    CSendFrame sendframe;
    CReceiveFrame rfRet;
    string strTemp;

    CBinary binRecive;
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0xFF010004"), DF_MB_ANYKEYRETURN, DT_LEFT);//请释放手刹制动

    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x00000011"), DF_MB_ANYKEYRETURN, DT_LEFT);// 点火打开

    EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x60\x08\x02\x10\x03\x00\x00\x00\x00\x00", 11), 0x0768);

    //安全访问
    iRet = SafeLogin_Standard3(CBinary("\x27\x03", 2), 0x4BAC74);// 4B AC 74
    if (iRet < 0)
    {
        if (CErrorCode::EC_ECU_REFUSE == iRet)
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000B09F"), DF_MB_ANYKEYRETURN, DT_LEFT);//安全访问失败
        else
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);

        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        //链路：11位can500k
        iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x26\x08\x05\x31\x01\x20\x38\x01\x00\x00", 11), 0x072E);
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);

        //链路：11位can125k
        iRet = EnterSystem(PTL_CAN_11_125K, CBinary("\x07\x31\x08\x02\x11\x01\x00\x00\x00\x00\x00", 11), 0x0739);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000C2E6"), DF_MB_ANYKEYRETURN, DT_LEFT);//过程未完成
        return CErrorCode::EC_DATA;
    }
    m_pNetLayer->KeepLink(1000, CSendFrame(CBinary("\x3E\x80", 2)));//链路保持

    sendframe.SetSendFrame(CBinary("\x31\x01\x30\x02", 4));  // 07 60 08 04 31 01 30 02 00 00 00
    rfRet = SendDataComm(sendframe);
    m_binRecive = rfRet.GetFirst();
    if (checkIs7f(m_binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"), DF_MB_ANYKEYRETURN, DT_LEFT);//ECU不支持
        sendframe.SetSendFrame(CBinary("\x31\x01\x20\x38\x01", 5));
        rfRet = SendDataComm(sendframe);
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        //断开链路
        m_pNetLayer->KeepLink(0);
        //链路：11位can125k
        iRet = EnterSystem(PTL_CAN_11_125K, CBinary("\x07\x31\x08\x02\x11\x01\x00\x00\x00\x00\x00", 11), 0x0739);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000C2E6"), DF_MB_ANYKEYRETURN, DT_LEFT);//过程未完成
        return CErrorCode::EC_DATA;
    }

    if (m_binRecive.GetByteCount() < 4 || m_binRecive[0] != 0x71 || m_binRecive[1] != 0x01 || m_binRecive[2] != 0x30 || m_binRecive[3] != 0x02)
    {
        sendframe.SetSendFrame(CBinary("\x31\x01\x20\x38\x01", 5));
        rfRet = SendDataComm(sendframe);
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        //断开链路
        m_pNetLayer->KeepLink(0);
        //链路：11位can125k
        iRet = EnterSystem(PTL_CAN_11_125K, CBinary("\x07\x31\x08\x02\x11\x01\x00\x00\x00\x00\x00", 11), 0x0739);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x9002C36A"), DF_MB_ANYKEYRETURN, DT_LEFT);//过程未完成
        return CErrorCode::EC_DATA;
    }

    sendframe.SetSendFrame(CBinary("\x10\x01", 2));
    rfRet = SendDataComm(sendframe);

    // 更换刹车片
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B197") + "\n" + "\n" + g_GetTxtStringFormHtml("0xFF010001")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000B1B2") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_ANYKEYRETURN, DT_LEFT);//请释放手刹制动

    sendframe.SetSendFrame(CBinary("\x10\x03", 2));
    rfRet = SendDataComm(sendframe);
    iRet = SafeLogin_Standard3(CBinary("\x27\x03", 2), 0x4BAC74);

    m_pNetLayer->KeepLink(1000, CSendFrame(CBinary("\x3E\x80", 2)));//链路保持
    if (iRet < 0)
    {
        if (CErrorCode::EC_ECU_REFUSE == iRet)
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000B09F"), DF_MB_ANYKEYRETURN, DT_LEFT);//安全访问失败
        else
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);

        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        //链路：11位can500k
        iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x26\x08\x05\x31\x01\x20\x38\x01\x00\x00", 11), 0x072E);
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);

        //链路：11位can125k
        iRet = EnterSystem(PTL_CAN_11_125K, CBinary("\x07\x31\x08\x02\x11\x01\x00\x00\x00\x00\x00", 11), 0x0739);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000C2E6"), DF_MB_ANYKEYRETURN, DT_LEFT);//过程未完成
        return CErrorCode::EC_DATA;
    }

    sendframe.SetSendFrame(CBinary("\x31\x01\x30\x2D", 4));  // 07 60 08 04 31 03 30 2D 00 00 00
    rfRet = SendDataComm(sendframe);
    m_binRecive = rfRet.GetFirst();
    if (checkIs7f(m_binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"), DF_MB_ANYKEYRETURN, DT_LEFT);//ECU不支持
        sendframe.SetSendFrame(CBinary("\x31\x01\x20\x38\x01", 5));
        rfRet = SendDataComm(sendframe);
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        //断开链路
        m_pNetLayer->KeepLink(0);
        //链路：11位can125k
        iRet = EnterSystem(PTL_CAN_11_125K, CBinary("\x07\x31\x08\x02\x11\x01\x00\x00\x00\x00\x00", 11), 0x0739);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000C2E6"), DF_MB_ANYKEYRETURN, DT_LEFT);//过程未完成
        return CErrorCode::EC_DATA;
    }

    if (m_binRecive.GetByteCount() < 4 || m_binRecive[0] != 0x71 || m_binRecive[1] != 0x01 || m_binRecive[2] != 0x30 || m_binRecive[3] != 0x2D)
    {
        sendframe.SetSendFrame(CBinary("\x31\x01\x20\x38\x01", 5));
        rfRet = SendDataComm(sendframe);
        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
        rfRet = SendDataComm(sendframe);
        //断开链路
        m_pNetLayer->KeepLink(0);
        //链路：11位can125k
        iRet = EnterSystem(PTL_CAN_11_125K, CBinary("\x07\x31\x08\x02\x11\x01\x00\x00\x00\x00\x00", 11), 0x0739);
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x9002C36A"), DF_MB_ANYKEYRETURN, DT_LEFT);//过程未完成
        return CErrorCode::EC_DATA;
    }

    sendframe.SetSendFrame(CBinary("\x10\x01", 2));
    rfRet = SendDataComm(sendframe);
    //断开链路
    m_pNetLayer->KeepLink(0);
    iRet = ClearAllFaultCodes3(PTL_CAN_11_500K, CBinary("\x07\x60\x08\x03\x19\x02\x0C\x00\x00\x00\x00", 11), 0x0768, g_GetTxtStringFormHtml("0xFF010005"));

    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0xFF010002"), DF_MB_ANYKEYRETURN, DT_LEFT);//请闭合手刹制动

    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0xFF010003"), DF_MB_ANYKEYRETURN, DT_LEFT);//后刹车片更换完成

    return iRet;


}




// 平视显示器冷却风扇模块
W_ErrorCode CSeviceFunctionNew::HeadUpDisplay_Cooling_Module_00F0005E_L550_2015()
{
    W_ErrorCode iRet = CErrorCode::EC_SUCCESS;
    CSendFrame sendframe;
    CReceiveFrame rfRet;
    W_I16 iKey = 0;
    string strOpenFile = m_stropenfileConfigMenu;

    //step1 确保在继续执行该程序前，已给车辆装配了一个新的模块
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000C044,0x80001618"), DF_MB_OKCANCEL, DT_LEFT);
    if (DF_IDCANCEL == iKey)
        return iRet;

    // 判断文件和系统电压
    iKey = CheckEngineStop(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xF4\x0C\x00\x00\x00\x00", 11), 0x07E8, CBinary("\x01\x00", 2));
    if (iRet)
        return iRet;

    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"));//将点火开关打开
    PleaseWait_xS_haveTTL(10000, g_GetTxtStringFormHtml("0x00000066"), g_GetTxtStringFormHtml("0x0000B8FE,0x9001283E")); // 进度条s，模块初始化

    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"));//将点火开关打开

    if ("module_special_L320_2010" == strOpenFile)
        // 执行读取故障码的功能
        iRet = ClearSysDTC_Programme_538(PTL_CAN_11_500K, CBinary("\x07\x64\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x076C);
    else
        iRet = CheckSysDTCNub_model1(PTL_CAN_11_500K, PTL_CAN_11_125K, CBinary("\x07\x64\x08\x03\x19\x02\x0C\x00\x00\x00\x00", 11), CBinary("\x07\xDF\x08\x04\x14\xFF\xFF\xFF\x00\x00\x00", 11), 0x076C);

    if ("module_special_L320_2010" == strOpenFile
        || "module_special_L320_2012" == strOpenFile
        || "module_special_X351_2013" == strOpenFile
        || "module_special_L322_2010" == strOpenFile
        || "module_special_X150_2010" == strOpenFile)
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"));

    return iRet;
}





W_ErrorCode CSeviceFunctionNew::Speed_Control_Module_00F0009A_L550_2015_Kind()
{
    W_ErrorCode iRet = CErrorCode::EC_SUCCESS;
    CSendFrame sendframe;
    CReceiveFrame rfRet;
    W_I16 iKey = 0;

    W_U32 uStandValue1 = 0x981BB4;
    W_I32 P_table1[3][8] = { {0x5161E6,0x0FCD01,0xB7A7DF,0xC35062,0x2ABF09,0xFD42DF,0x579A63,0x07091B},
    {0xA72EFA,0xE67038,0x60FEAD,0x68C097,0x7D8FE2,0x522319,0x0848EF,0xB8AC12},
    {0xD975F9,0x1FF42F,0x92E682,0x89D3C8,0xBFB84C,0xD75C55,0x079576,0xA22520} };

    W_U32 uStandValue2 = 0x16EA79;
    W_I32 P_table2[3][8] = { {0xDF902B,0x813CCC,0x395612,0x4DA1AF,0xA44EC4,0x73B312,0xD96BAE,0x89F8D6},
    {0x29DF37,0x6881F5,0xEE0F60,0xE6315A,0xF37E2F,0xDCD2D4,0x86B922,0x365DDF},
    {0x578434,0x9105E2,0x1C174F,0x072205,0x314981,0x59AD98,0x8964BB,0x2CD4ED} };

    //step1
    //确保在继续执行该程序前，已给车辆装配了一个新的模块
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000C044,0x80001618"), DF_MB_OKCANCEL, DT_LEFT);
    if (DF_IDCANCEL == iKey)
        return iRet;

    //step2
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"));//将点火开关打开
    PleaseWait_xS_haveTTL(10000, g_GetTxtStringFormHtml("0x00000066,0x9001283E"), g_GetTxtStringFormHtml("0x0000B8FE")); // 初始化进度条  10s
    //对于还未输入车辆标识号的模块，程序要求将车辆标识号作为车辆配置的一部分传输，并写入模块.  如果以前记忆了车辆标识号，本程序将反馈指示未成功操作的状态.  使用该程序无法覆盖以前输入的车辆标识号.
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A61"), g_GetTxtStringFormHtml("0x0000C045,0x0000BD33,0x900012B4"), DF_MB_OKCANCEL, DT_LEFT);
    if (DF_IDCANCEL == iKey)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("@OprInfo$"), g_GetTxtStringFormHtml("0x0000B8D1"));//操作人员已中止了此应用程序
        return iRet;
    }

    //step3
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000C045"), g_GetTxtStringFormHtml("0x0000B09D"), DF_MB_NOBUTTON); // 请等待
    Sleep(500);
    //链路：11位can500K
    EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x64\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x076C);
    SendDataComm(CBinary("\x22\xf1\x03", 3));
    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x64\x08\x02\x10\x03\x00\x00\x00\x00\x00", 11), 0x076C);
    if (iRet)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    rfRet = m_rfRet;
    CBinary binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount() < 5)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    m_binRecive = CBinary(binRecive.GetBuffer() + 4, binRecive.GetByteCount() - 4);
    if (checkIs7f(m_binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return CErrorCode::EC_ECU_REFUSE;
    }

    string strOpenFile = m_stropenfileConfigMenu;
    CJLRStringOperate strOpt;
    strOpt.Replace(strOpenFile, ".ctv", "");

    //安全访问
    if ("module_special_X250_2010" == strOpenFile || "module_special_X250" == strOpenFile || "module_special_L322_2010" == strOpenFile)
        iRet = SafeLogin_L405_2014_Oil(CBinary("\x27\x01", 2), uStandValue1, P_table1);
    else
        iRet = SafeLogin_L405_2014_Oil(CBinary("\x27\x01", 2), uStandValue2, P_table2);

    if (CErrorCode::EC_ECU_REFUSE == iRet)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000B09F"));//安全访问失败
        return CErrorCode::EC_ECU_REFUSE;
    }
    if (iRet < 0)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }
    //链路保持
    m_pNetLayer->KeepLink(1000, CSendFrame(CBinary("\x3E\x80", 2)));

    //step4
    CVehicleComm ecuInter;
    sendframe.SetSendFrame(CBinary("\x31\x01\x04\x04", 4)); // 发送数据,1-1
    rfRet = SendDataComm(sendframe);
    if (0 == rfRet.GetByteCount())
    {
        ecuInter.SendReceive(CBinary("\x40\x00\x07\x64\x10\x01", 6));
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    m_binRecive = rfRet.GetFirst();
    if (checkIs7f(m_binRecive))
    {
        ecuInter.SendReceive(CBinary("\x40\x00\x07\x64\x10\x01", 6));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return CErrorCode::EC_ECU_REFUSE;
    }

    if (m_binRecive.GetByteCount() < 4  // Req: 07 64 08 04 31 01 04 04 00 00 00
        || m_binRecive[0] != 0x71
        || m_binRecive[1] != 0x01
        || m_binRecive[2] != 0x04
        || m_binRecive[3] != 0x04)
    {
        ecuInter.SendReceive(CBinary("\x40\x00\x07\x64\x10\x01", 6));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000C045"), g_GetTxtStringFormHtml("0x0000B21F"));//失败
        return iRet;
    }

    //step5
    PleaseWait_xS(10000, g_GetTxtStringFormHtml("0x0000C045")); // 学习车辆标识号进度条   30s
    ecuInter.SendReceive(CBinary("\x40\x00\x07\x64\x10\x01", 6));
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000C045"), g_GetTxtStringFormHtml("0x90025FAD,0x0000B0A3,0x900012B4"), DF_MB_OK, DT_LEFT);//学习车辆标识号完成
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x90008087"));//关闭点火开关
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x9000808A"));//将点火开关打开
    // 点火开关打开后，进入读故障码
    //step6
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BEC2"), g_GetTxtStringFormHtml("0x0000BEC8"), DF_MB_NOBUTTON); // 允许进入电子校准
    Sleep(300);

    if ("module_special_L320_2010" == strOpenFile)
        // 执行读取故障码的功能
        iRet = ClearSysDTC_Programme_538(PTL_CAN_11_500K, CBinary("\x07\x64\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x076C);
    else
        iRet = CheckSysDTCNub_model1(PTL_CAN_11_500K, PTL_CAN_11_125K, CBinary("\x07\x64\x08\x03\x19\x02\x0C\x00\x00\x00\x00", 11), CBinary("\x07\xDF\x08\x04\x14\xFF\xFF\xFF\x00\x00\x00", 11), 0x076C);

    if ("module_special_L320_2010" == strOpenFile
        || "module_special_L320_2012" == strOpenFile
        || "module_special_X351_2013" == strOpenFile
        || "module_special_L322_2010" == strOpenFile
        || "module_special_X150_2010" == strOpenFile)
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"));

    //链路：11位can500K
    SendDataComm(CBinary("\x22\xf1\x03", 3));
    SendDataComm(CBinary("\x22\xf1\x03", 3));
    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x64\x08\x02\x10\x03\x00\x00\x00\x00\x00", 11), 0x076C);
    if (iRet)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    rfRet = m_rfRet;
    binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount() < 5)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    m_binRecive = CBinary(binRecive.GetBuffer() + 4, binRecive.GetByteCount() - 4);
    if (checkIs7f(m_binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return CErrorCode::EC_ECU_REFUSE;
    }

    //安全访问
    if ("module_special_X250_2010" == strOpenFile || "module_special_X250" == strOpenFile || "module_special_L322_2010" == strOpenFile)
        iRet = SafeLogin_L405_2014_Oil(CBinary("\x27\x01", 2), uStandValue1, P_table1);  // 57 84 34
    else
        iRet = SafeLogin_L405_2014_Oil(CBinary("\x27\x01", 2), uStandValue2, P_table2);

    if (CErrorCode::EC_ECU_REFUSE == iRet)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000B09F"));//安全访问失败
        return CErrorCode::EC_ECU_REFUSE;
    }
    if (iRet < 0)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }
    //链路保持
    m_pNetLayer->KeepLink(1000, CSendFrame(CBinary("\x3E\x80", 2)));

    //step7
    sendframe.SetSendFrame(CBinary("\x2E\xA2\x2A\x03", 4));  // Req: 07 64 08 04 2E A2 2A 03 00 00 00
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();  // 07 6C 08 03 6E A2 2A 00 00 00 00

    sendframe.SetSendFrame(CBinary("\x2E\xA2\x2B\x00", 4));  //  Req: 07 64 08 04 2E A2 2B 00 00 00 00
    rfRet = SendDataComm(sendframe);
    m_binRecive = rfRet.GetFirst();  // 07 6C 08 03 6E A2 2B 00 00 00 00

    ecuInter.SendReceive(CBinary("\x40\x00\x07\x64\x10\x01", 6));  // Req: 07 64 08 02 10 01 00 00 00 00 00
    if (0 == binRecive.GetByteCount() || 0 == m_binRecive.GetByteCount())
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    if (checkIs7f(binRecive) || checkIs7f(m_binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return CErrorCode::EC_ECU_REFUSE;
    }

    if (binRecive.GetByteCount() != 3  // 0017:07 6C 08 03 6E A2 2A 00 00 00 00
        || m_binRecive.GetByteCount() != 3  // 0018:07 6C 08 03 6E A2 2B 00 00 00 0
        || binRecive[0] != 0x6E
        || binRecive[1] != 0xA2
        || binRecive[2] != 0x2A
        || m_binRecive[0] != 0x6E
        || m_binRecive[1] != 0xA2
        || m_binRecive[2] != 0x2B)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BEC2"), g_GetTxtStringFormHtml("0x0000B0AC"));//测试失败
        return iRet;
    }

    //step8
    //FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BEC2"),g_GetTxtStringFormHtml("0x0000B0A3"));//电子校准状态完成
    PleaseWait_xS(2000, g_GetTxtStringFormHtml("0x0000BEC2,0x9000CF6A"));
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BEC2"), g_GetTxtStringFormHtml("0x0000BEC8,0x0000B0A3"), DF_MB_NOBUTTON); //本程序将令速度控制系统进入校准模式
    m_pNetLayer->KeepLink(0);

    Sleep(200);
    //链路：11位can500K
    SendDataComm(CBinary("\x22\xf1\x03", 3));
    SendDataComm(CBinary("\x22\xf1\x03", 3));
    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\x64\x08\x02\x10\x01\x00\x00\x00\x00\x00", 11), 0x076C);  // 进入    
    if (iRet)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    rfRet = m_rfRet;
    binRecive = rfRet.GetFirst();
    if (binRecive.GetByteCount() < 5)
    {
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    m_binRecive = CBinary(binRecive.GetBuffer() + 4, binRecive.GetByteCount() - 4);
    if (checkIs7f(m_binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return CErrorCode::EC_ECU_REFUSE;
    }

    sendframe.SetSendFrame(CBinary("\x22\xA2\x2A", 3));  // 07 64 08 03 22 A2 2A 00 00 00 00
    rfRet = SendDataComm(sendframe);
    if (0 == rfRet.GetByteCount())
    {
        ecuInter.SendReceive(CBinary("\x40\x00\x07\x64\x10\x01", 6));
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    m_binRecive = rfRet.GetFirst();
    if (checkIs7f(m_binRecive))
    {
        ecuInter.SendReceive(CBinary("\x40\x00\x07\x64\x10\x01", 6));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return CErrorCode::EC_ECU_REFUSE;
    }

    if (m_binRecive.GetByteCount() < 4  // 07 6C 08 04 62 A2 2A 03 00 00 00
        || m_binRecive[0] != 0x62
        || m_binRecive[1] != 0xA2
        || m_binRecive[2] != 0x2A
        || m_binRecive[3] != 0x03)
    {
        ecuInter.SendReceive(CBinary("\x40\x00\x07\x64\x10\x01", 6));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关
        //校准模式程序未能完成        必须调查该问题        问题得到解决后，还可利用设置与配置菜单中单独的速度控制校准应用程序重试该步骤
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000069"), g_GetTxtStringFormHtml("0x0000BE12,0x0000B105,0x0000BE13"));
        return iRet;
    }

    //step09
    sendframe.SetSendFrame(CBinary("\x22\xA2\x2B", 3));  // Req: 07 64 08 03 22 A2 2B 00 00 00 00
    rfRet = SendDataComm(sendframe);
    m_binRecive = rfRet.GetFirst();
    if (0 == rfRet.GetByteCount())
    {
        ecuInter.SendReceive(CBinary("\x40\x00\x07\x64\x10\x01", 6));
        FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
        return CErrorCode::EC_TIME_OVER;
    }

    m_binRecive = rfRet.GetFirst();
    if (checkIs7f(m_binRecive))
    {
        ecuInter.SendReceive(CBinary("\x40\x00\x07\x64\x10\x01", 6));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));//ECU不支持
        return CErrorCode::EC_ECU_REFUSE;
    }

    if (m_binRecive.GetByteCount() < 4  // 07 6C 08 04 62 A2 2B 00 00 00 00
        || m_binRecive[0] != 0x62
        || m_binRecive[1] != 0xA2
        || m_binRecive[2] != 0x2B
        || m_binRecive[3] != 0x00)
    {
        ecuInter.SendReceive(CBinary("\x40\x00\x07\x64\x10\x01", 6));
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关
        //校准模式程序未能完成        必须调查该问题        问题得到解决后，还可利用设置与配置菜单中单独的速度控制校准应用程序重试该步骤
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000069"), g_GetTxtStringFormHtml("0x0000BE12,0x0000B105,0x0000BE13"));
        return iRet;
    }

    //step10
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BEC2"), g_GetTxtStringFormHtml("0x0000BEC2,0x0000B0A3"));//电子校准完成
    PleaseWait_xS(2000, g_GetTxtStringFormHtml("0x0000B0A3,0x9000CFF6"));
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关

    //step11~15
    if ("module_special_L320_2010" == strOpenFile)
        // 执行读取故障码的功能
        iRet = ClearSysDTC_Programme_538(PTL_CAN_11_500K, CBinary("\x07\x64\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x076C);
    else
        iRet = CheckSysDTCNub_model1(PTL_CAN_11_500K, PTL_CAN_11_125K, CBinary("\x07\x64\x08\x03\x19\x02\x0C\x00\x00\x00\x00", 11), CBinary("\x07\xDF\x08\x04\x14\xFF\xFF\xFF\x00\x00\x00", 11), 0x076C);

    if ("module_special_L320_2010" == strOpenFile
        || "module_special_L320_2012" == strOpenFile
        || "module_special_X351_2013" == strOpenFile
        || "module_special_L322_2010" == strOpenFile
        || "module_special_X150_2010" == strOpenFile)
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011")); //将点火开关打开
    // 完成故障码功能后跳入上方电子校准发送命令
    // 总共读2次故障码   ①：学习车辆标识完成之后 ②：电子校准状态完成之后

    //step16
    //此时 '跟随图标' 应该在闪烁，表示车辆正处于 '维修校准' 状态，并要求进行行驶循环. // 确保黄色图标此时在闪烁
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"),
        g_GetTxtStringFormHtml("0x90026EF6,0x0000BEC6,0x0000BEC5,0x90022F90"), DF_MB_OKCANCEL, DT_LEFT);
    if (iKey == DF_IDCANCEL)
    {
        //    校准模式程序未能完成    必须调查该问题        问题得到解决后，还可利用设置与配置菜单中单独的速度控制校准应用程序重试该步骤
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000069"), g_GetTxtStringFormHtml("0x0000BE12,0x0000B105,0x0000BE13"), DF_MB_OK, DT_LEFT);
        return iRet;
    }

    if ("module_special_L320_2010" == strOpenFile
        || "module_special_L320_2012" == strOpenFile
        || "module_special_X351_2013" == strOpenFile
        || "module_special_L322_2010" == strOpenFile
        || "module_special_X150_2010" == strOpenFile)
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"));//关闭点火开关
    // 注意说明+校准说明
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000BEC3,0x0000BECA,0x0000BECB,0x0000BECC,0x0000BECD") + "\n"
        + g_GetTxtStringFormHtml("0x0000BECE,0x0000BECF,0x0000BED0,0x0000BED1,0x0000BED2,0x0000BED3,0x0000BED4") + "\n"
        + g_GetTxtStringFormHtml("0x0000BED5,0x0000BED6,0x0000BED7,0x0000BED8,0x0000BED9,0x900012B4"), DF_MB_OK, DT_LEFT);

    return iRet;

}

// 激活驻车加热
W_ErrorCode CSeviceFunctionNew::Active_car_hot_L550_2015()
{
    W_ErrorCode iRet = CErrorCode::EC_SUCCESS;
    CSendFrame sendframe;
    CReceiveFrame rfRet;
    W_I16 iKey = 0;
    W_U32 uStandValue = 0xB350FE;
    W_I32 P_table[3][8] = { {0x7A2AAC,0x24864B,0x9CEC95,0xE81B28,0x01F443,0xD60995,0x7CD129,0x2C4251},
    {0x8C65B0,0xCD3B72,0x4BB5E7,0x438BDD,0x56C4A8,0x796853,0x2303A5,0x93E758},
    {0xF23EB3,0x34BF65,0xB9ADC8,0xA29882,0x94F306,0xFC171F,0x2CDE3C,0x896E6A} };


    // 将激活燃油型辅助加热器
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000C240"), g_GetTxtStringFormHtml("0x90026E3D")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x0001D61C") + "\n" + "\n" + g_GetTxtStringFormHtml("0x80001618")
        , DF_MB_OKCANCEL, DT_LEFT);
    if (iKey == DF_IDCANCEL)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B8D1"), DF_MB_ANYKEYRETURN, DT_LEFT);//应用程序被用户中止
        return iRet;
    }

    // 判断电压
    iRet = CheckEngineStop(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xF4\x0C\x00\x00\x00\x00", 11), 0x07E8);

    // 将点火开关打开
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000011"), DF_MB_ANYKEYRETURN, DT_LEFT);

    // 模块初始化
    PleaseWait_xS_haveTTL(5000, g_GetTxtStringFormHtml("0x90020A87"), g_GetTxtStringFormHtml("0x90020A86"));

    // 执行强制燃烧
    iKey = FxShowMessageBox(g_GetTxtStringFormHtml("0x0000C240"), g_GetTxtStringFormHtml("0x90026E3D") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B330")
        , DF_MB_OKCANCEL, DT_LEFT);
    if (DF_IDCANCEL == iKey)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B8D1"), DF_MB_ANYKEYRETURN, DT_LEFT);//应用程序被用户中止
        return iRet;
    }

    bool iFlag = false;
    while (1)
    {
        //step10
        FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);

        //链路：11位can125k
        EnterSystem(PTL_CAN_11_125K, CBinary("\x07\xE3\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x07EB);
        SendDataComm(CBinary("\x22\xf1\x03", 3));
        iRet = EnterSystem(PTL_CAN_11_125K, CBinary("\x07\xE3\x08\x02\x10\x03\x00\x00\x00\x00\x00", 11), 0x07EB);
        if (!iRet)
        {
            rfRet = m_rfRet;
            CBinary binRecive = rfRet.GetFirst();
            if (binRecive.GetByteCount() > 4)
            {
                m_binRecive = CBinary(binRecive.GetBuffer() + 4, binRecive.GetByteCount() - 4);
                if (!checkIs7f(m_binRecive))
                {
                    //step11
                    //安全访问
                    iRet = SafeLogin_L405_2014_Oil(CBinary("\x27\x03", 2), uStandValue, P_table);
                    if (!iRet)
                    {
                        //链路保持
                        m_pNetLayer->KeepLink(1000, CSendFrame(CBinary("\x3E\x00", 2)));

                        while (1)
                        {
                            //step12
                            sendframe.SetSendFrame(CBinary("\x31\x01\x90\x10", 5));
                            rfRet = SendDataComm(sendframe);
                            m_binRecive = rfRet.GetFirst();
                            if (m_binRecive.GetByteCount() > 3 && 0x71 == m_binRecive[0] && 1 == m_binRecive[1] && 0x90 == m_binRecive[2] && 0x10 == m_binRecive[3])
                            {
                                //step13
                                sendframe.SetSendFrame(CBinary("\x31\x03\x90\x10", 4));
                                rfRet = SendDataComm(sendframe);
                                m_binRecive = rfRet.GetFirst();
                                if (m_binRecive.GetByteCount() > 4 && 0x71 == m_binRecive[0] && 3 == m_binRecive[1] && 0x90 == m_binRecive[2] && 0x10 == m_binRecive[3])
                                {
                                    if (0x12 == m_binRecive[4])
                                    {
                                        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000959C"), g_GetTxtStringFormHtml("0x0000B0A1"), DF_MB_ANYKEYRETURN, DT_LEFT);//完成
                                        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_ANYKEYRETURN, DT_LEFT);//关闭点火开关

                                        // 原为2700000
                                        PleaseWait_xS_haveTTL(5000, g_GetTxtStringFormHtml("0x90012646"), g_GetTxtStringFormHtml("0x90026E3C"));
                                        m_pNetLayer->KeepLink(0); // 断开链路保持
                                        break;
                                    }
                                    else
                                    {
                                        sendframe.SetSendFrame(CBinary("\x10\x01", 2));
                                        rfRet = SendDataComm(sendframe);

                                        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000BFAC"), g_GetTxtStringFormHtml("0x0000B21F"), DF_MB_ANYKEYRETURN, DT_LEFT);//失败
                                        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x00000010"), DF_MB_ANYKEYRETURN, DT_LEFT);//关闭点火开关
                                        iRet = CheckSysDTCNub_model1(PTL_CAN_11_125K, PTL_CAN_11_500K, CBinary("\x07\x33\x08\x03\x19\x02\x0C\x00\x00\x00\x00", 11), CBinary("\x07\xDF\x08\x04\x14\xFF\xFF\xFF\x00\x00\x00", 11), 0x073B);
                                        return iRet;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            iRet = CheckSysDTCNub_model1(PTL_CAN_11_125K, PTL_CAN_11_500K, CBinary("\x07\xE3\x08\x03\x19\x02\x0C\x00\x00\x00\x00", 11), CBinary("\x07\xDF\x08\x04\x14\xFF\xFF\xFF\x00\x00\x00", 11), 0x07EB);
            return iRet;
        }
        iRet = Auxiliary_Heater_00F00030_L319_2010_Step24_25(iFlag);
        iFlag = true;
        if (iRet)
            break;
    }

    return iRet;
}

// 变速器控制模块调适--L550
W_ErrorCode CSeviceFunctionNew::TCMadjustment_0x00F0018C_L550_2015()
{
    W_ErrorCode iRet = 0;
    W_I16 iKey = 0;

    CSendFrame sendframe;
    CReceiveFrame rfRet;
    CBinary binRecive;
    char charTemp[500] = "";
    string strall = "";
    string strVin = "";
    string strsoftware = "";
    string strserial = "";
    int ivalue = 0;

    bool is7f;
    W_I32 iback = -1;
    string strTemp, data[6], units_mBar[6];

    //step01 说明1
    FxShowMessageBox(g_GetTxtStringFormHtml("0x9002B283"), g_GetTxtStringFormHtml("0x9002B283") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BA42")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BF1D") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002D4D3")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002D4D9") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002D473")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002D474") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002D475")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OK, DT_LEFT);
    //step01 说明2
    FxShowMessageBox(g_GetTxtStringFormHtml("0x9002B283"), g_GetTxtStringFormHtml("0x9002B283") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9000EA16")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x900124F2") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BA41")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x90025D5A") + "\n" + "\n" + g_GetTxtStringFormHtml("0x90029FE9")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OK, DT_LEFT);
    //step01 说明2
    FxShowMessageBox(g_GetTxtStringFormHtml("0x9002B283"), g_GetTxtStringFormHtml("0x9002B283") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000B257")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BA43") + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BA44")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x0000BF21") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002B072")
        + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OK, DT_LEFT);


    //step05 确保发动机在运转
    FxShowMessageBox(g_GetTxtStringFormHtml("0x0000B93D"), g_GetTxtStringFormHtml("0x9001251C"));

    //step06 变速器液温度说明
    iRet = FxShowMessageBox(g_GetTxtStringFormHtml("0x9002CDB5"), g_GetTxtStringFormHtml("0x90027265") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OKCANCEL, DT_LEFT);
    if (iRet == DF_IDCANCEL)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x900019A5"), g_GetTxtStringFormHtml("0x9002C122"), DF_MB_OK);//因用户中止而失败 - 重试程序
        return CErrorCode::EC_TIME_OVER;
    }
    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通信中
    Sleep(800);

    CActTestCtrl uiAct;
    string strCal = "";
    W_I16 iValue = 0;
    char EngTmp[20] = { 0 };

    uiAct.InitCtrl(g_GetTxtStringFormHtml("0x90002446"));//变速器液温度
    uiAct.SetColumnWid(75, 15, 10);
    uiAct.AddOneItem(g_GetTxtStringFormHtml("0x90002446,0x90027266"));//这个程序将持续读取变速器油液温度，直到满足正确的运行条件 (50°C)。
    uiAct.AddOneItem(g_GetTxtStringFormHtml("0x90002446"), FxGetStdString(CBinary("\x4A\xAA\x00\x00\x00\x05", 6)));
    uiAct.AddOneBtn(g_GetTxtStringFormHtml("0x0001D595"), true);//确定

    iRet = EnterSystem(PTL_CAN_11_500K, CBinary("\x07\xE1\x08\x03\x22\xF1\x03\x00\x00\x00\x00", 11), 0x07E9);
    SendDataComm(CBinary("\x22\xF1\x03", 3));
    while (1)
    {
        sendframe.SetSendFrame(CBinary("\x22\x1E\x69", 3));
        rfRet = SendDataComm(sendframe);
        binRecive = rfRet.GetFirst();
        if (binRecive.GetByteCount() == 0)
        {
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_OK, DT_LEFT);
            return CErrorCode::EC_TIME_OVER;
        }
        else if (checkIs7f(binRecive))
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"), DF_MB_OK);//ECU不支持
            return CErrorCode::EC_ECU_REFUSE;
        }
        if (binRecive.GetByteCount() < 4 || binRecive[3] < 0x5A || binRecive[3] > 0xFF)  // 第4个字节为控制位，>5A
        {
            uiAct.SetBtnStatus(0, false);
            strCal = "Data out of range";
        }
        else
        {
            iValue = binRecive[3] - 0x28;  // -40+byte[3]
            sprintf(EngTmp, "%d", iValue);
            strCal = EngTmp;
            uiAct.SetBtnStatus(0, true);
        }
        uiAct.SetItemValue(1, strCal);  // 显示温度
        iRet = uiAct.ShowCtrl();
        if (iRet == -1)
            return iRet;
        else if (iRet == 0)
            break;
    }

    //step06 满足正确的运行条件 (50°C)。 完成
    FxShowMessageBox(g_GetTxtStringFormHtml("0x9002CDB5"), g_GetTxtStringFormHtml("0x90002446,0x90027266,0x0000B0A3"), DF_MB_OK, DT_LEFT);
    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通信中
    Sleep(800);


    SendDataComm(CBinary("\x22\xF1\x03", 3));
    sendframe.SetSendFrame(CBinary("\x22\xF1\x8C", 3));
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    if (checkIs7f(binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00009A6B"), g_GetTxtStringFormHtml("0x0000BE50"));
        return CErrorCode::EC_ECU_REFUSE;
    }
    else if (binRecive.GetByteCount() < 3 || binRecive[0] != 0x62 || binRecive[1] != 0xF1 || binRecive[2] != 0x8C)
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x9000220B"), g_GetTxtStringFormHtml("0x00009A6B"), DF_MB_OK, DT_LEFT);
        return CErrorCode::EC_DATA;
    }

    //step07 变速器控制模块调适  -  静态接合
    FxShowMessageBox(g_GetTxtStringFormHtml("0x9002CDB5"), g_GetTxtStringFormHtml("0x00000069") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002720B") + "\n" + "\n" +
        g_GetTxtStringFormHtml("0x9002720C") + "\n" + "\n" + g_GetTxtStringFormHtml("0x9002720D") + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4") + "\n" + "\n" + "\n" + "\n" + g_GetTxtStringFormHtml("0x900012B4"), DF_MB_OK, DT_LEFT);

    SendDataComm(CBinary("\x22\xF1\x03", 3));
    sendframe.SetSendFrame(CBinary("\x22\xF1\x8C", 3));
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    if (!binRecive.GetByteCount() || checkIs7f(binRecive))
    {
        FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml(TXT_HTML_STATE_VALUE_IGNITION_OFF));//点火关闭
        FxShowMessageBox(g_GetTxtStringFormHtml("0x0000005F"), g_GetTxtStringFormHtml("0x0000B0AC"));//测试失败
        return CErrorCode::EC_TIME_OVER;
    }

    int count = 0;
    do
    {
        ivalue = 0;
        if (binRecive.GetByteCount() > (count + 3) && binRecive[count + 3])   // 22 f1 8c 软件版本   TEST3-TEST20
        {
            ivalue = binRecive[count + 3];
            if (ivalue == 0)
                break;
            if (ivalue > 9)
                sprintf(charTemp, "%c", ivalue);
            else
                sprintf(charTemp, "%d", ivalue);
            strVin += charTemp;
        }
        count++;
    } while (count < 17);

    sendframe.SetSendFrame(CBinary("\x22\xF1\x8C", 3));   // VIN   TEST3-TEST19
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    for (count = 0; count < binRecive.GetByteCount() - 3; count++)
    {
        ivalue = 0;
        if (binRecive[count + 3])
        {
            ivalue = binRecive[count + 3];
            sprintf(charTemp, "%d", ivalue);
            strsoftware += charTemp;
        }
    }
    sendframe.SetSendFrame(CBinary("\x22\xF1\x88", 3));  // 序列号   TEST3-TEST29
    rfRet = SendDataComm(sendframe);
    binRecive = rfRet.GetFirst();
    for (count = 0; count < binRecive.GetByteCount() - 3; count++)
    {
        ivalue = 0;
        if (binRecive[count + 3])
        {
            ivalue = binRecive[count + 3];
            sprintf(charTemp, "%d", ivalue);
            strserial += charTemp;
        }
    }

    strall = g_GetTxtStringFormHtml("0x9002B616") + ":%s\n"        //软件版本
        + g_GetTxtStringFormHtml("0x9002CE9B") + ":%s\n"        //序列号
        + g_GetTxtStringFormHtml("0x900254CE") + ":%s\n";        //VIN

    sprintf(charTemp, strall.c_str(), strsoftware.c_str(), strserial.c_str(), strVin.c_str());

    //step08 软件版本/序列号/VIN
    FxShowMessageBox(g_GetTxtStringFormHtml("0x9002CDB5"), charTemp, DF_MB_OK, DT_LEFT);


    while (1)
    {
        CBinary binRecieve1;

        Sleep(250);
        vector<W_U8>    vctInt;
        CEcuInfoCtrl    list;

        // 分栏占屏比例
        vctInt.push_back(10);
        vctInt.push_back(20);
        vctInt.push_back(10);
        vctInt.push_back(10);
        vctInt.push_back(5);
        vctInt.push_back(5);
        vctInt.push_back(5);
        vctInt.push_back(25);
        vctInt.push_back(10);

        list.InitCtrl(g_GetTxtStringFormHtml("0x0000BA2D"), vctInt);
        list.AddOneBtn(g_GetTxtStringFormHtml("0x0001D595"));
        list.AddItem(g_GetTxtStringFormHtml("0x9001E80B"));
        list.AddItem("E");
        list.AddItem("C");
        list.AddItem("D");
        list.AddItem("B");
        list.AddItem("");
        list.AddItem(g_GetTxtStringFormHtml("0x9002D132"));
        list.AddItem(g_GetTxtStringFormHtml("0x9001EC8A"));
        list.AddItem(g_GetTxtStringFormHtml("0x90027A8D"));



        sendframe.SetSendFrame(CBinary("\x22\x1E\x87", 3));   // Req: 07 E1 08 03 22 1E 86 00 00 00 00
        rfRet = SendDataComm(sendframe);
        binRecieve1 = rfRet.GetFirst();
        is7f = checkIs7f(binRecieve1);
        if (binRecieve1.GetByteCount() == 0)
        {
            FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ENTERSYSFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_PACKET_TIME_OVER;
        }
        else if (is7f)
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x90027265"), g_GetTxtStringFormHtml("0x0000BE50"));
            return CErrorCode::EC_ECU_REFUSE;
        }
        else if (binRecieve1.GetByteCount() < 3 || (binRecieve1[0] != 0x62 || binRecieve1[1] != 0x1E || binRecieve1[2] != 0x87))
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x90027265"), g_GetTxtStringFormHtml("0x0000B21F"), DF_MB_CANCEL, DT_LEFT);
            return CErrorCode::EC_DATA;
        }
        // 总共：4_2
        int value_4_2;
        string str_4_2;
        char buf[20];
        value_4_2 = binRecieve1[5] * 256 + binRecieve1[6];  // 16进制拼接2个字节   binRecieve1[3]<<8+binRecieve[4]
        sprintf(buf, "%d", value_4_2);
        str_4_2 = buf;

        // 总共：2_2
        int value_2_2;
        string str_2_2;
        value_2_2 = binRecieve1[7] * 256 + binRecieve1[8];
        sprintf(buf, "%d", value_2_2);
        str_2_2 = buf;

        // 总共: 3_2
        int value_3_2;
        string str_3_2;
        value_3_2 = binRecieve1[9] * 256 + binRecieve1[10];
        sprintf(buf, "%d", value_3_2);
        str_3_2 = buf;

        // 总共: 1_2
        int value_1_2;
        string str_1_2;
        value_1_2 = binRecieve1[11] * 256 + binRecieve1[12];
        sprintf(buf, "%d", value_1_2);
        str_1_2 = buf;


        // mBar
        sendframe.SetSendFrame(CBinary("\x22\x1E\x85", 3));  // 07 E1 08 03 22 1E 85 00 00 00 00
        rfRet = SendDataComm(sendframe);
        binRecieve1 = rfRet.GetFirst();
        is7f = checkIs7f(binRecieve1);
        if (binRecieve1.GetByteCount() == 0)
        {
            FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ENTERSYSFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_PACKET_TIME_OVER;
        }
        else if (is7f)
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x90027265"), g_GetTxtStringFormHtml("0x0000BE50"));
            return CErrorCode::EC_ECU_REFUSE;
        }
        else if (binRecieve1.GetByteCount() < 3 || (binRecieve1[0] != 0x62 || binRecieve1[1] != 0x1E || binRecieve1[2] != 0x85))
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x90027265"), g_GetTxtStringFormHtml("0x0000B21F"), DF_MB_CANCEL, DT_LEFT);
            return CErrorCode::EC_DATA;
        }
        // mBar：4_3
        int value_4_3;
        string str_4_3;
        value_4_3 = binRecieve1[5] * 256 + binRecieve1[6];  // 16进制拼接2个字节
        sprintf(buf, "%d", value_4_3);
        str_4_3 = buf;

        // mBar: 2_3
        int value_2_3;
        string str_2_3;
        value_2_3 = binRecieve1[7] * 256 + binRecieve1[8];
        sprintf(buf, "%d", value_2_3);
        str_2_3 = buf;

        // mBar: 3_3
        int value_3_3;
        string str_3_3;
        value_3_3 = binRecieve1[9] * 256 + binRecieve1[10];
        sprintf(buf, "%d", value_3_3);
        str_3_3 = buf;

        // mBar: 1_3
        int value_1_3;
        string str_1_3;
        value_1_3 = binRecieve1[11] * 256 + binRecieve1[12];
        sprintf(buf, "%d", value_1_3);
        str_1_3 = buf;


        sendframe.SetSendFrame(CBinary("\x22\x1E\x7E", 3));  // 07 E1 08 03 22 1E 7E 00 00 00 00
        rfRet = SendDataComm(sendframe);
        binRecieve1 = rfRet.GetFirst();
        is7f = checkIs7f(binRecieve1);
        if (binRecieve1.GetByteCount() == 0)
        {
            FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ENTERSYSFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_PACKET_TIME_OVER;
        }
        else if (is7f)
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x90027265"), g_GetTxtStringFormHtml("0x0000BE50"));
            return CErrorCode::EC_ECU_REFUSE;
        }
        else if (binRecieve1.GetByteCount() < 3 || (binRecieve1[0] != 0x62 || binRecieve1[1] != 0x1E || binRecieve1[2] != 0x7E))
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x90027265"), g_GetTxtStringFormHtml("0x0000C1A4"), DF_MB_CANCEL, DT_LEFT);
            return CErrorCode::EC_DATA;
        }

        // 温度控制
        sendframe.SetSendFrame(CBinary("\x22\x1E\x69", 3));  // 07 E1 08 03 22 1E 69 00 00 00 00
        rfRet = SendDataComm(sendframe);
        binRecieve1 = rfRet.GetFirst();
        is7f = checkIs7f(binRecieve1);
        if (binRecieve1.GetByteCount() == 0)
        {
            FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ENTERSYSFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_PACKET_TIME_OVER;
        }
        else if (is7f)
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x90027265"), g_GetTxtStringFormHtml("0x0000BE50"));
            return CErrorCode::EC_ECU_REFUSE;
        }
        else if (binRecieve1.GetByteCount() <= 3 || (binRecieve1[0] != 0x62 || binRecieve1[1] != 0x1E || binRecieve1[2] != 0x69))
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x90027265"), g_GetTxtStringFormHtml("0x0000C1A4"), DF_MB_CANCEL, DT_LEFT);
            return CErrorCode::EC_DATA;
        }

        int value_temperature;
        string str_temperature;
        value_temperature = -40 + binRecieve1[3];  // 速度控制
        sprintf(buf, "%d", value_temperature);
        str_temperature = buf;
        string contain = g_GetTxtStringFormHtml("0x0000EB5C");  // 字符串拼接
        str_temperature += contain;

        string change = "";
        if (binRecieve1[3] < 50)
        {
            change = FxGetStdString(CBinary("\x4A\x90\x00\x01\x43\xED", 6));
        }
        else
        {
            change = FxGetStdString(CBinary("\x4A\x90\x00\x01\x43\xEC", 6));
        }


        // 档位
        sendframe.SetSendFrame(CBinary("\x22\x1E\x1F", 3));   // 07 E1 08 03 22 1E 1F 00 00 00 00
        rfRet = SendDataComm(sendframe);
        binRecieve1 = rfRet.GetFirst();
        is7f = checkIs7f(binRecieve1);
        if (binRecieve1.GetByteCount() == 0)
        {
            FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ENTERSYSFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_PACKET_TIME_OVER;
        }
        else if (is7f)
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x90027265"), g_GetTxtStringFormHtml("0x0000BE50"));
            return CErrorCode::EC_ECU_REFUSE;
        }
        else if (binRecieve1.GetByteCount() <= 3 || (binRecieve1[0] != 0x62 || binRecieve1[1] != 0x1E || binRecieve1[2] != 0x1F))
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x90027265"), g_GetTxtStringFormHtml("0x0000C1A4"), DF_MB_CANCEL, DT_LEFT);
            return CErrorCode::EC_DATA;
        }
        int value_gear;
        string str_gear;
        value_gear = binRecieve1[49];
        sprintf(buf, "%d", value_gear);
        str_gear = buf;
        if (binRecieve1[49] == 0x00)
        {
            str_gear = "N";
        }


        sendframe.SetSendFrame(CBinary("\x22\xF4\x0C", 3));   //  07 E1 08 03 22 F4 0C 00 00 00 00
        rfRet = SendDataComm(sendframe);
        binRecieve1 = rfRet.GetFirst();
        is7f = checkIs7f(binRecieve1);
        if (binRecieve1.GetByteCount() == 0)
        {
            FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ENTERSYSFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_PACKET_TIME_OVER;
        }
        else if (is7f)
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x90027265"), g_GetTxtStringFormHtml("0x0000BE50"));
            return CErrorCode::EC_ECU_REFUSE;
        }
        else if (binRecieve1.GetByteCount() <= 3 || (binRecieve1[0] != 0x62 || binRecieve1[1] != 0xF4 || binRecieve1[2] != 0x0C))
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x90027265"), g_GetTxtStringFormHtml("0x0000C1A4"), DF_MB_CANCEL, DT_LEFT);
            return CErrorCode::EC_DATA;
        }



        // 踏板位置
        sendframe.SetSendFrame(CBinary("\x22\xF4\x5A", 3));  // 07 E1 08 03 22 F4 5A 00 00 00 00
        rfRet = SendDataComm(sendframe);
        binRecieve1 = rfRet.GetFirst();
        is7f = checkIs7f(binRecieve1);
        if (binRecieve1.GetByteCount() == 0)
        {
            FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ENTERSYSFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_PACKET_TIME_OVER;
        }
        else if (is7f)
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x90027265"), g_GetTxtStringFormHtml("0x0000BE50"));
            return CErrorCode::EC_ECU_REFUSE;
        }
        else if (binRecieve1.GetByteCount() <= 3 || (binRecieve1[0] != 0x62 || binRecieve1[1] != 0xF4 || binRecieve1[2] != 0x5A))
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x90027265"), g_GetTxtStringFormHtml("0x0000C1A4"), DF_MB_CANCEL, DT_LEFT);
            return CErrorCode::EC_DATA;
        }

        int value_step;
        string str_step;
        value_step = 0.39215 * binRecieve1[49];
        sprintf(buf, "%d", value_step);
        str_step = buf;
        string sym = "%";
        str_step += sym;



        sendframe.SetSendFrame(CBinary("\x22\x1E\x8B", 3));  //  07 E1 08 03 22 1E 8B 00 00 00 00
        rfRet = SendDataComm(sendframe);
        binRecieve1 = rfRet.GetFirst();
        is7f = checkIs7f(binRecieve1);
        if (binRecieve1.GetByteCount() == 0)
        {
            FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ENTERSYSFAIL, DF_MB_BACK, DT_LEFT);
            return CErrorCode::EC_PACKET_TIME_OVER;
        }
        else if (is7f)
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x90027265"), g_GetTxtStringFormHtml("0x0000BE50"));
            return CErrorCode::EC_ECU_REFUSE;
        }
        else if (binRecieve1.GetByteCount() <= 3 || (binRecieve1[0] != 0x62 || binRecieve1[1] != 0x1E || binRecieve1[2] != 0x8B))
        {
            FxShowMessageBox(g_GetTxtStringFormHtml("0x90027265"), g_GetTxtStringFormHtml("0x0000C1A4"), DF_MB_CANCEL, DT_LEFT);
            return CErrorCode::EC_DATA;
        }


        sendframe.SetSendFrame(CBinary("\x22\xF1\x03", 3));
        rfRet = SendDataComm(sendframe);

        list.SetSubItem(0, 1, "");
        list.SetSubItem(0, 2, g_GetTxtStringFormHtml("0x9002D745")); // 总共
        list.SetSubItem(0, 3, g_GetTxtStringFormHtml("0x9002D746")); // mBar
        list.SetSubItem(0, 4, "1");
        list.SetSubItem(0, 5, "2");
        list.SetSubItem(0, 6, "3");
        list.SetSubItem(0, 7, g_GetTxtStringFormHtml("0x9002D747")); // 涡轮扭矩范围 (Nm)
        list.SetSubItem(0, 8, g_GetTxtStringFormHtml("0x9002D748")); // 发动机转速范围（Rpm）

        list.SetSubItem(1, 1, "3");
        list.SetSubItem(1, 2, str_1_2);// 总共
        list.SetSubItem(1, 3, str_1_3);// mBar
        list.SetSubItem(1, 7, change); // 涡轮扭矩范围

        list.SetSubItem(2, 1, "7");
        list.SetSubItem(2, 2, str_2_2);
        list.SetSubItem(2, 3, str_2_3);

        list.SetSubItem(3, 1, "6");
        list.SetSubItem(3, 2, str_3_2);
        list.SetSubItem(3, 3, str_3_3);

        list.SetSubItem(4, 1, "7");
        list.SetSubItem(4, 2, str_4_2);
        list.SetSubItem(4, 3, str_3_3);

        list.SetSubItem(6, 1, g_GetTxtStringFormHtml("0x900150E7"));  // 踏板位置
        list.SetSubItem(6, 2, g_GetTxtStringFormHtml("0x9001F5CE")); // 档位
        list.SetSubItem(6, 3, g_GetTxtStringFormHtml("0x9001F5D2")); // 状态

        list.SetSubItem(7, 0, str_temperature);
        list.SetSubItem(7, 1, str_step); // str踏板位置
        if (units_mBar[5] == "0")
            list.SetSubItem(7, 2, "N");
        else
            list.SetSubItem(7, 2, str_gear);  // 档位
        list.SetSubItem(7, 3, g_GetTxtStringFormHtml("0x9002D129"));
        list.SetSubItem(8, 0, change); // 范围
        list.SetSubItem(8, 1, g_GetTxtStringFormHtml("0x9002D749"));
        iback = list.ShowCtrl();
        if (iback == -1)
        {
            FxShowMessageBox(STD_TTL_MSG_INFORMATION, STD_TXT_MSG_COMMFAIL, DF_MB_BACK, DT_LEFT);
            return iRet;
        }
        else if (iback == 0)
        {
            break;
        }
    }


    FxShowMessageBox(STD_INFO_COMMUNICATION_STATUS, STD_INFO_ESTAB_VEH_COMMUNICATION, DF_MB_NOBUTTON);//与车辆通信中
    Sleep(800);


    //step09 变速器控制模块调适  -  静态接合
    FxShowMessageBox(g_GetTxtStringFormHtml("0x9002CDB5"), g_GetTxtStringFormHtml("0x00000069,0x9002720B,0x9002720C,0x9002720D,0x9002720F"), DF_MB_OK, DT_LEFT);

    //step10 确保关闭
    FxShowMessageBox(g_GetTxtStringFormHtml("0x00000050"), g_GetTxtStringFormHtml("0x90009FF7"));

    //step11 故障码
    iRet = ClearSysDTC_Programme_538(PTL_CAN_11_500K, CBinary("\x07\xE0\x08\x03\x22\xf1\x03\x00\x00\x00\x00", 11), 0x07E8);

    return iRet;
}
//#endif